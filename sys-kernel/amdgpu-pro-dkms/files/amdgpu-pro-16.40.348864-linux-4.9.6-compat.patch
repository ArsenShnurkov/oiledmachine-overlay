Based on https://gist.github.com/pimlie/064475bbd858995feb38d620d17e2437
patch by pimlie
----
diff -urp amdgpu-pro-16.40-348864.orig/amd/amdgpu/amdgpu_acp.c amdgpu-pro-16.40-348864/amd/amdgpu/amdgpu_acp.c
--- amdgpu-pro-16.40-348864.orig/amd/amdgpu/amdgpu_acp.c	2016-10-24 18:01:17.000000000 -0700
+++ amdgpu-pro-16.40-348864/amd/amdgpu/amdgpu_acp.c	2017-02-18 23:50:11.906897783 -0800
@@ -421,29 +421,6 @@ static int acp_suspend(void *handle)
 
 static int acp_resume(void *handle)
 {
-	int i, ret;
-	struct acp_pm_domain *apd;
-	struct amdgpu_device *adev = (struct amdgpu_device *)handle;
-
-	/* return early if no ACP */
-	if (!adev->acp.acp_genpd)
-		return 0;
-
-	/* SMU block will power on ACP irrespective of ACP runtime status.
-	 * Power off explicitly based on genpd ACP runtime status so that ACP
-	 * hw and ACP-genpd status are in sync.
-	 * 'suspend_power_off' represents "Power status before system suspend"
-	*/
-	if (adev->acp.acp_genpd->gpd.suspend_power_off == true) {
-		apd = container_of(&adev->acp.acp_genpd->gpd,
-					struct acp_pm_domain, gpd);
-
-		for (i = 4; i >= 0 ; i--) {
-			ret = acp_suspend_tile(apd->cgs_dev, ACP_TILE_P1 + i);
-			if (ret)
-				pr_err("ACP tile %d tile suspend failed\n", i);
-		}
-	}
 	return 0;
 }
 
diff -urp amdgpu-pro-16.40-348864.orig/amd/amdgpu/amdgpu_connectors.c amdgpu-pro-16.40-348864/amd/amdgpu/amdgpu_connectors.c
--- amdgpu-pro-16.40-348864.orig/amd/amdgpu/amdgpu_connectors.c	2016-10-24 18:01:17.000000000 -0700
+++ amdgpu-pro-16.40-348864/amd/amdgpu/amdgpu_connectors.c	2017-02-18 23:50:11.907897822 -0800
@@ -168,12 +168,12 @@ int amdgpu_connector_get_monitor_bpc(str
 		}
 
 		/* Any defined maximum tmds clock limit we must not exceed? */
-		if (connector->max_tmds_clock > 0) {
+		if (connector->display_info.max_tmds_clock > 0) {
 			/* mode_clock is clock in kHz for mode to be modeset on this connector */
 			mode_clock = amdgpu_connector->pixelclock_for_modeset;
 
 			/* Maximum allowable input clock in kHz */
-			max_tmds_clock = connector->max_tmds_clock * 1000;
+			max_tmds_clock = connector->display_info.max_tmds_clock * 1000;
 
 			DRM_DEBUG("%s: hdmi mode dotclock %d kHz, max tmds input clock %d kHz.\n",
 				  connector->name, mode_clock, max_tmds_clock);
diff -urp amdgpu-pro-16.40-348864.orig/amd/amdgpu/amdgpu_display.c amdgpu-pro-16.40-348864/amd/amdgpu/amdgpu_display.c
--- amdgpu-pro-16.40-348864.orig/amd/amdgpu/amdgpu_display.c	2016-10-24 18:01:17.000000000 -0700
+++ amdgpu-pro-16.40-348864/amd/amdgpu/amdgpu_display.c	2017-02-18 23:50:11.908897861 -0800
@@ -268,7 +268,7 @@ int amdgpu_crtc_page_flip(struct drm_crt
 
 	work->base = base;
 
-	r = drm_vblank_get(crtc->dev, amdgpu_crtc->crtc_id);
+	r = drm_crtc_vblank_get(crtc);
 	if (r) {
 		DRM_ERROR("failed to get vblank before flip\n");
 		goto pflip_cleanup;
@@ -296,7 +296,7 @@ int amdgpu_crtc_page_flip(struct drm_crt
 	return 0;
 
 vblank_cleanup:
-	drm_vblank_put(crtc->dev, amdgpu_crtc->crtc_id);
+	drm_crtc_vblank_put(crtc);
 
 pflip_cleanup:
 	if (unlikely(amdgpu_bo_reserve(new_rbo, false) != 0)) {
Only in amdgpu-pro-16.40-348864/amd/amdgpu: amdgpu_display.c.orig
Only in amdgpu-pro-16.40-348864/amd/amdgpu: amdgpu_sa.c.orig
Only in amdgpu-pro-16.40-348864/amd/amdgpu: amdgpu_sa.c.rej
diff -urp amdgpu-pro-16.40-348864.orig/amd/amdgpu/amdgpu_ttm.c amdgpu-pro-16.40-348864/amd/amdgpu/amdgpu_ttm.c
--- amdgpu-pro-16.40-348864.orig/amd/amdgpu/amdgpu_ttm.c	2016-10-24 18:01:17.000000000 -0700
+++ amdgpu-pro-16.40-348864/amd/amdgpu/amdgpu_ttm.c	2017-02-18 23:53:53.230510729 -0800
@@ -221,11 +221,14 @@ static void amdgpu_evict_flags(struct tt
 
 static int amdgpu_verify_access(struct ttm_buffer_object *bo, struct file *filp)
 {
+	struct drm_file *file_priv;
 	struct amdgpu_bo *rbo = container_of(bo, struct amdgpu_bo, tbo);
 
 	if (amdgpu_ttm_tt_get_usermm(bo->ttm))
 		return -EPERM;
-	return drm_vma_node_verify_access(&rbo->gem_base.vma_node, filp);
+        file_priv = filp->private_data;
+
+	return drm_vma_node_verify_access(&abo->gem_base.vma_node, file_priv);
 }
 
 static void amdgpu_move_null(struct ttm_buffer_object *bo,
Only in amdgpu-pro-16.40-348864/amd/amdgpu: amdgpu_ttm.c.orig
Only in amdgpu-pro-16.40-348864/amd/amdgpu: amdgpu_ttm.c.rej
diff -urp amdgpu-pro-16.40-348864.orig/amd/amdgpu/dce_v10_0.c amdgpu-pro-16.40-348864/amd/amdgpu/dce_v10_0.c
--- amdgpu-pro-16.40-348864.orig/amd/amdgpu/dce_v10_0.c	2016-10-24 18:01:17.000000000 -0700
+++ amdgpu-pro-16.40-348864/amd/amdgpu/dce_v10_0.c	2017-02-18 23:50:11.911897978 -0800
@@ -2667,19 +2667,21 @@ static void dce_v10_0_cursor_reset(struc
 	}
 }
 
-static void dce_v10_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
-				    u16 *blue, uint32_t start, uint32_t size)
+static int dce_v10_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
+				    u16 *blue, uint32_t size)
 {
 	struct amdgpu_crtc *amdgpu_crtc = to_amdgpu_crtc(crtc);
-	int end = (start + size > 256) ? 256 : start + size, i;
+	int i;
 
 	/* userspace palettes are always correct as is */
-	for (i = start; i < end; i++) {
+	for (i = 0; i < size; i++) {
 		amdgpu_crtc->lut_r[i] = red[i] >> 6;
 		amdgpu_crtc->lut_g[i] = green[i] >> 6;
 		amdgpu_crtc->lut_b[i] = blue[i] >> 6;
 	}
 	dce_v10_0_crtc_load_lut(crtc);
+
+	return 0;
 }
 
 static void dce_v10_0_crtc_destroy(struct drm_crtc *crtc)
@@ -3372,7 +3374,7 @@ static int dce_v10_0_pageflip_irq(struct
 
 	spin_unlock_irqrestore(&adev->ddev->event_lock, flags);
 
-	drm_vblank_put(adev->ddev, amdgpu_crtc->crtc_id);
+	drm_crtc_vblank_put(&amdgpu_crtc->base);
 	schedule_work(&works->unpin_work);
 
 	return 0;
Only in amdgpu-pro-16.40-348864/amd/amdgpu: dce_v10_0.c.orig
diff -urp amdgpu-pro-16.40-348864.orig/amd/amdgpu/dce_v11_0.c amdgpu-pro-16.40-348864/amd/amdgpu/dce_v11_0.c
--- amdgpu-pro-16.40-348864.orig/amd/amdgpu/dce_v11_0.c	2016-10-24 18:01:17.000000000 -0700
+++ amdgpu-pro-16.40-348864/amd/amdgpu/dce_v11_0.c	2017-02-18 23:50:11.912898017 -0800
@@ -2677,19 +2677,21 @@ static void dce_v11_0_cursor_reset(struc
 	}
 }
 
-static void dce_v11_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
-				    u16 *blue, uint32_t start, uint32_t size)
+static int dce_v11_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
+				    u16 *blue, uint32_t size)
 {
 	struct amdgpu_crtc *amdgpu_crtc = to_amdgpu_crtc(crtc);
-	int end = (start + size > 256) ? 256 : start + size, i;
+	int i;
 
 	/* userspace palettes are always correct as is */
-	for (i = start; i < end; i++) {
+	for (i = 0; i < size; i++) {
 		amdgpu_crtc->lut_r[i] = red[i] >> 6;
 		amdgpu_crtc->lut_g[i] = green[i] >> 6;
 		amdgpu_crtc->lut_b[i] = blue[i] >> 6;
 	}
 	dce_v11_0_crtc_load_lut(crtc);
+
+	return 0;
 }
 
 static void dce_v11_0_crtc_destroy(struct drm_crtc *crtc)
@@ -3432,7 +3434,7 @@ static int dce_v11_0_pageflip_irq(struct
 
 	spin_unlock_irqrestore(&adev->ddev->event_lock, flags);
 
-	drm_vblank_put(adev->ddev, amdgpu_crtc->crtc_id);
+	drm_crtc_vblank_put(&amdgpu_crtc->base);
 	schedule_work(&works->unpin_work);
 
 	return 0;
Only in amdgpu-pro-16.40-348864/amd/amdgpu: dce_v11_0.c.orig
diff -urp amdgpu-pro-16.40-348864.orig/amd/amdgpu/dce_v8_0.c amdgpu-pro-16.40-348864/amd/amdgpu/dce_v8_0.c
--- amdgpu-pro-16.40-348864.orig/amd/amdgpu/dce_v8_0.c	2016-10-24 18:01:17.000000000 -0700
+++ amdgpu-pro-16.40-348864/amd/amdgpu/dce_v8_0.c	2017-02-18 23:50:55.858608367 -0800
@@ -2521,19 +2521,21 @@ static void dce_v8_0_cursor_reset(struct
 	}
 }
 
-static void dce_v8_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
-				    u16 *blue, uint32_t start, uint32_t size)
+static int dce_v8_0_crtc_gamma_set(struct drm_crtc *crtc, u16 *red, u16 *green,
+				    u16 *blue, uint32_t size)
 {
 	struct amdgpu_crtc *amdgpu_crtc = to_amdgpu_crtc(crtc);
-	int end = (start + size > 256) ? 256 : start + size, i;
+	int i;
 
 	/* userspace palettes are always correct as is */
-	for (i = start; i < end; i++) {
+	for (i = 0; i < size; i++) {
 		amdgpu_crtc->lut_r[i] = red[i] >> 6;
 		amdgpu_crtc->lut_g[i] = green[i] >> 6;
 		amdgpu_crtc->lut_b[i] = blue[i] >> 6;
 	}
 	dce_v8_0_crtc_load_lut(crtc);
+
+	return 0;
 }
 
 static void dce_v8_0_crtc_destroy(struct drm_crtc *crtc)
@@ -3323,7 +3325,7 @@ static int dce_v8_0_pageflip_irq(struct
 
 	spin_unlock_irqrestore(&adev->ddev->event_lock, flags);
 
-	drm_vblank_put(adev->ddev, amdgpu_crtc->crtc_id);
+	drm_crtc_vblank_put(&amdgpu_crtc->base);
 	schedule_work(&works->unpin_work);
 
 	return 0;
Only in amdgpu-pro-16.40-348864/amd/amdgpu: dce_v8_0.c.orig
diff -urp amdgpu-pro-16.40-348864.orig/amd/backport/include/kcl/kcl_mm.h amdgpu-pro-16.40-348864/amd/backport/include/kcl/kcl_mm.h
--- amdgpu-pro-16.40-348864.orig/amd/backport/include/kcl/kcl_mm.h	2016-10-24 18:01:17.000000000 -0700
+++ amdgpu-pro-16.40-348864/amd/backport/include/kcl/kcl_mm.h	2017-02-18 23:51:13.345288917 -0800
@@ -8,7 +8,15 @@ static inline int kcl_get_user_pages(str
                                      int write, int force, struct page **pages,
                                      struct vm_area_struct **vmas)
 {
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 6, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 9, 0)
+	unsigned int gup_flags = 0;
+	if (write)
+		gup_flags |= FOLL_WRITE;
+	if (force)
+		gup_flags |= FOLL_FORCE;
+
+        return get_user_pages(start, nr_pages, gup_flags, pages, vmas);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(4, 6, 0)
         return get_user_pages(start, nr_pages, write, force, pages, vmas);
 #else
         return get_user_pages(tsk, mm, start, nr_pages,
diff -urp amdgpu-pro-16.40-348864.orig/amd/backport/include/kcl/kcl_ttm.h amdgpu-pro-16.40-348864/amd/backport/include/kcl/kcl_ttm.h
--- amdgpu-pro-16.40-348864.orig/amd/backport/include/kcl/kcl_ttm.h	2016-10-24 18:01:17.000000000 -0700
+++ amdgpu-pro-16.40-348864/amd/backport/include/kcl/kcl_ttm.h	2017-02-18 23:51:13.345288917 -0800
@@ -105,11 +105,7 @@ static inline int kcl_ttm_bo_reserve(str
 				 bool interruptible, bool no_wait,
 				 struct ww_acquire_ctx *ticket)
 {
-#if defined(BUILD_AS_DKMS)
-	return ttm_bo_reserve(bo, interruptible, no_wait, false, ticket);
-#else
 	return ttm_bo_reserve(bo, interruptible, no_wait, ticket);
-#endif
 }
 
 static inline void kcl_ttm_bo_move_to_lru_tail(struct ttm_buffer_object *bo)
Only in amdgpu-pro-16.40-348864/amd/backport/include/kcl: kcl_ttm.h.orig
Only in amdgpu-pro-16.40-348864/amd/backport/include/kcl: kcl_ttm.h.rej
diff -urp amdgpu-pro-16.40-348864.orig/amd/backport/kcl_drm.c amdgpu-pro-16.40-348864/amd/backport/kcl_drm.c
--- amdgpu-pro-16.40-348864.orig/amd/backport/kcl_drm.c	2016-10-24 18:01:17.000000000 -0700
+++ amdgpu-pro-16.40-348864/amd/backport/kcl_drm.c	2017-02-18 23:51:13.345288917 -0800
@@ -168,7 +168,7 @@ static inline struct drm_plane_state *
 drm_atomic_get_existing_plane_state(struct drm_atomic_state *state,
                     struct drm_plane *plane)
 {
-    return state->plane_states[drm_plane_index(plane)];
+    return state->planes[drm_plane_index(plane)].state;
 }
 
 void
Only in amdgpu-pro-16.40-348864/amd/backport: kcl_drm.c.orig
Only in amdgpu-pro-16.40-348864/amd/backport: kcl_drm.c.rej
diff -urp amdgpu-pro-16.40-348864.orig/amd/dal/amdgpu_dm/amdgpu_dm.c amdgpu-pro-16.40-348864/amd/dal/amdgpu_dm/amdgpu_dm.c
--- amdgpu-pro-16.40-348864.orig/amd/dal/amdgpu_dm/amdgpu_dm.c	2016-10-24 18:01:17.000000000 -0700
+++ amdgpu-pro-16.40-348864/amd/dal/amdgpu_dm/amdgpu_dm.c	2017-02-18 23:51:26.177788327 -0800
@@ -196,9 +196,8 @@ static void dm_pflip_high_irq(void *inte
 
 	/* wakeup usersapce */
 	if(works->event)
-		drm_send_vblank_event(
-			adev->ddev,
-			amdgpu_crtc->crtc_id,
+		drm_crtc_send_vblank_event(
+			&amdgpu_crtc->base,
 			works->event);
 
 	spin_unlock_irqrestore(&adev->ddev->event_lock, flags);
Only in amdgpu-pro-16.40-348864/amd/dal/amdgpu_dm: amdgpu_dm.c.orig
diff -urp amdgpu-pro-16.40-348864.orig/amd/dal/amdgpu_dm/amdgpu_dm_types.c amdgpu-pro-16.40-348864/amd/dal/amdgpu_dm/amdgpu_dm_types.c
--- amdgpu-pro-16.40-348864.orig/amd/dal/amdgpu_dm/amdgpu_dm_types.c	2016-10-24 18:01:17.000000000 -0700
+++ amdgpu-pro-16.40-348864/amd/dal/amdgpu_dm/amdgpu_dm_types.c	2017-02-18 23:51:26.178788366 -0800
@@ -991,12 +991,11 @@ void amdgpu_dm_crtc_destroy(struct drm_c
 	kfree(crtc);
 }
 
-static void amdgpu_dm_atomic_crtc_gamma_set(
+static int amdgpu_dm_atomic_crtc_gamma_set(
 		struct drm_crtc *crtc,
 		u16 *red,
 		u16 *green,
 		u16 *blue,
-		uint32_t start,
 		uint32_t size)
 {
 	struct drm_device *dev = crtc->dev;
@@ -1005,6 +1004,8 @@ static void amdgpu_dm_atomic_crtc_gamma_
 	crtc->state->mode.private_flags |= AMDGPU_CRTC_MODE_PRIVATE_FLAGS_GAMMASET;
 
 	drm_atomic_helper_crtc_set_property(crtc, prop, 0);
+
+	return 0;
 }
 
 static int dm_crtc_funcs_atomic_set_property(
@@ -1503,6 +1504,10 @@ static int dm_plane_helper_prepare_fb(
 	struct drm_plane *plane,
 	struct drm_framebuffer *fb,
 	const struct drm_plane_state *new_state)
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(4, 9, 0)
+static int dm_plane_helper_prepare_fb(
+	struct drm_plane *plane,
+	struct drm_plane_state *new_state)
 #else
 static int dm_plane_helper_prepare_fb(
 	struct drm_plane *plane,
@@ -1544,6 +1549,10 @@ static void dm_plane_helper_cleanup_fb(
 	struct drm_plane *plane,
 	struct drm_framebuffer *fb,
 	const struct drm_plane_state *old_state)
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(4, 9, 0)
+static void dm_plane_helper_cleanup_fb(
+	struct drm_plane *plane,
+	struct drm_plane_state *old_state)
 #else
 static void dm_plane_helper_cleanup_fb(
 	struct drm_plane *plane,
@@ -2311,7 +2320,7 @@ int amdgpu_dm_atomic_commit(
 	 * the software side now.
 	 */
 
-	drm_atomic_helper_swap_state(dev, state);
+	drm_atomic_helper_swap_state(state, true);
 
 	/*
 	 * From this point state become old state really. New state is
Only in amdgpu-pro-16.40-348864/amd/dal/amdgpu_dm: amdgpu_dm_types.c.orig
