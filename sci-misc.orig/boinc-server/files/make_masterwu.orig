#!/bin/bash
WORK_UNIT_NAME="$1"
WORK_UNIT_FILE="$2"
APP_NAME="$3"
WORK_UNIT_TEMPLATE="$4"
RESULT_TEMPLATE="$5"
SIZE_CLASS="$6"

if [[ "$1" == "--help" || "$#" == "0" ]]; then
	echo "make_masterwu WORK_UNIT_NAME WORK_UNIT_FILE APP_NAME WORK_UNIT_TEMPLATE RESULT_TEMPLATE SIZE_CLASS"
	echo ""
	echo "WORK_UNIT_NAME        is the name of the workunit"
	echo "WORK_UNIT_FILE        is the path to the workunit file"
	echo "APP_NAME              is the app name"
	echo "WORK_UNIT_TEMPLATE    is the path to the work unit input template"
	echo "RESULT_TEMPLATE       is the path to the work unit result template"
	echo "SIZE_CLASS            is the difficulty of the workunit.  0 for low end devices (e.g. Mobile CPUs).  N to high end devices (e.g. GPUs or supercomputer), where N is a integer."
	echo ""
	echo "Example:"
	echo "./make_masterwu wu_nosimd_noocl wu_nosimd_noocl bfgminer templates/workunit_template_nosimd_noocl.xml templates/results_template_nosimd_noocl.xml 0"
	echo "./make_masterwu wu_sse2 wu_sse2 bfgminer templates/workunit_template_sse2.xml templates/results_template_sse2.xml 1"
	echo "./make_masterwu wu_opencl_ati5_cat132 wu_opencl_ati5_cat132 bfgminer templates/workunit_template_opencl_ati5_cat132.xml templates/results_template_opencl_ati5_cat132.xml 2"
	exit
fi

if [[ ${#SIZE_CLASS} == "0"  ]]; then
	SIZE_CLASS="0"
fi

WORK_UNIT_FILE_BN="$(basename ${WORK_UNIT_FILE})"
cp ${WORK_UNIT_FILE} `bin/dir_hier_path ${WORK_UNIT_FILE_BN}`
bin/create_work  --appname "${APP_NAME}" --wu_name "${WORK_UNIT_NAME}" --wu_template "${WORK_UNIT_TEMPLATE}" --result_template "${RESULT_TEMPLATE}" --size_class "${SIZE_CLASS}" "${WORK_UNIT_FILE_BN}"

xml sel -t -v "/boinc/config/job_size_matching" config.xml &>/dev/null
if [[ "$?" != "0" ]]; then
  xml ed -L -s "/boinc/config" -t elem -name "job_size_matching" -v "1" config.xml
else
  xml ed -L -u "/boinc/config/job_size_matching" -v "1" config.xml
fi

xml sel -t -v "//*[text()='size_regulator --app_name ${APP_NAME} --lo 10 --hi 30 --sleep_time 10']" config.xml &>/dev/null
if [[ "$?" != "0" ]]; then
  IDX=$(xml sel -t -v "/boinc/daemons/daemon/cmd[text()]" config.xml | grep "size_regulator" | wc -l)
  xml ed -s "/boinc/daemons" -t elem -n "daemon" -v "" config.xml \
    | xml ed -s "/boinc/daemons/daemon[last()]" -t elem -n "cmd" -v "size_regulator --app_name ${APP_NAME} --lo 10 --hi 30 --sleep_time 10" \
    | xml ed -s "/boinc/daemons/daemon[last()]" -t elem -name output -v "size_regulator_uppercase.out" \
    | xml ed -s "/boinc/daemons/daemon[last()]" -t elem -name pid_file -v "size_regulator_uppercase.pid" \
    | xml ed -s "/boinc/daemons/daemon[last()]" -t elem -name disabled -v "0" > config.xml.tmp
  cp config.xml.tmp config.xml
  rm config.xml.tmp
fi

xml sel -t -v "//*[contains(text(),'run_in_ops ./size_census.php')]" config.xml &>/dev/null
if [[ "$?" != "0" ]]; then
  xml ed -s "/boinc/tasks" -t elem -name "task" config.xml \
    | xml ed -s "/boinc/tasks/task[last()]" -t elem -n cmd  -v "run_in_ops ./size_census.php" \
    | xml ed -s "/boinc/tasks/task[last()]" -t elem -n output -v "size_census.out" \
    | xml ed -s "/boinc/tasks/task[last()]" -t elem -n period -v "24 hours" > config.xml.tmp
  cp config.xml.tmp config.xml
  rm config.xml.tmp
fi

echo "Use the trivial validator? (y/n)"
read USE_VALIDATOR
if [[ "${USE_VALIDATOR}" == "y" ]]; then
  xml sel -t -v "//*[text()='sample_trivial_validator --app ${APP_NAME} --sleep-interval 60']" config.xml &>/dev/null
  if [[ "$?" != "0" ]]; then
    IDX=$(xml sel -t -v "/boinc/daemons/daemon/cmd[text()]" config.xml | grep "sample_trivial_validator" | wc -l)
    xml ed -s "/boinc/daemons" -t elem -name daemon config.xml | xml ed -s "/boinc/daemons/daemon[last()]" -t elem -name "cmd" -v "sample_trivial_validator --app "${APP_NAME}" --sleep-interval 60" \
    | xml ed -s "/boinc/daemons/daemon[last()]" -t elem -name "output" -v "sample_trivial_validator_${IDX}.out" | xml ed -s "/boinc/daemons/daemon[last()]" -t elem -n "pid_file" -v "sample_trivial_validator_${IDX}.pid" \
    > config.xml.tmp
    cp config.xml.tmp config.xml
    rm config.xml.tmp
  fi
  exit
fi

echo "Use the substring validator? (y/n)"
read USE_VALIDATOR
if [[ "${USE_VALIDATOR}" == "y" ]]; then
  xml sel -t -v "//*[text()='sample_substr_validator --app ${APP_NAME} --sleep-interval 60']" config.xml &>/dev/null
  if [[ "$?" != "0" ]]; then
    IDX=$(xml sel -t -v "/boinc/daemons/daemon/cmd[text()]" config.xml | grep "sample_substr_validator" | wc -l)
    xml ed -s "/boinc/daemons" -t elem -name daemon config.xml | xml ed -s "/boinc/daemons/daemon[last()]" -t elem -name "cmd" -v "sample_substr_validator --app "${APP_NAME}" --sleep-interval 60" \
    | xml ed -s "/boinc/daemons/daemon[last()]" -t elem -name "output" -v "sample_substr_validator_${IDX}.out" | xml ed -s "/boinc/daemons/daemon[last()]" -t elem -n "pid_file" -v "sample_substr_validator_${IDX}.pid" \
    > config.xml.tmp
    cp config.xml.tmp config.xml
    rm config.xml.tmp
  fi
  exit
fi

echo "Use the bitwise validator? (y/n)"
read USE_VALIDATOR
if [[ "${USE_VALIDATOR}" == "y" ]]; then
  xml sel -t -v "//*[text()='sample_bitwise_validator --app ${APP_NAME} --sleep-interval 60']" config.xml &>/dev/null
  if [[ "$?" != "0" ]]; then
    IDX=$(xml sel -t -v "/boinc/daemons/daemon/cmd[text()]" config.xml | grep "sample_bitwise_validator" | wc -l)
    xml ed -s "/boinc/daemons" -t elem -name daemon config.xml | xml ed -s "/boinc/daemons/daemon[last()]" -t elem -name "cmd" -v "sample_bitwise_validator --app "${APP_NAME}" --sleep-interval 60" \
    | xml ed -s "/boinc/daemons/daemon[last()]" -t elem -name "output" -v "sample_bitwise_validator_${IDX}.out" | xml ed -s "/boinc/daemons/daemon[last()]" -t elem -n "pid_file" -v "sample_bitwise_validator_${IDX}.pid" \
    > config.xml.tmp
    cp config.xml.tmp config.xml
    rm config.xml.tmp
  fi
  exit
fi
