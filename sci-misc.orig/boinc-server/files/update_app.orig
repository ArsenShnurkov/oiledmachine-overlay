#!/bin/bash
APP_SOURCE_EXE="$1"
APP_NAME="$2"
APP_FRIENDLY_NAME="$3"
APP_VERSION="$4"
APP_PLATFORM="$5"
BOINC_API_VERSION="$6"
APP_PLAN_CLASS="$7"
APP_MAX_SIZE_CLASS="$8"

#diablo130302.cl  diakgcn121016.cl  phatk121016.cl  poclbm130302.cl  scrypt130511.cl

if [[ "$1" == "--help" || "$#" == "0" ]]; then
	echo "update_app APP_SOURCE_EXE APP_NAME APP_FRIENDLYNAME APP_VERSION APP_PLATFORM BOINC_API_VERSION APP_PLAN_CLASS APP_MAX_SIZE_CLASS ..."
	echo ""
	echo "APP_SOURCE_EXE     is the path to the executible"
	echo "APP_NAME           is the name of the app"
	echo "APP_FRIENDLY_NAME  is the friendly name of the app"
	echo "APP_VERSION        is the app version"
	echo "APP_PLATFORM       is the target chost platform"
	echo "BOINC_API_VERSION  is the boinc api version used"
	echo "APP_PLAN_CLASS     is the plan class"
	echo "APP_MAX_SIZE_CLASS is the maximum number of size classes"
	echo "...                are additional files"
	echo ""
	echo "Examples:"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 \"\" 1"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 cuda22 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 cuda23 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 cuda32 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 cuda42 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 cuda50 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 sse 2"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 sse2 2"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 sse3 2"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 ssse3 2"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 avx 2"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 sse41 2"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 opencl_ati5_cat132 3 diablo130302.cl  diakgcn121016.cl  phatk121016.cl  poclbm130302.cl  scrypt130511.cl"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 opencl_ati5_nocal 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 opencl_ati5_sah 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 opencl_ati_cat132 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 opencl_ati_nocal 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 opencl_ati_sah 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 opencl_nvidia_sah 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 opencl_intel_gpu_sah 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 opencl_ati5_mac 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 opencl_ati_mac 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 opencl_intel_gpu_mac 3"
	echo "./update_app bfgminer bfgminer \"bfgminer (boinc edition)\" 3.10.5 x86_64-pc-linux-gnu 7.4.42 opencl_nvidia_mac 3"
	exit
fi

shift
shift
shift
shift
shift
shift
shift
shift

if [[ "${#APP_PLAN_CLASS}" == "0" ]]; then
	FILE_NAME="${APP_NAME}_${APP_VERSION}_${APP_PLATFORM}"
	APPLICATION_VERSION="${APP_PLATFORM}"
else
	FILE_NAME="${APP_NAME}_${APP_VERSION}_${APP_PLATFORM}__${APP_PLAN_CLASS}"
	APPLICATION_VERSION="${APP_PLATFORM}__${APP_PLAN_CLASS}"
fi

xml sel -t -v "/boinc/app/name[text()='${APP_NAME}']"  project.xml &>/dev/null
if [[ "$?" == "0" ]]; then
	xml ed -u "/boinc/app/name[text()='${APP_NAME}']/../user_friendly_name" -v "${APP_FRIENDLY_NAME}" project.xml > /tmp/project.xml.out
	cp /tmp/project.xml.out project.xml
elif [[ "$?" != "0"  ]]; then
	xml ed -s "/boinc" -t elem -n "app" project.xml | xml ed -s "/boinc/app[last()]" -t elem -n "name" -v "${APP_NAME}" | xml ed -s "/boinc/app[last()]" -t elem -n "user_friendly_name" -v "${APP_FRIENDLY_NAME}" > /tmp/project.xml.out
	cp /tmp/project.xml.out project.xml
fi

rm "download/${FILE_NAME}"
python2 bin/xadd
mkdir -p "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}"
chown boincadm:boinc "apps/${APP_NAME}"
chown boincadm:boinc "apps/${APP_NAME}/${APP_VERSION}"
chown boincadm:boinc "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}"
cp "${APP_SOURCE_EXE}" "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/${FILE_NAME}"
#cp "templates/version.xml" "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/version.xml"

cp templates/version.xml /tmp
while [[ "${#1}" != "0" ]]
do
  OTHER_FILE="$1"
  OTHER_FILE_BN="$(basename $1)"
  echo "$1"
  xml ed -s "/version" -t elem -name "file" /tmp/version.xml | xml ed -s "/version/file[last()]" -t elem -name "physical_name" -v "${OTHER_FILE_BN}" | xml ed -s "/version/file[last()]" -t elem -n "logical_name" -v "${OTHER_FILE_BN}" \
    | xml ed -s "/version/file[last()]" -t elem -n "copy_file" > /tmp/version.xml.tmp
  cp /tmp/version.xml.tmp /tmp/version.xml
  cp "${OTHER_FILE}" "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/${OTHER_FILE_BN}"
  ./bin/crypt_prog -sign "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/${OTHER_FILE_BN}" keys/code_sign_private > "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/${OTHER_FILE_BN}.sig"
  chown boincadm:apache "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/${OTHER_FILE_BN}.sig"
  chown boincadm:apache "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/${OTHER_FILE_BN}"
  shift
done
cp /tmp/version.xml "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/version.xml"

A="app_name" B="${FILE_NAME}" perl -p -i -e 's|\Q$ENV{'A'}\E|$ENV{'B'}|g' "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/version.xml"
A="boinc_api_version" B="${BOINC_API_VERSION}" perl -p -i -e 's|\Q$ENV{'A'}\E|$ENV{'B'}|g' "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/version.xml"
chown boincadm:apache "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/${FILE_NAME}"
./bin/crypt_prog -sign "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/${FILE_NAME}" keys/code_sign_private > "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/${FILE_NAME}.sig"
chown boincadm:apache "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/${FILE_NAME}.sig"
chown boincadm:apache "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/version.xml"
./bin/update_versions
#cp "apps/${APP_NAME}/${APP_VERSION}/${APPLICATION_VERSION}/${FILE_NAME}" download #this step is not required

DBUSER=$(xml sel -t -v "/boinc/config/db_user" config.xml)
DBPASS=$(xml sel -t -v "/boinc/config/db_passwd" config.xml)
DBNAME=$(xml sel -t -v "/boinc/config/db_name" config.xml)
mysql -B -N --user="${DBUSER}" --password="${DBPASS}" -e "USE ${DBNAME}; UPDATE app SET n_size_classes='${APP_MAX_SIZE_CLASS}' WHERE name='${APP_NAME}';"
unset DBUSER
unset DBPASS

rm size_census_${APP_NAME}
for I in $(seq 1 ${APP_MAX_SIZE_CLASS})
do
        echo "0.000000e+0" >> size_census_${APP_NAME}
done
chown boincadm:boinc size_census_${APP_NAME}
