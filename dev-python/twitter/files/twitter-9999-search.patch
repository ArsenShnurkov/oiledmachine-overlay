From 5b85ff6c927d4ffedeae9839869def2dda025f41 Mon Sep 17 00:00:00 2001
From: Jon Staples <jstaples@nextgxdx.com>
Date: Sat, 23 Jul 2016 21:26:02 +0000
Subject: [PATCH] chore(cmdline): Hotfix

I've added a hard coded hack to bypass the invalid assignment of the
uriparts for the search API in "TwitterCall".  Clearly this is not ideal
and may have detrimental effects elsewhere.  I've also added a
JsonSearchFormatter to drop the tweet results to stdout as a newline
delimited stream of json, which despite the CLI documentation, does not
appear to be implemented anywhere.  Not that redesigning the CLI is a
trivial thing, but I'd strongly consider simplifying the interface by
adopting something like python click.
---
 twitter/api.py     | 11 ++++++++++-
 twitter/cmdline.py | 22 +++++++++++++---------
 2 files changed, 23 insertions(+), 10 deletions(-)

diff --git a/twitter/api.py b/twitter/api.py
index 4097c3e..19209a2 100644
--- a/twitter/api.py
+++ b/twitter/api.py
@@ -209,6 +209,16 @@ def extend_call(arg):
 
     def __call__(self, **kwargs):
         kwargs = dict(kwargs)
+        # Hard coded hack, 'search' is added somewhere before this, in between
+        # SearchAction and TwitterCall.  Perhaps in the mysterios 'search'
+        # method that does not seem to be defined anywhere, but is instead
+        # (I'm betting), dynamically generated.  It seems so neat when you
+        # realize you can dynamically generate methods, until you have to debug
+        # those methods that are generated somewhere...
+
+        if self.uriparts == ("1.1", "search"):
+            self.uriparts = ("1.1", "search", "tweets")
+
         uri = build_uri(self.uriparts, kwargs)
         method = kwargs.pop('_method', None) or method_for_uri(uri)
         domain = self.domain
@@ -230,7 +240,6 @@ def __call__(self, **kwargs):
             dot = "."
         url_base = "http%s://%s/%s%s%s" % (
             secure_str, domain, uri, dot, self.format)
-
         # Check if argument tells whether img is already base64 encoded
         b64_convert = not kwargs.pop("_base64", False)
         if b64_convert:
diff --git a/twitter/cmdline.py b/twitter/cmdline.py
index 545e8fd..7f7abbc 100755
--- a/twitter/cmdline.py
+++ b/twitter/cmdline.py
@@ -64,6 +64,7 @@
 """
 
 from __future__ import print_function
+import json
 
 try:
     input = __builtins__.raw_input
@@ -313,8 +314,12 @@ def __call__(self, action, user):
 class SearchFormatter(object):
     def __call__(self, result, options):
         return("%s%s %s" % (
-            get_time_string(result, options, "%a, %d %b %Y %H:%M:%S +0000"),
-            result['from_user'], result['text']))
+            get_time_string(result, options, "%a %b %d %H:%M:%S +0000 %Y"),
+            result['user'], result['text']))
+
+class JsonSearchFormatter(object):
+    def __call__(self, result, options):
+        return json.dumps(result)
 
 
 class VerboseSearchFormatter(SearchFormatter):
@@ -375,7 +380,8 @@ def get_term_encoding():
     'default': SearchFormatter,
     'verbose': VerboseSearchFormatter,
     'urls': URLSearchFormatter,
-    'ansi': AnsiSearchFormatter
+    'ansi': AnsiSearchFormatter,
+    'json': JsonSearchFormatter
 }
 formatters['search'] = search_formatters
 
@@ -468,17 +474,16 @@ def __call__(self, twitter, options):
 
 class SearchAction(Action):
     def __call__(self, twitter, options):
-        # We need to be pointing at search.twitter.com to work, and it is less
-        # tangly to do it here than in the main()
-        twitter.domain = "search.twitter.com"
-        twitter.uriparts = ()
         # We need to bypass the TwitterCall parameter encoding, so we
         # don't encode the plus sign, so we have to encode it ourselves
+
         query_string = "+".join(
             [quote(term)
              for term in options['extra_args']])
 
-        results = twitter.search(q=query_string)['results']
+        # There is absolutely no 'search' param here.  Only 1.1
+        results = twitter.search(q=query_string).values()[1]
+
         f = get_formatter('search', options)
         for result in results:
             resultStr = f(result, options)
@@ -773,7 +778,6 @@ def main(args=sys.argv[1:]):
         secure=options['secure'],
         api_version='1.1',
         domain='api.twitter.com')
-
     try:
         Action()(twitter, options)
     except NoSuchActionError as e:

