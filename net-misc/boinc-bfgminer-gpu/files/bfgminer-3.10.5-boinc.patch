Only in bfgminer-3.10.5: autom4te.cache
Binary files bfgminer-3.10.5.orig/bfgminer and bfgminer-3.10.5/bfgminer differ
Binary files bfgminer-3.10.5.orig/bfgminer-api.o and bfgminer-3.10.5/bfgminer-api.o differ
Only in bfgminer-3.10.5: bfgminer-boinc_wrapper.o
Binary files bfgminer-3.10.5.orig/bfgminer-deviceapi.o and bfgminer-3.10.5/bfgminer-deviceapi.o differ
Binary files bfgminer-3.10.5.orig/bfgminer-driver-cpu.o and bfgminer-3.10.5/bfgminer-driver-cpu.o differ
Binary files bfgminer-3.10.5.orig/bfgminer-driver-opencl.o and bfgminer-3.10.5/bfgminer-driver-opencl.o differ
Binary files bfgminer-3.10.5.orig/bfgminer-logging.o and bfgminer-3.10.5/bfgminer-logging.o differ
Binary files bfgminer-3.10.5.orig/bfgminer-miner.o and bfgminer-3.10.5/bfgminer-miner.o differ
Binary files bfgminer-3.10.5.orig/bfgminer-scrypt.o and bfgminer-3.10.5/bfgminer-scrypt.o differ
Binary files bfgminer-3.10.5.orig/bfgminer-util.o and bfgminer-3.10.5/bfgminer-util.o differ
Only in bfgminer-3.10.5: boinc_finish_called
Only in bfgminer-3.10.5: boinc_wrapper.cpp
Only in bfgminer-3.10.5: boinc_wrapper.h
Binary files bfgminer-3.10.5.orig/ccan/libccan.a and bfgminer-3.10.5/ccan/libccan.a differ
diff -ur -x configure -x config.status -x config.log -x aclocal.m4 -x Makefile -x Makefile.in bfgminer-3.10.5.orig/ccan/opt/helpers.c bfgminer-3.10.5/ccan/opt/helpers.c
--- bfgminer-3.10.5.orig/ccan/opt/helpers.c	2015-12-25 17:26:57.548610480 -0800
+++ bfgminer-3.10.5/ccan/opt/helpers.c	2015-12-31 11:23:55.956374887 -0800
@@ -15,6 +15,10 @@
 #include <stdio.h>
 #include "private.h"
 
+#ifdef USE_BOINC
+#include "boinc_wrapper.h"
+#endif
+
 /* Upper bound to sprintf this simple type?  Each 3 bits < 1 digit. */
 #define CHAR_SIZE(type) (((sizeof(type)*CHAR_BIT + 2) / 3) + 1)
 
@@ -144,14 +148,22 @@
 {
 	printf("%s\n", version);
 	fflush(stdout);
+#ifdef USE_BOINC
+	bw_boinc_finish(0);
+#else
 	exit(0);
+#endif
 }
 
 char *opt_usage_and_exit(const char *extra)
 {
 	printf("%s", opt_usage(opt_argv0, extra));
 	fflush(stdout);
+#ifdef USE_BOINC
+	bw_boinc_finish(0);
+#else
 	exit(0);
+#endif
 }
 
 void opt_show_bool(char buf[OPT_SHOW_LEN], const bool *b)
diff -ur -x configure -x config.status -x config.log -x aclocal.m4 -x Makefile -x Makefile.in bfgminer-3.10.5.orig/ccan/opt/opt.c bfgminer-3.10.5/ccan/opt/opt.c
--- bfgminer-3.10.5.orig/ccan/opt/opt.c	2015-12-25 17:26:57.547610443 -0800
+++ bfgminer-3.10.5/ccan/opt/opt.c	2015-12-31 12:02:26.786599011 -0800
@@ -15,6 +15,10 @@
 #include <stdlib.h>
 #include <stdio.h>
 
+#ifdef USE_BOINC
+#include "boinc_wrapper.h"
+#endif
+
 #ifndef WIN32
 	#include <err.h>
 #else
@@ -22,6 +26,7 @@
 	#define errx(status, fmt, ...) { \
 			fprintf(stderr, fmt, __VA_ARGS__); \
 			fprintf(stderr, "\n"); \
+			boinc_quit_status(status, fmt, __VA_ARGS__); \
 			exit(status); }
 #endif
 
@@ -255,7 +260,11 @@
 	vfprintf(stderr, fmt, ap);
 	fprintf(stderr, "\n");
 	va_end(ap);
+#ifdef USE_BOINC
+	bw_boinc_finish(1);
+#else
 	exit(1);
+#endif
 }
 
 char *opt_invalid_argument(const char *arg)
diff -ur -x configure -x config.status -x config.log -x aclocal.m4 -x Makefile -x Makefile.in bfgminer-3.10.5.orig/configure.ac bfgminer-3.10.5/configure.ac
--- bfgminer-3.10.5.orig/configure.ac	2015-12-25 17:26:57.541610219 -0800
+++ bfgminer-3.10.5/configure.ac	2015-12-25 17:31:56.364760253 -0800
@@ -70,6 +70,7 @@
 AM_PROG_CC_C_O
 AC_PROG_RANLIB
 AC_PROG_CPP
+AC_PROG_CXX
 
 gl_INIT
 
Only in bfgminer-3.10.5: done
diff -ur -x configure -x config.status -x config.log -x aclocal.m4 -x Makefile -x Makefile.in bfgminer-3.10.5.orig/driver-cpu.c bfgminer-3.10.5/driver-cpu.c
--- bfgminer-3.10.5.orig/driver-cpu.c	2015-12-25 17:26:57.541610219 -0800
+++ bfgminer-3.10.5/driver-cpu.c	2016-01-01 21:06:34.243724877 -0800
@@ -286,14 +286,22 @@
 		int flags = fcntl(fd, F_GETFL, 0);
 		if (flags<0) {
 			perror("fcntl(GET) failed");
+#ifdef USE_BOINC
+			bw_boinc_finish(1);
+#else
 			exit(1);
+#endif
 		}
 		flags = yes ? (flags|O_NONBLOCK) : (flags&~O_NONBLOCK);
 
 		int r = fcntl(fd, F_SETFL, flags);
 		if (r<0) {
 			perror("fcntl(SET) failed");
+#ifdef USE_BOINC
+			bw_boinc_finish(1);
+#else
 			exit(1);
+#endif
 		}
 	}
 
@@ -317,7 +325,11 @@
 		int r = pipe(pfd);
 		if (r<0) {
 			perror("pipe - failed to create pipe for --algo auto");
+#ifdef USE_BOINC
+			bw_boinc_finish(1);
+#else
 			exit(1);
+#endif
 		}
 
 		// Make pipe non blocking
@@ -329,14 +341,22 @@
 		sighandler_t sr1 = signal(SIGPIPE, SIG_IGN);
 		if (SIG_ERR==sr0 || SIG_ERR==sr1) {
 			perror("signal - failed to edit signal mask for --algo auto");
+#ifdef USE_BOINC
+			bw_boinc_finish(1);
+#else
 			exit(1);
+#endif
 		}
 
 		// Fork a child to do the actual benchmarking
 		pid_t child_pid = fork();
 		if (child_pid<0) {
 			perror("fork - failed to create a child process for --algo auto");
+#ifdef USE_BOINC
+			bw_boinc_finish(1);
+#else
 			exit(1);
+#endif
 		}
 
 		// Do the dangerous work in the child, knowing we might crash
@@ -390,7 +410,11 @@
 
 			} else if (r<0) {
 				perror("bench_algo: waitpid failed. giving up.");
+#ifdef USE_BOINC
+				bw_boinc_finish(1);
+#else
 				exit(1);
+#endif
 			}
 
 			// Give up on child after a ~60s
@@ -409,12 +433,20 @@
 		r = close(pfd[0]);
 		if (r<0) {
 			perror("close - failed to close read end of pipe for --algo auto");
+#ifdef USE_BOINC
+			bw_boinc_finish(1);
+#else
 			exit(1);
+#endif
 		}
 		r = close(pfd[1]);
 		if (r<0) {
 			perror("close - failed to close read end of pipe for --algo auto");
+#ifdef USE_BOINC
+			bw_boinc_finish(1);
+#else
 			exit(1);
+#endif
 		}
 
 	#elif defined(WIN32)
@@ -423,7 +455,11 @@
 		HINSTANCE module = GetModuleHandle(0);
 		if (!module) {
 			applog(LOG_ERR, "failed to retrieve module handle");
+#ifdef USE_BOINC
+			bw_boinc_finish(1);
+#else
 			exit(1);
+#endif
 		}
 
 		// Create a unique name
@@ -446,7 +482,11 @@
 		);
 		if (NULL==map_handle) {
 			applog(LOG_ERR, "could not create shared memory");
+#ifdef USE_BOINC
+			bw_boinc_finish(1);
+#else
 			exit(1);
+#endif
 		}
 
 		void *shared_mem = MapViewOfFile(
@@ -458,7 +498,11 @@
 		);
 		if (NULL==shared_mem) {
 			applog(LOG_ERR, "could not map shared memory");
+#ifdef USE_BOINC
+			bw_boinc_finish(1);
+#else
 			exit(1);
+#endif
 		}
 		SetEnvironmentVariable("BFGMINER_SHARED_MEM", unique_name);
 		CopyMemory(shared_mem, &rate, sizeof(rate));
@@ -469,7 +513,11 @@
 		DWORD size = GetModuleFileName(module, cmd_line, n);
 		if (0==size) {
 			applog(LOG_ERR, "failed to retrieve module path");
+#ifdef USE_BOINC
+			bw_boinc_finish(1);
+#else
 			exit(1);
+#endif
 		}
 
 		// Construct new command line based on that
@@ -498,7 +546,11 @@
 		);
 		if (!ok) {
 			applog(LOG_ERR, "CreateProcess failed with error %ld\n", (long)GetLastError() );
+#ifdef USE_BOINC
+			bw_boinc_finish(1);
+#else
 			exit(1);
+#endif
 		}
 
 		// Debug the child (only clean way to catch exceptions)
@@ -617,7 +669,11 @@
 	name_spaces_pad = (char*) malloc(max_name_len+16);
 	if (0==name_spaces_pad) {
 		perror("malloc failed");
+#ifdef USE_BOINC
+		bw_boinc_finish(1);
+#else
 		exit(1);
+#endif
 	}
 }
 
Binary files bfgminer-3.10.5.orig/lib/libgnu.a and bfgminer-3.10.5/lib/libgnu.a differ
diff -ur -x configure -x config.status -x config.log -x aclocal.m4 -x Makefile -x Makefile.in bfgminer-3.10.5.orig/libblkmaker/example.c bfgminer-3.10.5/libblkmaker/example.c
--- bfgminer-3.10.5.orig/libblkmaker/example.c	2015-12-25 17:26:57.615612980 -0800
+++ bfgminer-3.10.5/libblkmaker/example.c	2015-12-31 12:04:49.808095249 -0800
@@ -19,6 +19,10 @@
 #include "private.h"
 #include "testinput.c"
 
+#ifdef USE_BOINC
+#include "boinc_wrapper.h"
+#endif
+
 void testb58() {
 	int rv;
 	const char *iaddr = "11Baf75Ferj6A7AoN565gCQj9kGWbDMHfN9";
@@ -26,9 +30,17 @@
 	char bufx[26] = {'\xff'};
 	char *buf = &bufx[1];
 	if (!_blkmk_b58tobin(buf, 25, addr, 0))
+#ifdef USE_BOINC
+		bw_boinc_finish(1);
+#else
 		exit(1);
+#endif
 	if (bufx[0] != '\xff')
+#ifdef USE_BOINC
+		bw_boinc_finish(2);
+#else
 		exit(2);
+#endif
 	char cbuf[51];
 	_blkmk_bin2hex(cbuf, buf, 25);
 	printf("Base58 raw data: %s\n", cbuf);
diff -ur -x configure -x config.status -x config.log -x aclocal.m4 -x Makefile -x Makefile.in bfgminer-3.10.5.orig/logging.h bfgminer-3.10.5/logging.h
--- bfgminer-3.10.5.orig/logging.h	2015-12-25 17:26:57.542610256 -0800
+++ bfgminer-3.10.5/logging.h	2015-12-31 12:04:51.337154000 -0800
@@ -112,6 +112,7 @@
 	} \
 	fprintf(stderr, "\n");  \
 	fflush(stderr);  \
+	boinc_quit_status(status, fmt, ##__VA_ARGS__); \
 	_quit(status); \
 } while (0)
 
@@ -122,6 +123,7 @@
 				##__VA_ARGS__, __FILE__, __func__, __LINE__); \
 		_applog(LOG_ERR, tmp42); \
 	} \
+	boinc_quit_status(status, fmt, ##__VA_ARGS__); \
 	_quit(status); \
 } while (0)
 
@@ -132,6 +134,7 @@
 				##__VA_ARGS__, _file, _func, _line); \
 		_applog(LOG_ERR, tmp42); \
 	} \
+	boinc_quit_status(status, fmt, ##__VA_ARGS__); \
 	_quit(status); \
 } while (0)
 
diff -ur -x configure -x config.status -x config.log -x aclocal.m4 -x Makefile -x Makefile.in bfgminer-3.10.5.orig/Makefile.am bfgminer-3.10.5/Makefile.am
--- bfgminer-3.10.5.orig/Makefile.am	2015-12-25 17:26:57.542610256 -0800
+++ bfgminer-3.10.5/Makefile.am	2016-01-01 11:39:43.900509922 -0800
@@ -8,6 +8,7 @@
 # Software Foundation; either version 3 of the License, or (at your option)
 # any later version.  See COPYING for more details.
 
+CXX=g++
 ACLOCAL_AMFLAGS = -I m4
 
 EXTRA_DIST	= \
@@ -49,12 +50,12 @@
 bfgminer_LDADD	= $(DLOPEN_FLAGS) @LIBCURL_LIBS@ @JANSSON_LIBS@ @PTHREAD_LIBS@ \
 		  @NCURSES_LIBS@ @PDCURSES_LIBS@ @WS2_LIBS@ \
 		  @UDEV_LIBS@ @LIBUSB_LIBS@ @MM_LIBS@ @RT_LIBS@ \
-		  @MATH_LIBS@ lib/libgnu.a ccan/libccan.a
-bfgminer_CPPFLAGS = -I$(top_builddir)/lib -I$(top_srcdir)/lib @LIBUSB_CFLAGS@ @LIBCURL_CFLAGS@
+		  @MATH_LIBS@ lib/libgnu.a ccan/libccan.a -lboinc_graphics2 -lboinc -lboinc_api -lboinc -lboinc_opencl
+bfgminer_CPPFLAGS = -I$(top_builddir)/lib -I$(top_srcdir)/lib @LIBUSB_CFLAGS@ @LIBCURL_CFLAGS@ -pthread
 
 bfgminer_CPPFLAGS += -DCGMINER_PREFIX='"$(pkgdatadir)"'
 
-bfgminer_CPPFLAGS += @JANSSON_CFLAGS@
+bfgminer_CPPFLAGS += @JANSSON_CFLAGS@ -DUSE_BOINC -I/usr/include/boinc -I/usr/share/boinc -I/usr/share/boinc/api -I/usr/share/boinc/lib -I/usr/share/boinc/sched -I/usr/share/boinc/db
 bfgminer_CPPFLAGS += $(PTHREAD_FLAGS)
 bfgminer_CPPFLAGS += $(NCURSES_CPPFLAGS)
 
@@ -71,7 +72,7 @@
 bfgminer_SOURCES += miner.h compat.h  \
 	deviceapi.c deviceapi.h \
 		   util.c util.h logging.h		\
-		   sha2.c sha2.h api.c
+		   sha2.c sha2.h api.c boinc_wrapper.cpp
 EXTRA_bfgminer_DEPENDENCIES =
 
 SUBDIRS += $(LIBBLKMAKER_SUBDIRS)
diff -ur -x configure -x config.status -x config.log -x aclocal.m4 -x Makefile -x Makefile.in bfgminer-3.10.5.orig/miner.c bfgminer-3.10.5/miner.c
--- bfgminer-3.10.5.orig/miner.c	2015-12-25 17:26:57.543610294 -0800
+++ bfgminer-3.10.5/miner.c	2016-01-01 21:05:07.001406156 -0800
@@ -81,6 +81,12 @@
 #include "lowlevel.h"
 #endif
 
+#ifdef USE_BOINC
+#include "boinc_wrapper.h"
+#endif
+
+#include "filesys.h"
+
 #if defined(unix) || defined(__APPLE__)
 	#include <errno.h>
 	#include <fcntl.h>
@@ -103,6 +109,10 @@
 	{ "Balance" },
 };
 
+#ifdef USE_BOINC
+BW_BOINC_OPTIONS options;
+int boinc_success = 0;
+#endif
 static char packagename[256];
 
 bool opt_protocol;
@@ -406,6 +416,7 @@
 
 struct thread_q *getq;
 
+static int total_work_finished;
 static int total_work;
 static bool staged_full;
 struct work *staged_work = NULL;
@@ -496,7 +507,11 @@
 	vsnprintf(exit_buf, sizeof(exit_buf), fmt, ap);
 	va_end(ap);
 	_applog(LOG_ERR, exit_buf);
+#ifdef USE_BOINC
+	bw_boinc_finish(1);
+#else
 	exit(1);
+#endif
 }
 
 char *devpath_to_devid(const char *devpath)
@@ -2504,7 +2519,11 @@
 	printf("  Options:%s\n", BFG_OPTLIST);
 	printf("%s", opt_usage(opt_argv0, extra));
 	fflush(stdout);
+#ifdef USE_BOINC
+	bw_boinc_finish(0);
+#else
 	exit(0);
+#endif
 }
 
 /* These options are available from commandline only */
@@ -4127,6 +4146,9 @@
 		sharelog("accept", work);
 		if (opt_shares && total_diff_accepted >= opt_shares) {
 			applog(LOG_WARNING, "Successfully mined %d accepted shares as requested and exiting.", opt_shares);
+#ifdef USE_BOINC
+			boinc_work_success();
+#endif
 			kill_work();
 			return;
 		}
@@ -4748,8 +4770,14 @@
 
 	cgtime(&work->tv_getwork);
 
+#ifdef USE_BOINC
+	bw_boinc_begin_critical_section();
+#endif
 	val = json_rpc_call(curl, url, pool->rpc_userpass, rpc_req, false,
 			    false, &work->rolltime, pool, false);
+#ifdef USE_BOINC
+	bw_boinc_end_critical_section();
+#endif
 	pool_stats->getwork_attempts++;
 
 	free(rpc_req);
@@ -5553,6 +5581,9 @@
 	int n;
 	CURLMsg *cm;
 	FD_ZERO(&rfds);
+#ifdef USE_BOINC
+	bw_boinc_begin_critical_section();
+#endif
 	while (1) {
 		mutex_lock(&submitting_lock);
 		total_submitting -= tsreduce;
@@ -5743,6 +5774,9 @@
 			}
 		}
 	}
+#ifdef USE_BOINC
+	bw_boinc_end_critical_section();
+#endif
 	assert(!write_sws);
 	mutex_unlock(&submitting_lock);
 
@@ -7756,6 +7790,9 @@
 	cgtime(&temp_tv_end);
 	timersub(&temp_tv_end, &total_tv_end, &total_diff);
 
+#ifdef USE_BOINC
+	bw_boinc_fraction_done(((double)total_work_finished)/total_work);
+#endif
 	total_mhashes_done += local_mhashes;
 	local_mhashes_done += local_mhashes;
 	/* Only update with opt_log_interval */
@@ -8477,8 +8514,14 @@
 
 	pool->probed = false;
 	cgtime(&tv_getwork);
+#ifdef USE_BOINC
+	bw_boinc_begin_critical_section();
+#endif
 	val = json_rpc_call(curl, pool->rpc_url, pool->rpc_userpass, rpc_req,
 			true, false, &rolltime, pool, false);
+#ifdef USE_BOINC
+	bw_boinc_end_critical_section();
+#endif
 	cgtime(&tv_getwork_reply);
 
 	free(rpc_req);
@@ -9320,6 +9363,7 @@
 
 void __work_completed(struct cgpu_info *cgpu, struct work *work)
 {
+	total_work_finished++;
 	cgpu->queued_count--;
 	HASH_DEL(cgpu->queued_work, work);
 }
@@ -9620,8 +9664,14 @@
 		curl_easy_setopt(curl, CURLOPT_FRESH_CONNECT, 1);
 		curl_easy_setopt(curl, CURLOPT_OPENSOCKETFUNCTION, save_curl_socket);
 		curl_easy_setopt(curl, CURLOPT_OPENSOCKETDATA, pool);
+#ifdef USE_BOINC
+		bw_boinc_begin_critical_section();
+#endif
 		val = json_rpc_call(curl, lp_url, pool->rpc_userpass,
 				    lpreq, false, true, &rolltime, pool, false);
+#ifdef USE_BOINC
+		bw_boinc_end_critical_section();
+#endif
 		pool->lp_socket = CURL_SOCKET_BAD;
 
 		cgtime(&reply);
@@ -9929,6 +9979,10 @@
 {
 	const unsigned int interval = WATCHDOG_INTERVAL;
 	struct timeval zero_tv;
+#ifdef USE_BOINC
+	int suspended_prev;
+	int suspended_curr;
+#endif
 
 #ifndef HAVE_PTHREAD_CANCEL
 	pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);
@@ -9939,10 +9993,18 @@
 	memset(&zero_tv, 0, sizeof(struct timeval));
 	cgtime(&rotate_tv);
 
+
+
 	while (1) {
 		int i;
 		struct timeval now;
 
+#ifdef USE_BOINC
+		applog(LOG_WARNING, "Suspended state: %d", suspended_curr);
+		suspended_curr = bw_boinc_get_status_suspended();
+
+		bw_boinc_begin_critical_section();
+#endif
 		sleep(interval);
 
 		discard_stale();
@@ -9963,6 +10025,42 @@
 
 		cgtime(&now);
 
+
+#ifdef USE_BOINC
+
+		if (!sched_paused && (suspended_curr != suspended_prev) && suspended_curr) {
+			sched_paused = true;
+
+			applog(LOG_WARNING, "Suspending...", suspended_curr);
+			rd_lock(&mining_thr_lock);
+			for (i = 0; i < mining_threads; i++)
+				mining_thr[i]->pause = true;
+			rd_unlock(&mining_thr_lock);
+		} else if (sched_paused && (suspended_curr != suspended_prev)  && !suspended_curr) {
+			sched_paused = false;
+
+			applog(LOG_WARNING, "Unsupending...", suspended_curr);
+
+			for (i = 0; i < mining_threads; i++) {
+				struct thr_info *thr;
+
+				thr = get_thread(i);
+				thr->pause = false;
+			}
+
+			for (i = 0; i < total_devices; ++i)
+			{
+				struct cgpu_info *cgpu = get_devices(i);
+
+				/* Don't touch disabled devices */
+				if (cgpu->deven == DEV_DISABLED)
+					continue;
+				proc_enable(cgpu);
+			}
+		}
+
+		suspended_prev = suspended_curr;
+#else
 		if (!sched_paused && !should_run()) {
 			applog(LOG_WARNING, "Pausing execution as per stop time %02d:%02d scheduled",
 			       schedstop.tm.tm_hour, schedstop.tm.tm_min);
@@ -10004,14 +10102,20 @@
 				proc_enable(cgpu);
 			}
 		}
+#endif
 
 		for (i = 0; i < total_devices; ++i) {
 			struct cgpu_info *cgpu = get_devices(i);
 			if (!cgpu->disable_watchdog)
 				bfg_watchdog(cgpu, &now);
 		}
+#ifdef USE_BOINC
+		bw_boinc_end_critical_section();
+#endif
 	}
 
+
+
 	return NULL;
 }
 
@@ -10300,6 +10404,54 @@
 #endif
 }
 
+#ifdef USE_BOINC
+void boinc_work_success()
+{
+	boinc_success = 1;
+}
+#endif
+
+void boinc_quit_status(int status, const char *format, ...)
+{
+#ifdef USE_BOINC
+	FILE *fresult;
+
+	char result_virtual_name[256] = "result.txt";
+	char result_physical_name[256];
+	bw_boinc_get_result_physical_name(result_virtual_name, result_physical_name, 256);
+	applog(LOG_WARNING,"creating %s", result_physical_name);
+	if (strlen(result_physical_name) == 0) {
+		applog(LOG_WARNING,"Could not create boinc result file.");
+	        bw_boinc_show_message(1, "Boinc BFGMiner quiting...", 0);
+	        bw_boinc_finish(1);
+	}
+	fresult = bw_boinc_fopen(result_physical_name, "w");
+	if (!fresult) {
+		applog(LOG_WARNING,"Could not create boinc result file.");
+	        bw_boinc_show_message(1, "Boinc BFGMiner quiting...", 0);
+	        bw_boinc_finish(1);
+	}
+
+	char buffer[256];
+	va_list args;
+	va_start (args, format);
+	vsnprintf(buffer, 255, format, args);
+
+	if (status == 1) {
+		fputs("fail", fresult);
+	} else if (status == 0 && boinc_success == 0) {
+		fputs("in progress", fresult);
+	} else if (status == 0 && boinc_success == 1) {
+		fputs("success", fresult);
+	}
+
+	bw_boinc_fclose(fresult);
+	applog(LOG_WARNING,"closed %s", result_physical_name);
+	applog(LOG_WARNING,"quitting...");
+	bw_boinc_finish(status);
+#endif
+}
+
 void _quit(int status)
 {
 	if (status) {
@@ -10318,7 +10470,11 @@
 	}
 #endif
 
+#ifdef USE_BOINC
+	bw_boinc_finish(status);
+#else
 	exit(status);
+#endif
 }
 
 #ifdef HAVE_CURSES
@@ -10467,7 +10623,11 @@
 
 	if (r < 0) {
 		perror("pipe - failed to create pipe for --monitor");
+#ifdef USE_BOINC
+		bw_boinc_finish(1);
+#else
 		exit(1);
+#endif
 	}
 
 	// Make stderr write end of pipe
@@ -10475,12 +10635,20 @@
 	r = dup2(pfd[1], 2);
 	if (r < 0) {
 		perror("dup2 - failed to alias stderr to write end of pipe for --monitor");
+#ifdef USE_BOINC
+		bw_boinc_finish(1);
+#else
 		exit(1);
+#endif
 	}
 	r = close(pfd[1]);
 	if (r < 0) {
 		perror("close - failed to close write end of pipe for --monitor");
+#ifdef USE_BOINC
+		bw_boinc_finish(1);
+#else
 		exit(1);
+#endif
 	}
 
 	// Don't allow a dying monitor to kill the main process
@@ -10488,14 +10656,22 @@
 	sighandler_t sr1 = signal(SIGPIPE, SIG_IGN);
 	if (SIG_ERR == sr0 || SIG_ERR == sr1) {
 		perror("signal - failed to edit signal mask for --monitor");
+#ifdef USE_BOINC
+		bw_boinc_finish(1);
+#else
 		exit(1);
+#endif
 	}
 
 	// Fork a child process
 	forkpid = fork();
 	if (forkpid < 0) {
 		perror("fork - failed to fork child process for --monitor");
+#ifdef USE_BOINC
+		bw_boinc_finish(1);
+#else
 		exit(1);
+#endif
 	}
 
 	// Child: launch monitor command
@@ -10522,7 +10698,11 @@
 	r = close(pfd[0]);
 	if (r < 0) {
 		perror("close - failed to close read end of pipe for --monitor");
+#ifdef USE_BOINC
+		bw_boinc_finish(1);
+#else
 		exit(1);
+#endif
 	}
 }
 #endif // defined(unix)
@@ -11186,6 +11366,12 @@
 	int i;
 	char *s;
 
+#ifdef USE_BOINC
+	bw_boinc_init();
+
+	bw_boinc_init_options(&options);
+#endif
+
 #ifdef WIN32
 	LoadLibrary("backtrace.dll");
 #endif
@@ -11315,8 +11501,8 @@
 			   "Options for command line only");
 
 	opt_parse(&argc, argv, applog_and_exit);
-	if (argc != 1)
-		quit(1, "Unexpected extra commandline arguments");
+	//if (argc != 1)
+	//	quit(1, "Unexpected extra commandline arguments");
 
 	if (!config_loaded)
 		load_default_config();
@@ -11467,7 +11653,11 @@
 				}
 #endif
 		}
+#ifdef USE_BOINC
+		bw_boinc_finish(0);
+#else
 		exit(0);
+#endif
 	}
 #endif
 
@@ -11869,5 +12059,8 @@
 		push_curl_entry(ce, pool);
 	}
 
+#ifdef USE_BOINC
+	bw_boinc_finish(0);
+#endif
 	return 0;
 }
Only in bfgminer-3.10.5: out
Only in bfgminer-3.10.5: phatk121016Juniperv2w128l8pOpenCL2_0AMDAPP1800_11.bin
Only in bfgminer-3.10.5: stderr.txt
Binary files bfgminer-3.10.5.orig/x86_64/libx8664.a and bfgminer-3.10.5/x86_64/libx8664.a differ
