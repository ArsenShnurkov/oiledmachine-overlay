diff -ur surf-0.6.orig/surf.c surf-0.6/surf.c
--- surf-0.6.orig/surf.c	2016-07-28 15:15:10.666755207 -0700
+++ surf-0.6/surf.c	2016-07-28 15:14:10.662753230 -0700
@@ -92,8 +92,9 @@
 static void clipboard(Client *c, const Arg *arg);
 
 static char *copystr(char **str, const char *src);
-static WebKitWebView *createwindow(WebKitWebView *web_view, WebKitNavigationAction *navigation_action,
-		Client *c);
+//static WebKitWebView *createwindow(WebKitWebView *web_view, WebKitNavigationAction *navigation_action,
+//		Client *c);
+static GtkWidget *createwindow(WebKitWebView *web_view, Client *c);
 static gboolean decidedownloadwindow(WebKitWebView *web_view,
                WebKitPolicyDecision    *decision,
                WebKitPolicyDecisionType decision_type,
@@ -166,14 +167,9 @@
 }
 
 void
-receiveddata(WebKitWebResource *resource,
+receiveddata(WebKitDownload *download,
                guint64            data_length,
                gpointer           user_data){
-//void
-//receiveddata(WebKitWebResource *resource,
-//               WebKitURIRequest  *request,
-//               WebKitURIResponse *redirected_response,
-//               gpointer           user_data) {
 	gboolean bimage, bobj, bhtmlpage, bcss, bscript, bajax;
 	bimage = FALSE;
 	bobj = FALSE;
@@ -182,11 +178,11 @@
 	bscript = FALSE;
 	bajax = FALSE;
 
-	WebKitURIResponse *response = webkit_web_resource_get_response(resource);
+        WebKitURIResponse *response = webkit_download_get_response(download);
 	if (response) {
-		const gchar *uri = webkit_web_resource_get_uri(resource);
+		const gchar *uri = webkit_uri_response_get_uri(response);
+	        const gchar *type = webkit_uri_response_get_mime_type(response);
 		//printf("%s\n",uri);
-		const gchar *type = webkit_uri_response_get_mime_type(response);
 		//printf("%s\n",type);
 
 		if (g_strrstr(type, "application/javascript") || g_strrstr(type, "application/x-javascript") || g_strrstr(type, "text/javascript")) {
@@ -297,16 +293,19 @@
 	return tmp;
 }
 
-static WebKitWebView *
-createwindow(WebKitWebView *web_view, WebKitNavigationAction *navigation_action, Client *c) {
+//static WebKitWebView *
+//createwindow(WebKitWebView *web_view, WebKitNavigationAction *navigation_action, Client *c) {
+static GtkWidget *
+createwindow(WebKitWebView *web_view, Client *c) {
 	Client *n = newclient();
 
 	const char *uri;
-	WebKitURIRequest *ur = webkit_navigation_action_get_request(navigation_action);
-	uri = webkit_uri_request_get_uri(ur);
+	//WebKitURIRequest *ur = webkit_navigation_action_get_request(navigation_action);
+	//uri = webkit_uri_request_get_uri(ur);
+        uri=webkit_web_view_get_uri(web_view);
 	webkit_web_view_load_uri(n->view, uri);
 
-	return n->view;
+	return (GtkWidget*)n->view;
 }
 
 static gboolean 
@@ -319,23 +318,24 @@
 		case WEBKIT_POLICY_DECISION_TYPE_RESPONSE:
 			{
 				WebKitResponsePolicyDecision *p = WEBKIT_RESPONSE_POLICY_DECISION(decision);
-				if (!webkit_response_policy_decision_is_mime_type_supported(p))
-				{
-					webkit_policy_decision_ignore((WebKitPolicyDecision*)p);
-					initdownload(webkit_response_policy_decision_get_request(p), c);
-					return TRUE;
-				}
+				//if (!webkit_response_policy_decision_is_mime_type_supported(p))
+				//{
+				//	webkit_policy_decision_ignore((WebKitPolicyDecision*)p);
+				//	initdownload(webkit_response_policy_decision_get_request(p), c);
+				//	return TRUE;
+				//}
 			}
 			break;
 		case WEBKIT_POLICY_DECISION_TYPE_NAVIGATION_ACTION:
 			{
 				WebKitNavigationPolicyDecision *p = WEBKIT_NAVIGATION_POLICY_DECISION(decision);
-				WebKitNavigationAction *na = webkit_navigation_policy_decision_get_navigation_action(p);
-				if (webkit_navigation_action_get_navigation_type(na) ==  WEBKIT_NAVIGATION_TYPE_LINK_CLICKED) {
+				WebKitNavigationType nt = webkit_navigation_policy_decision_get_navigation_type(p);
+				//WebKitNavigationAction *na = webkit_navigation_policy_decision_get_navigation_action(p);
+				if (nt ==  WEBKIT_NAVIGATION_TYPE_LINK_CLICKED) {
 					webkit_policy_decision_ignore((WebKitPolicyDecision*)p);
-					WebKitURIRequest *ur = webkit_navigation_action_get_request(na);
+					WebKitURIRequest *ur = webkit_navigation_policy_decision_get_request(p);
 					const char *uri = webkit_uri_request_get_uri(ur);
-					if (webkit_navigation_action_get_modifiers(na) & GDK_CONTROL_MASK) {
+					if (webkit_navigation_policy_decision_get_modifiers(p) & GDK_CONTROL_MASK) {
 						Client *n = newclient();
 						webkit_web_view_load_uri(n->view, uri);
 					} else {
@@ -508,7 +508,7 @@
 void initializewebextensions (WebKitWebContext *context,
                gpointer          user_data) {
 	webkit_web_context_set_web_extensions_directory(context, SURF_WEB_EXTENSIONS_DIR);
-        webkit_web_context_set_web_extensions_initialization_user_data(context, g_variant_new_string(scriptfile));
+        //webkit_web_context_set_web_extensions_initialization_user_data(context, g_variant_new_string(scriptfile));
 }
 
 static void
@@ -635,7 +635,7 @@
 	Client *c;
 	WebKitSettings *settings;
 	GdkGeometry hints = { 1, 1 };
-	WebKitUserContentManager *usercontent;
+	//WebKitUserContentManager *usercontent;
 	char *ua;
 
 	if(!(c = calloc(1, sizeof(Client))))
@@ -677,11 +677,13 @@
 			GTK_POLICY_NEVER, GTK_POLICY_NEVER);
 
 	/* Webview */
-	usercontent = webkit_user_content_manager_new();
+	//usercontent = webkit_user_content_manager_new();
 	if (clients == NULL) {
-		c->view = WEBKIT_WEB_VIEW(webkit_web_view_new_with_user_content_manager(usercontent));
+		c->view = webkit_web_view_new();
+		//c->view = WEBKIT_WEB_VIEW(webkit_web_view_new_with_user_content_manager(usercontent));
 	} else {
-		c->view = WEBKIT_WEB_VIEW(webkit_web_view_new_with_related_view(root_view));
+		c->view = webkit_web_view_new();
+		//c->view = WEBKIT_WEB_VIEW(webkit_web_view_new_with_related_view(root_view));
 	}
 	g_signal_connect(G_OBJECT(c->view),
 			"notify::title",
@@ -778,22 +780,22 @@
 
 		webkit_web_context_set_tls_errors_policy(context, strictssl ? WEBKIT_TLS_ERRORS_POLICY_FAIL : WEBKIT_TLS_ERRORS_POLICY_IGNORE);
 
-		char* source;
-		WebKitUserScript *script;
-		if(g_file_get_contents(scriptfile, &source, NULL, NULL)) {
-			script = webkit_user_script_new(source, WEBKIT_USER_CONTENT_INJECT_ALL_FRAMES, WEBKIT_USER_SCRIPT_INJECT_AT_DOCUMENT_END, NULL, NULL);
-			webkit_user_content_manager_add_script(usercontent, script);
-			g_free(source);
-			webkit_user_script_unref(script);
-		}
-
-		WebKitUserStyleSheet *style;
-		if(g_file_get_contents(stylefile, &source, NULL, NULL)) {
-			style = webkit_user_style_sheet_new(source, WEBKIT_USER_CONTENT_INJECT_ALL_FRAMES, WEBKIT_USER_STYLE_LEVEL_USER, NULL, NULL);
-			webkit_user_content_manager_add_style_sheet(usercontent, style);
-			g_free(source);
-			webkit_user_style_sheet_unref(style);
-		}
+		//char* source;
+		//WebKitUserScript *script;
+		//if(g_file_get_contents(scriptfile, &source, NULL, NULL)) {
+		//	script = webkit_user_script_new(source, WEBKIT_USER_CONTENT_INJECT_ALL_FRAMES, WEBKIT_USER_SCRIPT_INJECT_AT_DOCUMENT_END, NULL, NULL);
+		//	webkit_user_content_manager_add_script(usercontent, script);
+		//	g_free(source);
+		//	webkit_user_script_unref(script);
+		//}
+
+		//WebKitUserStyleSheet *style;
+		//if(g_file_get_contents(stylefile, &source, NULL, NULL)) {
+		//	style = webkit_user_style_sheet_new(source, WEBKIT_USER_CONTENT_INJECT_ALL_FRAMES, WEBKIT_USER_STYLE_LEVEL_USER, NULL, NULL);
+		//	webkit_user_content_manager_add_style_sheet(usercontent, style);
+		//	g_free(source);
+		//	webkit_user_style_sheet_unref(style);
+		//}
 	}
 
 	if(enableinspector) {
@@ -809,10 +811,10 @@
 	setatom(c, AtomFind, "");
 	setatom(c, AtomUri, "about:blank");
 	setatom(c, AtomScriptFile, "");
-	if(hidebackground) {
-		static const GdkRGBA transparent = {.0, .0, .0, .0};
-		webkit_web_view_set_background_color(c->view, &transparent);
-	}
+	//if(hidebackground) {
+	//	static const GdkRGBA transparent = {.0, .0, .0, .0};
+	//	webkit_web_view_set_background_color(c->view, &transparent);
+	//}
 
 	root_view = c->view;
 	c->title = NULL;
@@ -1030,7 +1032,7 @@
 	}
 
 	WebKitWebContext *defcontext = webkit_web_context_get_default();
-	webkit_web_context_set_process_model(defcontext, WEBKIT_PROCESS_MODEL_MULTIPLE_SECONDARY_PROCESSES);
+	//webkit_web_context_set_process_model(defcontext, WEBKIT_PROCESS_MODEL_MULTIPLE_SECONDARY_PROCESSES);
 	webkit_web_context_set_cache_model(defcontext, WEBKIT_CACHE_MODEL_WEB_BROWSER);
 	g_signal_connect(G_OBJECT(defcontext),
 			"initialize-web-extensions",
