diff -urpN surf-0.6.mod4.no-adblock/surf.c surf-0.6/surf.c
--- surf-0.6.mod4.no-adblock/surf.c	2016-12-30 12:21:23.373006279 -0800
+++ surf-0.6/surf.c	2016-12-30 12:06:17.086647176 -0800
@@ -165,6 +165,47 @@ get_data (GObject *source_object,
 	;
 }
 
+void
+receiveddata(WebKitWebResource *resource,
+               guint64            data_length,
+               gpointer           user_data){
+//void
+//receiveddata(WebKitWebResource *resource,
+//               WebKitURIRequest  *request,
+//               WebKitURIResponse *redirected_response,
+//               gpointer           user_data) {
+	gboolean bimage, bobj, bhtmlpage, bcss, bscript, bajax;
+	bimage = FALSE;
+	bobj = FALSE;
+	bhtmlpage = FALSE;
+	bcss = FALSE;
+	bscript = FALSE;
+	bajax = FALSE;
+
+	WebKitURIResponse *response = webkit_web_resource_get_response(resource);
+	if (response) {
+		const gchar *uri = webkit_web_resource_get_uri(resource);
+		//printf("%s\n",uri);
+		const gchar *type = webkit_uri_response_get_mime_type(response);
+		//printf("%s\n",type);
+
+		if (g_strrstr(type, "application/javascript") || g_strrstr(type, "application/x-javascript") || g_strrstr(type, "text/javascript")) {
+			bscript = TRUE;
+		} else if (g_strrstr(type, "image/") ) {
+			bimage = TRUE;
+		} else if (g_strrstr(type, "text/html")) {
+			bhtmlpage = TRUE;
+		} else if (g_strrstr(type, "text/css")) {
+			bcss = TRUE;
+		} else if (g_strrstr(type, "application/x-shockwave-flash") || g_strrstr(type, "application/octet-stream")) {
+			bobj = TRUE;
+		} else if (g_strrstr(type, "text/xml")) {
+			bajax = TRUE;
+		} else {
+		}
+	}
+}
+
 static void
 beforerequest(WebKitWebView     *web_view,
                WebKitWebResource *resource,
@@ -173,6 +214,11 @@ beforerequest(WebKitWebView     *web_vie
 	const gchar *uri = webkit_uri_request_get_uri(request);
 	if(g_str_has_suffix(uri, "/favicon.ico"))
 		webkit_uri_request_set_uri(request, "about:blank");
+
+	g_signal_connect(G_OBJECT(resource),
+			"received-data",
+			G_CALLBACK(receiveddata), c);
+
 }
 
 static char *
diff -urpN surf-0.6.mod4.no-adblock/surfext.c surf-0.6/surfext.c
--- surf-0.6.mod4.no-adblock/surfext.c	1969-12-31 16:00:00.000000000 -0800
+++ surf-0.6/surfext.c	2016-12-30 12:06:17.085647138 -0800
@@ -0,0 +1,472 @@
+//Slowest part of the adblocking.  Needs to reduce overhead.
+//The naive algorithm is faster than KMP for string search in python
+#include <signal.h>
+#include <X11/X.h>
+#include <X11/Xatom.h>
+#include <gtk/gtk.h>
+#include <gdk/gdkx.h>
+#include <gdk/gdk.h>
+#include <gdk/gdkkeysyms.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <unistd.h>
+#include <limits.h>
+#include <stdlib.h>
+#include <stdio.h>
+//#include <webkit2/webkit2.h>
+//#include <webkit2/WebKitWebExtension.h>
+#include <glib/gstdio.h>
+#include <JavaScriptCore/JavaScript.h>
+#include <sys/file.h>
+#include <libgen.h>
+#include <stdarg.h>
+#include <webkit2/webkit-web-extension.h>
+#include <gmodule.h>
+#include <json-glib/json-glib.h>
+#include <json-glib/json-gobject.h>
+#include <libsoup/soup.h>
+#include <sys/time.h>
+
+#define SCRIPTFILE "/etc/surf/scripts/adblock/blocksrv.py"
+
+static JsonParser *parserd, *parserdg;
+static JsonNode *rootd, *rootdg;
+
+typedef struct {
+	const char *mfhost, *elehost, *fhost, *mfuri, *eleuri, *furi;
+	int evalblock;
+	int finalblock;
+	gboolean block;
+	gboolean unhideele;
+	gboolean mainframe;
+} pat_scan_data;
+
+static gboolean
+takerule(pat_scan_data *psd, char **a)
+{
+	int l;
+	char **opts, *o, **dright, **domains, *d;
+	int i, j;
+	gchar *str, *deleuri;
+	gboolean excludeopt, apply;
+	GError *error;
+
+	gboolean bscript, bimage, bcss, bhtmlpage, bobj, bajax, bsubdoc;
+	gboolean found;
+	int rscript, rimage, rstylesheet, robject, rajax, robjectsubreq, rsubdoc, rdoc, relehide, rother, rpopup, rcollapse, rdomain;
+
+	bhtmlpage = FALSE;
+	bcss = FALSE;
+	bobj = FALSE;
+	bscript = FALSE;
+	bajax = FALSE;
+	bimage = FALSE;
+	bsubdoc = FALSE;
+
+	gchar *teleuri;
+
+	teleuri = g_utf8_strdown(psd->eleuri, -1);
+	/*
+	if (g_ascii_strcasecmp(psd->eleuri, psd->mfuri) == 0) {
+		printf("main page");
+	}*/
+	//we can peek at mime but can't cancel resource so we do it here
+	if (g_strrstr(teleuri, ".htm")) {
+		bhtmlpage = TRUE;
+	} else if (g_strrstr(teleuri, ".css") || g_strrstr(teleuri, "data:text/css")) {
+		bcss = TRUE;
+	} else if (g_strrstr(teleuri, ".flv") || g_strrstr(teleuri, ".swf") || g_strrstr(teleuri, ".class") || g_strrstr(teleuri, ".xap")) {
+		bobj = TRUE;
+	} else if (g_strrstr(teleuri, ".js") || g_strrstr(teleuri, "data:application/x-javascript") || g_strrstr(teleuri, "data:application/javascript") || g_strrstr(teleuri, "data:text/javascript")) {
+		bscript = TRUE;
+	} else if (g_strrstr(teleuri, ".xml") || g_strrstr(teleuri, ".json") ) {
+		bajax = TRUE;
+	} else if (g_strrstr(teleuri, ".gif") || g_strrstr(teleuri, ".jpg") || g_strrstr(teleuri, ".jpeg") || g_strrstr(teleuri, ".png") ||  g_strrstr(teleuri, ".svg") || g_strrstr(teleuri, ".webp") || g_strrstr(teleuri, ".jp2") || g_strrstr(teleuri, ".tiff") || g_strrstr(teleuri, "data:image/") ) {
+		bimage = TRUE;
+	} else if (psd->mainframe == FALSE) {
+		bsubdoc = TRUE;
+	} else {
+		//printf("unknown type: %s", teleuri);
+	}
+	g_free(teleuri);
+
+	l = 0;
+	while(a && a[l] != NULL) {
+		l++;
+	}
+
+	rscript = -1;
+	rimage = -1;
+	rstylesheet = -1;
+	robject = -1;
+	rajax = -1;
+	robjectsubreq = -1;
+	rsubdoc = -1;
+	rdoc = -1;
+	relehide = -1;
+	rpopup = -1;
+	rcollapse = -1;
+	rdomain = -1;
+
+	apply = TRUE;
+	if (l > 1) {
+		opts = g_strsplit(a[1], ",", -1);
+		i = 0;
+		gboolean eapplyd = FALSE;
+		gboolean eapplyex = FALSE;
+		gboolean eapplyt = FALSE;
+		gboolean applyt = FALSE;
+		gboolean applyd = FALSE;
+		gboolean enableab = FALSE;
+		gboolean enableelehide = FALSE;
+		gboolean blockpopups = FALSE;
+		gboolean fastcollapse = FALSE;
+		gboolean senddnt = FALSE;
+		while (opts[i] != NULL) {
+			o = opts[i];
+			excludeopt = FALSE;
+			if (o[0] == '~') {
+				excludeopt = TRUE;
+				o[0] = ' ';
+				g_strstrip(o);
+			} else if (g_strrstr(o, "script")) {
+				eapplyt = TRUE;
+				if (excludeopt == FALSE && bscript == TRUE)  {
+					//printf("isscript\n");
+					applyt = TRUE;
+				} else if (excludeopt == TRUE && bscript == TRUE) {
+					applyt = FALSE;
+				}
+			} else if (g_strrstr(o, "image")) {
+				eapplyt = TRUE;
+				if (excludeopt == FALSE && bimage == TRUE)  {
+					//printf("isimage\n");
+					applyt = TRUE;
+				} else if (excludeopt == TRUE && bimage == TRUE) {
+					applyt = FALSE;
+				}
+			} else if (g_strrstr(o, "stylesheet")) {
+				eapplyt = TRUE;
+				if (excludeopt == FALSE && bcss == TRUE)  {
+					//printf("iscss\n");
+					applyt = TRUE;
+				} else if (excludeopt == TRUE && bcss == TRUE) {
+					applyt = FALSE;
+				}
+			} else if (g_strrstr(o, "object")) {
+				eapplyt = TRUE;
+				if (excludeopt == FALSE && bobj == TRUE)  {
+					//printf("isobj\n");
+					applyt = TRUE;
+				} else if (excludeopt == TRUE && bobj == TRUE) {
+					applyt = FALSE;
+				}
+			} else if (g_strrstr(o, "subdocument")) {
+				eapplyt = TRUE;
+				if (excludeopt == FALSE && bsubdoc == TRUE)  {
+					applyt = TRUE;
+				} else if (excludeopt == TRUE && bsubdoc == TRUE) {
+					applyt = FALSE;
+				}
+			} else if (g_strrstr(o, "xmlhttprequest")) {
+				eapplyt = TRUE;
+				if (excludeopt == FALSE && bajax == TRUE)  {
+					applyt = TRUE;
+				} else if (excludeopt == TRUE && bajax == TRUE) {
+					applyt = FALSE;
+				}
+			} else if (g_strrstr(o, "document")) {
+				/*
+				eapplyex = TRUE;
+				if (excludeopt == FALSE && psd->block == FALSE) {
+					enableab = FALSE;
+				}*/
+			} else if (g_strrstr(o, "elemhide")) {
+				/*eapplyex = TRUE;
+				if (excludeopt == TRUE) {
+					enableelehide = FALSE;
+					if (psd->block == FALSE) {
+						psd->unhideele = TRUE;
+					}
+				}*/
+			} else if (g_strrstr(o, "object-subrequest")) { //through flash
+			} else if (g_strrstr(o, "donottrack")) {
+				if (excludeopt == FALSE)  {
+					senddnt = TRUE;
+				} else if (excludeopt == TRUE) {
+					senddnt = FALSE;
+				}
+			} else if (g_strrstr(o, "popup")) {
+				if (excludeopt == FALSE)  {
+					blockpopups = TRUE;
+				} else if (excludeopt == TRUE) {
+					blockpopups = FALSE;
+				}
+			} else if (g_strrstr(o, "collapse")) {
+
+			} else if (g_strrstr(o, "third-party")) { //domains
+				eapplyd = TRUE;
+				/*
+				if (excludeopt == FALSE && g_ascii_strcasecmp(psd->mfhost, psd->fhost) != 0) {
+					applyd = TRUE;
+				} else if (excludeopt == TRUE && g_ascii_strcasecmp(psd->mfhost, psd->fhost) == 0) {
+					applyd = FALSE;
+				}*/
+			} else if (g_strrstr(o, "domain")) {
+				eapplyd = TRUE;
+				dright = g_strsplit(o, "=", -1);
+				domains = g_strsplit(dright[1], "|", -1);
+				j = 0;
+				while(domains && domains[j] != NULL) {
+					error = NULL;
+					str = g_strdup(domains[j]);
+					//printf("|%s|\n", str);
+					if (str[0] == '~') {
+						str[0] = ' ';
+						g_strstrip(str);
+						if (g_strrstr(psd->elehost, str)) {
+							applyd = FALSE;
+						}
+					} else {
+						if (g_strrstr(psd->elehost, str)) {
+							applyd = TRUE;
+						}
+					}
+					g_free(str);
+					j++;
+				}
+				g_strfreev(domains);
+				g_strfreev(dright);
+			}
+			i++;
+		}
+		if (eapplyt && !applyt) {
+			//printf("don't apply type rule\n");
+			apply = FALSE;
+		}
+		if (eapplyd && !applyd) {
+			//printf("don't apply apply domain rule\n");
+			apply = FALSE;
+		}
+		g_strfreev(opts);
+	}
+
+	return apply;
+}
+
+
+void
+pat_scan (JsonArray *array,
+                     guint index_,
+                     JsonNode *element_node,
+                     gpointer user_data)
+{
+	pat_scan_data *psd = user_data;
+	gboolean applyrule;
+	char **a, *pat;
+	const char *item;
+	GError *error;
+	GRegex *regex;
+	gchar *str;
+	char **sc;
+	int l, i, c;
+
+	item = json_node_get_string(element_node);
+	if (item == NULL) {
+		//printf("\t item is null");
+		return;
+	}
+	pat  = g_strdup(item);
+
+	if (item[0] == '@') {
+		psd->block = TRUE;
+		pat[0] = ' ';
+		g_strstrip(pat);
+	}
+
+	a = g_strsplit(pat, "$", -1);
+	error = NULL;
+	regex = g_regex_new("\\|",0,0,&error);
+	error = NULL;
+	str = g_regex_replace_literal(regex, a[0], -1, 0, "", 0, &error);
+	g_regex_unref(regex);
+	sc = g_strsplit(str, "*", -1);
+	g_free(str);
+
+	l = 0;
+	while(sc && sc[l] != NULL) {
+		l++;
+	}
+	i = 0;
+	c = 0;
+	error = NULL;
+	regex = g_regex_new("\\^",0,0,&error);
+	while(sc && sc[i] != NULL) {
+		char *str, *result;
+		error = NULL;
+		str = g_regex_replace_literal(regex, sc[i], -1, 0, "", 0, &error);
+		result = g_strrstr(psd->eleuri, str);
+		if (result != NULL) {
+			c++;
+		}
+		g_free(str);
+		i++;
+	}
+	g_regex_unref(regex);
+	g_strfreev(sc);
+
+	if (c == l) {
+		psd->evalblock = psd->block ? 1 : 0; //1 block, 0 exclude
+		applyrule = takerule(psd, a);
+		if (applyrule) {
+			printf("apply rule pat=%s\n",pat);
+			if (psd->block == FALSE) {
+				//printf("allowing\n");
+				psd->finalblock = 0;
+			} else if (psd->block == TRUE && psd->finalblock != 0) {
+				//printf("blocking\n");
+				//printf("pat=%s\n",pat);
+				//printf("eleurl=%s\n",psd->eleuri);
+				psd->finalblock = 1;
+			}
+		}
+	}
+
+	g_strfreev(a);
+	g_free(pat);
+}
+
+static gboolean
+decide(pat_scan_data *psd)
+{
+	struct timeval st, et, rt;
+
+	//printf("processing %s", eleuri);
+	gettimeofday(&st, NULL);
+
+	//general scan
+	JsonArray *a = json_node_get_array(rootdg);
+	json_array_foreach_element (a, pat_scan, psd);
+
+
+	//domain scan
+	GError *error;
+	gchar *expression = g_strdup_printf("$['%s']", psd->elehost);
+	JsonNode *results = json_path_query (expression, rootd, &error);
+	g_free(expression);
+	JsonArray *ra = json_node_get_array(results);
+	json_array_foreach_element (ra, pat_scan, psd);
+	json_node_free(results);
+
+	struct timeval tv;
+
+	gettimeofday(&et, NULL);
+	timersub(&et, &st, &rt);
+	printf("--- %ld.%ld seconds ---\n", rt.tv_sec, rt.tv_usec);
+
+	return psd->evalblock;
+}
+
+static gboolean
+block_script(WebKitWebPage     *web_page,
+               WebKitURIRequest  *request,
+               WebKitURIResponse *redirected_response,
+               gpointer           user_data)
+{
+	pat_scan_data psd;
+	SoupURI *smfuri = NULL, *sfuri = NULL, *seleuri = NULL;
+
+	WebKitFrame *mf = webkit_web_page_get_main_frame(web_page);
+	psd.mainframe = webkit_frame_is_main_frame(mf);
+
+	psd.mfuri = webkit_frame_get_uri(mf);
+	if (psd.mfuri != NULL && psd.mfuri[0] != 0) {
+		smfuri = soup_uri_new(psd.mfuri);
+		psd.mfhost = soup_uri_get_host(smfuri);
+	}
+
+	psd.furi = webkit_web_page_get_uri(web_page);
+	if (psd.furi != NULL && psd.furi[0] != 0) {
+		sfuri = soup_uri_new(psd.furi);
+		psd.fhost = soup_uri_get_host(sfuri);
+	}
+
+	psd.eleuri = webkit_uri_request_get_uri(request);
+	//printf("%s\n",psd.eleuri);
+	if (psd.eleuri != NULL && psd.eleuri[0] != 0) {
+		seleuri = soup_uri_new(psd.eleuri);
+		psd.elehost = soup_uri_get_host(seleuri);
+	}
+
+	psd.finalblock = -1;
+	psd.unhideele = FALSE;
+
+	decide(&psd);
+
+	gboolean block = FALSE;
+	if (psd.finalblock == -1) { //permissive
+		block = FALSE;
+	} else if (psd.finalblock == 1) {
+		block = TRUE;
+	} else if (psd.finalblock == 0) {
+		block = FALSE;
+	}
+
+	if (block)
+		printf("blocking: %s\n", psd.eleuri);
+
+	if (smfuri != NULL)
+		soup_uri_free(smfuri);
+	if (sfuri != NULL)
+		soup_uri_free(sfuri);
+	if (seleuri != NULL)
+		soup_uri_free(seleuri);
+
+	return block;
+}
+
+static void
+web_page_created_callback (WebKitWebExtension *extension,
+                           WebKitWebPage      *web_page,
+                           gpointer            user_data)
+{
+	parserd = json_parser_new();
+	parserdg = json_parser_new();
+	gchar *d;
+	GError *error;
+	error = NULL;
+	if (json_parser_load_from_file(parserd, "/etc/surf/scripts/adblock/block1.dat", &error) == TRUE) { //domains hash map
+		rootd = json_parser_get_root (parserd);
+	} else {
+		printf("failed to load block1.dat");
+	}
+
+	if (json_parser_load_from_file(parserdg, "/etc/surf/scripts/adblock/block2.dat", &error) == TRUE) { //gen pat
+		rootdg = json_parser_get_root (parserdg);
+	} else {
+		printf("failed to load block2.dat");
+	}
+
+	g_signal_connect(web_page,
+			"send-request",
+			G_CALLBACK(block_script), NULL);
+
+}
+
+G_MODULE_EXPORT void
+webkit_web_extension_initialize (WebKitWebExtension *wk_extension)
+{
+	//system("/bin/sh -c /etc/surf/scripts/adblock/blocksrv.py &");
+}
+
+
+
+G_MODULE_EXPORT void
+webkit_web_extension_initialize_with_user_data(WebKitWebExtension *extension,
+                                GVariant *user_data)
+{
+ g_signal_connect (extension, "page-created", 
+                      G_CALLBACK (web_page_created_callback), 
+                      NULL);
+}
