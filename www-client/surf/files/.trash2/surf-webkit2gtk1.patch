--- surf.c.orig	2015-05-08 19:28:37.238047225 -0700
+++ surf.c	2015-05-15 20:15:48.308562195 -0700
@@ -16,7 +16,7 @@
 #include <limits.h>
 #include <stdlib.h>
 #include <stdio.h>
-#include <webkit/webkit.h>
+#include <webkit2/webkit2.h>
 #include <glib/gstdio.h>
 #include <JavaScriptCore/JavaScript.h>
 #include <sys/file.h>
@@ -33,8 +33,8 @@
 
 #define LENGTH(x)               (sizeof x / sizeof x[0])
 #define CLEANMASK(mask)		(mask & (MODKEY|GDK_SHIFT_MASK))
-#define COOKIEJAR_TYPE          (cookiejar_get_type ())
-#define COOKIEJAR(obj)          (G_TYPE_CHECK_INSTANCE_CAST ((obj), COOKIEJAR_TYPE, CookieJar))
+//#define COOKIEJAR_TYPE          (cookiejar_get_type ())
+//#define COOKIEJAR(obj)          (G_TYPE_CHECK_INSTANCE_CAST ((obj), COOKIEJAR_TYPE, CookieJar))
 
 typedef struct {
 	char *token;
@@ -74,7 +74,7 @@
 	const Arg arg;
 } Key;
 
-typedef struct {
+/*typedef struct {
 	SoupCookieJarText parent_instance;
 	int lock;
 } CookieJar;
@@ -83,7 +83,7 @@
 	SoupCookieJarTextClass parent_class;
 } CookieJarClass;
 
-G_DEFINE_TYPE(CookieJar, cookiejar, SOUP_TYPE_COOKIE_JAR_TEXT)
+G_DEFINE_TYPE(CookieJar, cookiejar, SOUP_TYPE_COOKIE_JAR_TEXT)*/
 
 static Display *dpy;
 static Atom atoms[AtomLast];
@@ -94,100 +94,110 @@
 static gboolean usingproxy = 0;
 static char togglestat[5];
 
-static void beforerequest(WebKitWebView *w, WebKitWebFrame *f,
-		WebKitWebResource *r, WebKitNetworkRequest *req,
-		WebKitNetworkResponse *resp, gpointer d);
+/*static void beforerequest(WebKitWebView     *web_view,
+               WebKitWebResource *resource,
+               WebKitURIRequest  *request,
+               Client *c);
+*/
 static char *buildpath(const char *path);
-static gboolean buttonrelease(WebKitWebView *web, GdkEventButton *e,
-		GList *gl);
+static void buttonrelease(WebKitWebView *web_view, WebKitHitTestResult *hit_test_result,
+               guint modifiers, Client *c);
 static void cleanup(void);
 static void clipboard(Client *c, const Arg *arg);
 
-static void cookiejar_changed(SoupCookieJar *self, SoupCookie *old_cookie,
+/*static void cookiejar_changed(SoupCookieJar *self, SoupCookie *old_cookie,
 		SoupCookie *new_cookie);
 static void cookiejar_finalize(GObject *self);
 static SoupCookieJar *cookiejar_new(const char *filename, gboolean read_only);
 static void cookiejar_set_property(GObject *self, guint prop_id,
-		const GValue *value, GParamSpec *pspec);
+		const GValue *value, GParamSpec *pspec);*/
 
 static char *copystr(char **str, const char *src);
-static WebKitWebView *createwindow(WebKitWebView *v, WebKitWebFrame *f,
-		Client *c);
-static gboolean decidedownload(WebKitWebView *v, WebKitWebFrame *f,
-		WebKitNetworkRequest *r, gchar *m,  WebKitWebPolicyDecision *p,
+static WebKitWebView *createwindow(WebKitWebView *web_view, WebKitNavigationAction *navigation_action,
 		Client *c);
-static gboolean decidewindow(WebKitWebView *v, WebKitWebFrame *f,
-		WebKitNetworkRequest *r, WebKitWebNavigationAction *n,
-		WebKitWebPolicyDecision *p, Client *c);
+static gboolean decidedownloadwindow(WebKitWebView *web_view,
+               WebKitPolicyDecision    *decision,
+               WebKitPolicyDecisionType decision_type,
+	       Client *c);
 static void destroyclient(Client *c);
 static void destroywin(GtkWidget* w, Client *c);
 static void die(const char *errstr, ...);
 static void drawindicator(Client *c);
-static void eval(Client *c, const Arg *arg);
+//static void eval(Client *c, const Arg *arg);
 static gboolean exposeindicator(GtkWidget *w, cairo_t *cr, Client *c);
 static void find(Client *c, const Arg *arg);
 static void fullscreen(Client *c, const Arg *arg);
 static const char *getatom(Client *c, int a);
 static void gettogglestat(Client *c);
 static char *geturi(Client *c);
-static gboolean initdownload(WebKitWebView *v, WebKitDownload *o, Client *c);
+static void initializewebextensions (WebKitWebContext *context, gpointer user_data);
+static gboolean initdownload(WebKitURIRequest *req, Client *c);
 
 static void inspector(Client *c, const Arg *arg);
-static WebKitWebView *inspector_new(WebKitWebInspector *i, WebKitWebView *v,
-		Client *c);
+//static WebKitWebView *inspector_new(WebKitWebInspector *i, WebKitWebView *v,
+//		Client *c);
 static gboolean inspector_show(WebKitWebInspector *i, Client *c);
-static gboolean inspector_close(WebKitWebInspector *i, Client *c);
-static void inspector_finished(WebKitWebInspector *i, Client *c);
+static void inspector_close(WebKitWebInspector *i, Client *c);
+//static void inspector_finished(WebKitWebInspector *i, Client *c);
 
 static gboolean keypress(GtkWidget *w, GdkEventKey *ev, Client *c);
-static void linkhover(WebKitWebView *v, const char* t, const char* l,
-		Client *c);
-static void loadstatuschange(WebKitWebView *view, GParamSpec *pspec,
+static void linkhover(
+                WebKitWebView       *web_view,
+                WebKitHitTestResult *hit_test_result,
+                guint                modifiers,
 		Client *c);
+static void loadstatuschange(WebKitWebView  *web_view,
+		             WebKitLoadEvent load_event,
+			     Client *c);
 static void loaduri(Client *c, const Arg *arg);
 static void navigate(Client *c, const Arg *arg);
 static Client *newclient(void);
 static void newwindow(Client *c, const Arg *arg, gboolean noembed);
 static gchar *parseuri(const gchar *uri);
 static void pasteuri(GtkClipboard *clipboard, const char *text, gpointer d);
-static void populatepopup(WebKitWebView *web, GtkMenu *menu, Client *c);
-static void popupactivate(GtkMenuItem *menu, Client *);
+static gboolean permissionrequest (WebKitWebView           *web_view,
+               WebKitPermissionRequest *request,
+               Client *c);
+static gboolean populatepopup(WebKitWebView *web_view, WebKitContextMenu *context_menu, GdkEvent *event, WebKitHitTestResult *hit_test_result, Client *c);
+static void popupactivate(GtkAction *action, Client *);
 static void print(Client *c, const Arg *arg);
 static GdkFilterReturn processx(GdkXEvent *xevent, GdkEvent *event,
 		gpointer d);
 static void progresschange(WebKitWebView *view, GParamSpec *pspec, Client *c);
 static void reload(Client *c, const Arg *arg);
-static void resize(GtkWidget *w, GtkAllocation *a, Client *c);
 static void scroll_h(Client *c, const Arg *arg);
 static void scroll_v(Client *c, const Arg *arg);
 static void scroll(GtkAdjustment *a, const Arg *arg);
 static void setatom(Client *c, int a, const char *v);
 static void setup(void);
 static void sigchld(int unused);
-static void source(Client *c, const Arg *arg);
+//static void source(Client *c, const Arg *arg);
 static void spawn(Client *c, const Arg *arg);
 static void stop(Client *c, const Arg *arg);
-static void titlechange(WebKitWebView *v, WebKitWebFrame *frame,
-		const char *title, Client *c);
+static void titlechange(WebKitWebView *v, GParamSpec *pspec, Client *c);
 static void toggle(Client *c, const Arg *arg);
 static void update(Client *c);
 static void updatewinid(Client *c);
 static void usage(void);
-static void windowobjectcleared(GtkWidget *w, WebKitWebFrame *frame,
-		JSContextRef js, JSObjectRef win, Client *c);
+//static void windowobjectcleared(WebKitScriptWorld *world,
+//               	WebKitWebPage     *page,
+//               	WebKitFrame       *frame,
+//		Client *c);
 static void zoom(Client *c, const Arg *arg);
 
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
+/*
 static void
-beforerequest(WebKitWebView *w, WebKitWebFrame *f, WebKitWebResource *r,
-		WebKitNetworkRequest *req, WebKitNetworkResponse *resp,
-		gpointer d) {
-	const gchar *uri = webkit_network_request_get_uri(req);
+beforerequest(WebKitWebView     *web_view,
+               WebKitWebResource *resource,
+               WebKitURIRequest  *request,
+	       Client *c) {
+	const gchar *uri = webkit_uri_request_get_uri(request);
 	if(g_str_has_suffix(uri, "/favicon.ico"))
-		webkit_network_request_set_uri(req, "about:blank");
-}
+		webkit_uri_request_set_uri(request, "about:blank");
+}*/
 
 static char *
 buildpath(const char *path) {
@@ -223,22 +233,16 @@
 	return apath;
 }
 
-static gboolean
-buttonrelease(WebKitWebView *web, GdkEventButton *e, GList *gl) {
-	WebKitHitTestResultContext context;
-	WebKitHitTestResult *result = webkit_web_view_get_hit_test_result(web,
-			e);
+static void
+buttonrelease(WebKitWebView *web_view, WebKitHitTestResult *hit_test_result, guint modifiers, Client *c) {
 	Arg arg;
 
-	g_object_get(result, "context", &context, NULL);
-	if(context & WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK) {
-		if(e->button == 2) {
-			g_object_get(result, "link-uri", &arg.v, NULL);
-			newwindow(NULL, &arg, e->state & GDK_CONTROL_MASK);
-			return true;
+	if(webkit_hit_test_result_context_is_link(hit_test_result)) {
+		if(modifiers == GDK_BUTTON2_MASK) {
+			arg.v = webkit_hit_test_result_get_link_uri(hit_test_result);
+			newwindow(NULL, &arg, modifiers & GDK_CONTROL_MASK);
 		}
 	}
-	return false;
 }
 
 static void
@@ -250,7 +254,7 @@
 	g_free(stylefile);
 }
 
-static void
+/*static void
 cookiejar_changed(SoupCookieJar *self, SoupCookie *old_cookie,
 		SoupCookie *new_cookie) {
 	flock(COOKIEJAR(self)->lock, LOCK_EX);
@@ -298,10 +302,10 @@
 	G_OBJECT_CLASS(cookiejar_parent_class)->set_property(self, prop_id,
 			value, pspec);
 	flock(COOKIEJAR(self)->lock, LOCK_UN);
-}
+}*/
 
 static void
-evalscript(JSContextRef js, char *script, char* scriptname) {
+evalscript(JSGlobalContextRef js, char *script, char* scriptname) {
 	JSStringRef jsscript, jsscriptname;
 	JSValueRef exception = NULL;
 
@@ -313,14 +317,14 @@
 }
 
 static void
-runscript(const char * filename, WebKitWebFrame *frame) {
+runscript(const char * filename, WebKitWebView *view) {
 	char *script;
 	GError *error;
 
 	if (filename == NULL || filename[0] == '\0')
 		return;
 	if(g_file_get_contents(filename, &script, NULL, &error)) {
-		evalscript(webkit_web_frame_get_global_context(frame), script, scriptfile);
+		evalscript(webkit_web_view_get_javascript_global_context(view), script, scriptfile);
 	}
 }
 
@@ -347,33 +351,61 @@
 }
 
 static WebKitWebView *
-createwindow(WebKitWebView  *v, WebKitWebFrame *f, Client *c) {
+createwindow(WebKitWebView *web_view, WebKitNavigationAction *navigation_action, Client *c) {
 	Client *n = newclient();
 	return n->view;
 }
 
-static gboolean
-decidedownload(WebKitWebView *v, WebKitWebFrame *f, WebKitNetworkRequest *r,
-		gchar *m,  WebKitWebPolicyDecision *p, Client *c) {
-	if(!webkit_web_view_can_show_mime_type(v, m)) {
-		webkit_web_policy_decision_download(p);
-		return TRUE;
-	}
-	return FALSE;
-}
-
-static gboolean
-decidewindow(WebKitWebView *view, WebKitWebFrame *f, WebKitNetworkRequest *r,
-		WebKitWebNavigationAction *n, WebKitWebPolicyDecision *p,
-		Client *c) {
-	Arg arg;
+static gboolean 
+decidedownloadwindow(WebKitWebView *web_view,
+               WebKitPolicyDecision    *decision,
+               WebKitPolicyDecisionType decision_type,
+	       Client *c) {
+
+	switch(decision_type) {
+		case WEBKIT_POLICY_DECISION_TYPE_RESPONSE:
+			{
+				WebKitResponsePolicyDecision *p = WEBKIT_RESPONSE_POLICY_DECISION(decision);
+				if (!webkit_response_policy_decision_is_mime_type_supported(p))
+				{
+					webkit_policy_decision_ignore((WebKitPolicyDecision*)p);
+					initdownload(webkit_response_policy_decision_get_request(p), c);
+					return TRUE;
+				}
+			}
+			break;
+		case WEBKIT_POLICY_DECISION_TYPE_NAVIGATION_ACTION:
+			{
+				WebKitNavigationPolicyDecision *p = WEBKIT_NAVIGATION_POLICY_DECISION(decision);
+				if (webkit_navigation_policy_decision_get_navigation_action(p) ==  WEBKIT_NAVIGATION_TYPE_LINK_CLICKED) {
+					Arg arg;
+					webkit_policy_decision_ignore((WebKitPolicyDecision*)p);
+					WebKitNavigationAction *na = webkit_navigation_policy_decision_get_navigation_action(p);
+					WebKitURIRequest *ur = webkit_navigation_action_get_request(na);
+					arg.v = (void *)webkit_uri_request_get_uri(ur);
+					newwindow(NULL, &arg, 0);
+					return TRUE;
+				}
+			}
+			break;
+		case WEBKIT_POLICY_DECISION_TYPE_NEW_WINDOW_ACTION:
+			{
+				WebKitNavigationPolicyDecision *p = (WebKitNavigationPolicyDecision*)WEBKIT_NAVIGATION_POLICY_DECISION(decision);
+				if (webkit_navigation_policy_decision_get_navigation_action((WebKitNavigationPolicyDecision*)p) ==  WEBKIT_NAVIGATION_TYPE_LINK_CLICKED) {
+					Arg arg;
+					webkit_policy_decision_ignore((WebKitPolicyDecision*)p);
+					WebKitNavigationAction *na = webkit_navigation_policy_decision_get_navigation_action(p);
+					WebKitURIRequest *ur = webkit_navigation_action_get_request(na);
+					arg.v = (void *)webkit_uri_request_get_uri(ur);
+					newwindow(NULL, &arg, 0);
+					return TRUE;
+				}
+			}
+			break;
 
-	if(webkit_web_navigation_action_get_reason(n) ==
-			WEBKIT_WEB_NAVIGATION_REASON_LINK_CLICKED) {
-		webkit_web_policy_decision_ignore(p);
-		arg.v = (void *)webkit_network_request_get_uri(r);
-		newwindow(NULL, &arg, 0);
-		return TRUE;
+		default:
+			;
+			break;
 	}
 	return FALSE;
 }
@@ -423,7 +455,7 @@
 	cairo_t *cr;
 	char *colorname;
 	GtkWidget *w;
-	GdkColor fg;
+	GdkRGBA fg;
 	GtkAllocation alloc;
 
 	max = 0xffff;
@@ -448,7 +480,7 @@
 		}
 	}
 
-	gdk_color_parse(colorname, &fg);
+	gdk_rgba_parse(&fg, colorname);
 	cairo_rectangle(cr, 0, 0, alloc.width, alloc.height);
 	cairo_fill(cr);
 	cairo_set_source_rgb(cr, fg.red/max, fg.green/max, fg.blue/max);
@@ -466,10 +498,12 @@
 static void
 find(Client *c, const Arg *arg) {
 	const char *s;
+	WebKitFindController *fc;
 
+	fc = webkit_web_view_get_find_controller(c->view);
 	s = getatom(c, AtomFind);
 	gboolean forward = *(gboolean *)arg;
-	webkit_web_view_search_text(c->view, s, FALSE, forward, TRUE);
+	webkit_find_controller_search(fc, s, WEBKIT_FIND_OPTIONS_CASE_INSENSITIVE | WEBKIT_FIND_OPTIONS_WRAP_AROUND | (forward ? 0 : WEBKIT_FIND_OPTIONS_BACKWARDS), 1000);
 }
 
 static void
@@ -511,13 +545,22 @@
 }
 
 static gboolean
-initdownload(WebKitWebView *view, WebKitDownload *o, Client *c) {
+initdownload(WebKitURIRequest *req, Client *c) {
 	Arg arg;
 
 	updatewinid(c);
-	arg = (Arg)DOWNLOAD((char *)webkit_download_get_uri(o), geturi(c));
+	arg = (Arg)DOWNLOAD((char *)webkit_uri_request_get_uri(req), geturi(c));
 	spawn(c, &arg);
-	return FALSE;
+	return TRUE;
+}
+
+
+static
+void initializewebextensions (WebKitWebContext *context,
+               gpointer          user_data) {
+	static guint32 unique_id = 0;
+	webkit_web_context_set_web_extensions_directory(context, SURF_WEB_EXTENSIONS_DIR);
+        webkit_web_context_set_web_extensions_initialization_user_data(context, g_variant_new_uint32(unique_id++));
 }
 
 static void
@@ -529,45 +572,28 @@
 	}
 }
 
+
+/*
 static WebKitWebView *
 inspector_new(WebKitWebInspector *i, WebKitWebView *v, Client *c) {
 	return WEBKIT_WEB_VIEW(webkit_web_view_new());
-}
+}*/
 
 static gboolean
 inspector_show(WebKitWebInspector *i, Client *c) {
-	WebKitWebView *w;
-
-	if(c->isinspecting)
-		return false;
-
-	w = webkit_web_inspector_get_web_view(i);
-	gtk_paned_pack2(GTK_PANED(c->pane), GTK_WIDGET(w), TRUE, TRUE);
-	gtk_widget_show(GTK_WIDGET(w));
 	c->isinspecting = true;
-
-	return true;
+	return FALSE;
 }
 
-static gboolean
-inspector_close(WebKitWebInspector *i, Client *c) {
-	GtkWidget *w;
-
-	if(!c->isinspecting)
-		return false;
-
-	w = GTK_WIDGET(webkit_web_inspector_get_web_view(i));
-	gtk_widget_hide(w);
-	gtk_widget_destroy(w);
+static void
+inspector_close(WebKitWebInspector *inspector, Client *c) {
 	c->isinspecting = false;
-
-	return true;
 }
 
-static void
+/*static void
 inspector_finished(WebKitWebInspector *i, Client *c) {
 	g_free(c->inspector);
-}
+}*/
 
 static gboolean
 keypress(GtkWidget* w, GdkEventKey *ev, Client *c) {
@@ -588,7 +614,8 @@
 }
 
 static void
-linkhover(WebKitWebView *v, const char* t, const char* l, Client *c) {
+linkhover(WebKitWebView *web_view, WebKitHitTestResult *hit_test_result, guint modifiers, Client *c) {
+	const gchar* l = webkit_hit_test_result_get_link_uri(hit_test_result);
 	if(l) {
 		c->linkhover = copystr(&c->linkhover, l);
 	} else if(c->linkhover) {
@@ -599,23 +626,19 @@
 }
 
 static void
-loadstatuschange(WebKitWebView *view, GParamSpec *pspec, Client *c) {
-	WebKitWebFrame *frame;
-	WebKitWebDataSource *src;
-	WebKitNetworkRequest *request;
-	SoupMessage *msg;
+loadstatuschange(
+	       WebKitWebView  *web_view,
+               WebKitLoadEvent load_event,
+	       Client *c) {
+	GTlsCertificate *certificate;
+	GTlsCertificateFlags errors;
 	char *uri;
 
-	switch(webkit_web_view_get_load_status (c->view)) {
+	switch(load_event) {
 	case WEBKIT_LOAD_COMMITTED:
 		uri = geturi(c);
 		if(strstr(uri, "https://") == uri) {
-			frame = webkit_web_view_get_main_frame(c->view);
-			src = webkit_web_frame_get_data_source(frame);
-			request = webkit_web_data_source_get_request(src);
-			msg = webkit_network_request_get_message(request);
-			c->sslfailed = soup_message_get_flags(msg)
-			               ^ SOUP_MESSAGE_CERTIFICATE_TRUSTED;
+			c->sslfailed = ! webkit_web_view_get_tls_info(web_view, &certificate, &errors);
 		}
 		setatom(c, AtomUri, uri);
 		PAGE_LOAD_COMMITTED(c);
@@ -648,7 +671,7 @@
 		u = parseuri(uri);
 	}
 
-	updatewinid(c);
+	//updatewinid(c);
 	/* prevents endless loop */
 	if(c->uri && strcmp(u, c->uri) == 0) {
 		reload(c, &a);
@@ -656,22 +679,25 @@
 		webkit_web_view_load_uri(c->view, u);
 		c->progress = 0;
 		c->title = copystr(&c->title, u);
-		g_free(u);
 		update(c);
+		g_free(u);
 	}
 }
 
 static void
 navigate(Client *c, const Arg *arg) {
 	int steps = *(int *)arg;
-	webkit_web_view_go_back_or_forward(c->view, steps);
+	if (steps > 0)
+		webkit_web_view_go_back(c->view);
+	else
+		webkit_web_view_go_forward(c->view);
 }
 
 static Client *
 newclient(void) {
 	Client *c;
-	WebKitWebSettings *settings;
-	WebKitWebFrame *frame;
+	WebKitWebContext *context;
+	WebKitSettings *settings;
 	GdkGeometry hints = { 1, 1 };
 	char *uri, *ua;
 
@@ -707,10 +733,9 @@
 			G_CALLBACK(keypress), c);
 
 	/* Pane */
-	c->pane = gtk_vpaned_new();
-
+	c->pane = gtk_paned_new(GTK_ORIENTATION_VERTICAL);
 	/* VBox */
-	c->vbox = gtk_vbox_new(FALSE, 0);
+	c->vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
 	gtk_paned_pack1(GTK_PANED(c->pane), c->vbox, TRUE, TRUE);
 
 	/* Scrolled Window */
@@ -718,44 +743,54 @@
 	gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(c->scroll),
 			GTK_POLICY_NEVER, GTK_POLICY_NEVER);
 
+	WebKitWebContext *defcontext = webkit_web_context_get_default();
+	webkit_web_context_set_process_model(defcontext, WEBKIT_PROCESS_MODEL_MULTIPLE_SECONDARY_PROCESSES);
+	webkit_web_context_set_cache_model(defcontext, WEBKIT_CACHE_MODEL_WEB_BROWSER);
+	g_signal_connect(G_OBJECT(defcontext),
+			"initialize-web-extensions",
+			G_CALLBACK(initializewebextensions), NULL);
+
 	/* Webview */
 	c->view = WEBKIT_WEB_VIEW(webkit_web_view_new());
-	g_signal_connect(G_OBJECT(c->view),
-			"title-changed",
+	context = webkit_web_view_get_context(c->view);
+	g_signal_connect(G_OBJECT(c->view), //
+			"notify::title",
 			G_CALLBACK(titlechange), c);
-	g_signal_connect(G_OBJECT(c->view),
-			"hovering-over-link",
+	g_signal_connect(G_OBJECT(c->view), //
+			"mouse-target-changed",
 			G_CALLBACK(linkhover), c);
 	g_signal_connect(G_OBJECT(c->view),
-			"create-web-view",
+			"create",
 			G_CALLBACK(createwindow), c);
+	g_signal_connect(G_OBJECT(c->view), //
+			"decide-policy",
+			G_CALLBACK(decidedownloadwindow), c);
+	//g_signal_connect(G_OBJECT(c->view),
+	//		"window-object-cleared",
+	//		G_CALLBACK(windowobjectcleared), c);
 	g_signal_connect(G_OBJECT(c->view),
-			"new-window-policy-decision-requested",
-			G_CALLBACK(decidewindow), c);
-	g_signal_connect(G_OBJECT(c->view),
-			"mime-type-policy-decision-requested",
-			G_CALLBACK(decidedownload), c);
-	g_signal_connect(G_OBJECT(c->view),
-			"window-object-cleared",
-			G_CALLBACK(windowobjectcleared), c);
-	g_signal_connect(G_OBJECT(c->view),
-			"notify::load-status",
+			"load-changed",
 			G_CALLBACK(loadstatuschange), c);
-	g_signal_connect(G_OBJECT(c->view),
+	g_signal_connect(G_OBJECT(c->view), //
 			"notify::progress",
 			G_CALLBACK(progresschange), c);
-	g_signal_connect(G_OBJECT(c->view),
-			"download-requested",
-			G_CALLBACK(initdownload), c);
-	g_signal_connect(G_OBJECT(c->view),
-			"button-release-event",
+	//g_signal_connect(G_OBJECT(c->view),
+	//		"decide-destination",
+	//		G_CALLBACK(initdownload), c);
+	g_signal_connect(G_OBJECT(c->view), //
+			"mouse-target-changed",
 			G_CALLBACK(buttonrelease), c);
-	g_signal_connect(G_OBJECT(c->view),
-			"populate-popup",
+	g_signal_connect(G_OBJECT(c->view), //
+			"context-menu",
 			G_CALLBACK(populatepopup), c);
-	g_signal_connect(G_OBJECT(c->view),
-			"resource-request-starting",
-			G_CALLBACK(beforerequest), c);
+	//g_signal_connect(G_OBJECT(c->view),
+	//		"resource-load-started",
+	//		G_CALLBACK(beforerequest), c);
+	g_signal_connect(G_OBJECT(c->view), //
+			"permission-request",
+			G_CALLBACK(permissionrequest), c);
+
+	
 
 	/* Indicator */
 	c->indicator = gtk_drawing_area_new();
@@ -784,21 +819,25 @@
 			GDK_HINT_MIN_SIZE);
 	gdk_window_set_events(gtk_widget_get_window(GTK_WIDGET(c->win)), GDK_ALL_EVENTS_MASK);
 	gdk_window_add_filter(gtk_widget_get_window(GTK_WIDGET(c->win)), processx, c);
-	webkit_web_view_set_full_content_zoom(c->view, TRUE);
+	//webkit_web_view_set_full_content_zoom(c->view, TRUE);
 
-	frame = webkit_web_view_get_main_frame(c->view);
-	runscript(scriptfile, frame);
+	WebKitCookieManager *cookiemanager = webkit_web_context_get_cookie_manager(context);
+	webkit_cookie_manager_set_persistent_storage(cookiemanager, cookiefile, WEBKIT_COOKIE_PERSISTENT_STORAGE_TEXT);
+	webkit_cookie_manager_set_accept_policy(cookiemanager, WEBKIT_COOKIE_POLICY_ACCEPT_ALWAYS);
+	runscript(scriptfile, c->view);
 	settings = webkit_web_view_get_settings(c->view);
 	if(!(ua = getenv("SURF_USERAGENT")))
 		ua = useragent;
 	g_object_set(G_OBJECT(settings), "user-agent", ua, NULL);
 	uri = g_strconcat("file://", stylefile, NULL);
-	g_object_set(G_OBJECT(settings), "user-stylesheet-uri", uri, NULL);
+	//g_object_set(G_OBJECT(settings), "user-stylesheet-uri", uri, NULL);
 	g_object_set(G_OBJECT(settings), "auto-load-images", loadimages,
 			NULL);
 	g_object_set(G_OBJECT(settings), "enable-plugins", enableplugins,
 			NULL);
-	g_object_set(G_OBJECT(settings), "enable-scripts", enablescripts,
+	g_object_set(G_OBJECT(settings), "enable-javascript", enablescripts,
+			NULL);
+	g_object_set(G_OBJECT(settings), "enable-webgl", TRUE,
 			NULL);
 	g_object_set(G_OBJECT(settings), "enable-spatial-navigation",
 			enablespatialbrowsing, NULL);
@@ -806,18 +845,42 @@
 			enableinspector, NULL);
 	g_object_set(G_OBJECT(settings), "enable-smooth-scrolling",
 			TRUE, NULL);
+        g_object_set(G_OBJECT(settings), "enable-accelerated-2d-canvas",
+                        TRUE, NULL);
+	webkit_web_context_set_tls_errors_policy(context, strictssl ? WEBKIT_TLS_ERRORS_POLICY_FAIL : WEBKIT_TLS_ERRORS_POLICY_IGNORE);
+
+	
+	WebKitUserContentManager *contentmanager = webkit_web_view_get_user_content_manager(c->view);
+	char* source;
+	/*
+	WebKitUserScript *script;
+	if(g_file_get_contents(scriptfile, &source, NULL, NULL)) {
+		script = webkit_user_script_new(source, WEBKIT_USER_CONTENT_INJECT_ALL_FRAMES, WEBKIT_USER_SCRIPT_INJECT_AT_DOCUMENT_END, NULL, NULL);
+		webkit_user_content_manager_add_script(contentmanager, script);
+		g_free(source);
+		webkit_user_script_unref(script);
+	}
+	*/
+	
+	WebKitUserStyleSheet *style;
+	if(g_file_get_contents(stylefile, &source, NULL, NULL)) {
+		style = webkit_user_style_sheet_new(source, WEBKIT_USER_CONTENT_INJECT_ALL_FRAMES, WEBKIT_USER_STYLE_LEVEL_USER, NULL, NULL);
+		webkit_user_content_manager_add_style_sheet(contentmanager, style);
+		g_free(source);
+		webkit_user_style_sheet_unref(style);
+	}
 
 	if(enableinspector) {
 		c->inspector = WEBKIT_WEB_INSPECTOR(
 				webkit_web_view_get_inspector(c->view));
-		g_signal_connect(G_OBJECT(c->inspector), "inspect-web-view",
-				G_CALLBACK(inspector_new), c);
-		g_signal_connect(G_OBJECT(c->inspector), "show-window",
+		//g_signal_connect(G_OBJECT(c->inspector), "inspect-web-view",
+		//		G_CALLBACK(inspector_new), c);
+		g_signal_connect(G_OBJECT(c->inspector), "attach",
 				G_CALLBACK(inspector_show), c);
-		g_signal_connect(G_OBJECT(c->inspector), "close-window",
+		g_signal_connect(G_OBJECT(c->inspector), "closed",
 				G_CALLBACK(inspector_close), c);
-		g_signal_connect(G_OBJECT(c->inspector), "finished",
-				G_CALLBACK(inspector_finished), c);
+		//g_signal_connect(G_OBJECT(c->inspector), "finished",
+		//		G_CALLBACK(inspector_finished), c);
 		c->isinspecting = false;
 	}
 
@@ -826,8 +889,10 @@
 	setatom(c, AtomFind, "");
 	setatom(c, AtomUri, "about:blank");
 	setatom(c, AtomScriptFile, "");
-	if(hidebackground)
-		webkit_web_view_set_transparent(c->view, TRUE);
+	if(hidebackground) {
+		static const GdkRGBA transparent = {.0, .0, .0, .0};
+		webkit_web_view_set_background_color(c->view, &transparent);
+	}
 
 	c->title = NULL;
 	c->next = clients;
@@ -874,19 +939,38 @@
 	spawn(NULL, &a);
 }
 
-static void
-populatepopup(WebKitWebView *web, GtkMenu *menu, Client *c) {
-	GList *items = gtk_container_get_children(GTK_CONTAINER(menu));
+static gboolean permissionrequest (WebKitWebView           *web_view,
+               WebKitPermissionRequest *request,
+               Client *c)
+{
+	if (WEBKIT_IS_GEOLOCATION_PERMISSION_REQUEST(request)) {
+		if(enablegeolocation) {
+			webkit_permission_request_allow(request);
+		} else {
+			webkit_permission_request_deny(request);
+		}
+		return TRUE;
+	}
+	return FALSE;
+}
+
+static gboolean
+populatepopup(WebKitWebView *web_view, WebKitContextMenu *context_menu, GdkEvent *event, WebKitHitTestResult *hit_test_result, Client *c) {
+
+	GList *items = webkit_context_menu_get_items(context_menu);
 
 	for(GList *l = items; l; l = l->next) {
-		g_signal_connect(l->data, "activate", G_CALLBACK(popupactivate), c);
+		if (!webkit_context_menu_item_is_separator(l->data)) {
+			GtkAction *action = webkit_context_menu_item_get_action(l->data);
+			g_signal_connect(action, "activate", G_CALLBACK(popupactivate), c);
+		}
 	}
 
-	g_list_free(items);
+	return FALSE;
 }
 
 static void
-popupactivate(GtkMenuItem *menu, Client *c) {
+popupactivate(GtkAction *action, Client *c) {
 	/*
 	 * context-menu-action-2000	open link
 	 * context-menu-action-1	open link in window
@@ -898,18 +982,14 @@
 	 * context-menu-action-12	stop
 	 */
 
-	GtkAction *a = NULL;
 	const char *name;
 	GtkClipboard *prisel;
 
-	a = gtk_activatable_get_related_action(GTK_ACTIVATABLE(menu));
-	if(a == NULL)
-		return;
-
-	name = gtk_action_get_name(a);
+	name = g_action_get_name((GAction *)action);
 	if(!g_strcmp0(name, "context-menu-action-3")) {
 		prisel = gtk_clipboard_get(GDK_SELECTION_PRIMARY);
-		gtk_clipboard_set_text(prisel, c->linkhover, -1);
+		if (c->linkhover)
+			gtk_clipboard_set_text(prisel, c->linkhover, -1);
 	}
 }
 
@@ -936,7 +1016,7 @@
 
 static void
 print(Client *c, const Arg *arg) {
-	webkit_web_frame_print(webkit_web_view_get_main_frame(c->view));
+	webkit_print_operation_print(webkit_print_operation_new(c->view));
 }
 
 static GdkFilterReturn
@@ -944,7 +1024,6 @@
 	Client *c = (Client *)d;
 	XPropertyEvent *ev;
 	Arg arg;
-	WebKitWebFrame *frame;
 
 	if(((XEvent *)e)->type == PropertyNotify) {
 		ev = &((XEvent *)e)->xproperty;
@@ -961,8 +1040,7 @@
 			}
 			else if(ev->atom == atoms[AtomScriptFile]) {
 				arg.v = getatom(c, AtomScriptFile);
-				frame = webkit_web_view_get_main_frame(c->view);
-				runscript(arg.v, frame);
+				runscript(arg.v, c->view);
 				return GDK_FILTER_REMOVE;
 			}
 		}
@@ -972,7 +1050,7 @@
 
 static void
 progresschange(WebKitWebView *view, GParamSpec *pspec, Client *c) {
-	c->progress = webkit_web_view_get_progress(c->view) * 100;
+	c->progress = webkit_web_view_get_estimated_load_progress(c->view) * 100;
 	update(c);
 }
 
@@ -1031,9 +1109,9 @@
 static void
 setup(void) {
 	char *proxy;
-	char *new_proxy;
-	SoupURI *puri;
-	SoupSession *s;
+	//char *new_proxy;
+	//SoupURI *puri;
+	//SoupSession *s;
 
 	/* clean up any zombies immediately */
 	sigchld(0);
@@ -1053,25 +1131,25 @@
 	stylefile = buildpath(stylefile);
 
 	/* request handler */
-	s = webkit_get_default_session();
+	//s = webkit_get_default_session();
 
 	/* cookie jar */
-	soup_session_add_feature(s,
-			SOUP_SESSION_FEATURE(cookiejar_new(cookiefile,
-					FALSE)));
+	//soup_session_add_feature(s,
+	//		SOUP_SESSION_FEATURE(cookiejar_new(cookiefile,
+	//				FALSE)));
 
 	/* ssl */
-	g_object_set(G_OBJECT(s), "ssl-ca-file", cafile, NULL);
-	g_object_set(G_OBJECT(s), "ssl-strict", strictssl, NULL);
-
+	//g_object_set(G_OBJECT(s), "ssl-ca-file", cafile, NULL);
+	//g_object_set(G_OBJECT(s), "ssl-strict", strictssl, NULL);
+	
 	/* proxy */
 	if((proxy = getenv("http_proxy")) && strcmp(proxy, "")) {
-		new_proxy = g_strrstr(proxy, "http://") ? g_strdup(proxy) :
-			g_strdup_printf("http://%s", proxy);
-		puri = soup_uri_new(new_proxy);
-		g_object_set(G_OBJECT(s), "proxy-uri", puri, NULL);
-		soup_uri_free(puri);
-		g_free(new_proxy);
+		//new_proxy = g_strrstr(proxy, "http://") ? g_strdup(proxy) :
+		//	g_strdup_printf("http://%s", proxy);
+		//puri = soup_uri_new(new_proxy);
+		//g_object_set(G_OBJECT(s), "proxy-uri", puri, NULL);
+		//soup_uri_free(puri);
+		//g_free(new_proxy);
 		usingproxy = 1;
 	}
 }
@@ -1083,15 +1161,16 @@
 	while(0 < waitpid(-1, NULL, WNOHANG));
 }
 
+/*
 static void
 source(Client *c, const Arg *arg) {
 	Arg a = { .b = FALSE };
 	gboolean s;
 
-	s = webkit_web_view_get_view_source_mode(c->view);
-	webkit_web_view_set_view_source_mode(c->view, !s);
+	s = webkit_web_view_get_view_mode(c->view);
+	webkit_web_view_set_view_mode(c->view, !s);
 	reload(c, &a);
-}
+}*/
 
 static void
 spawn(Client *c, const Arg *arg) {
@@ -1106,12 +1185,13 @@
 	}
 }
 
+
+/*
 static void
 eval(Client *c, const Arg *arg) {
-	WebKitWebFrame *frame = webkit_web_view_get_main_frame(c->view);
-	evalscript(webkit_web_frame_get_global_context(frame),
+	evalscript(webkit_web_view_get_javascript_global_context(c->view),
 			((char **)arg->v)[0], "");
-}
+}*/
 
 static void
 stop(Client *c, const Arg *arg) {
@@ -1119,14 +1199,15 @@
 }
 
 static void
-titlechange(WebKitWebView *v, WebKitWebFrame *f, const char *t, Client *c) {
+titlechange(WebKitWebView *v, GParamSpec *pspec, Client *c) {
+	const gchar *t = webkit_web_view_get_title (v);
 	c->title = copystr(&c->title, t);
 	update(c);
 }
 
 static void
 toggle(Client *c, const Arg *arg) {
-	WebKitWebSettings *settings;
+	WebKitSettings *settings;
 	char *name = (char *)arg->v;
 	gboolean value;
 	Arg a = { .b = FALSE };
@@ -1141,7 +1222,7 @@
 static void
 gettogglestat(Client *c){
 	gboolean value;
-	WebKitWebSettings *settings = webkit_web_view_get_settings(c->view);
+	WebKitSettings *settings = webkit_web_view_get_settings(c->view);
 
 	g_object_get(G_OBJECT(settings), "enable-caret-browsing",
 			&value, NULL);
@@ -1150,7 +1231,7 @@
 	g_object_get(G_OBJECT(settings), "auto-load-images", &value, NULL);
 	togglestat[1] = value? 'I': 'i';
 
-	g_object_get(G_OBJECT(settings), "enable-scripts", &value, NULL);
+	g_object_get(G_OBJECT(settings), "enable-javascript", &value, NULL);
 	togglestat[2] = value? 'S': 's';
 
 	g_object_get(G_OBJECT(settings), "enable-plugins", &value, NULL);
@@ -1193,21 +1274,30 @@
 		" [-t stylefile] [-u useragent] [uri]\n", basename(argv0));
 }
 
+/*
 static void
-windowobjectcleared(GtkWidget *w, WebKitWebFrame *frame, JSContextRef js,
-		JSObjectRef win, Client *c) {
+windowobjectcleared(WebKitScriptWorld *world,
+               WebKitWebPage     *page,
+               WebKitFrame       *frame,
+	       Client *c) {
 	runscript(scriptfile, frame);
-}
+}*/
 
 static void
 zoom(Client *c, const Arg *arg) {
+	gdouble zoom_level;
 	c->zoomed = TRUE;
 	if(arg->i < 0) {
 		/* zoom out */
-		webkit_web_view_zoom_out(c->view);
+		zoom_level = webkit_web_view_get_zoom_level(c->view);
+		zoom_level -= 0.1;
+		if (zoom_level >= 0)
+			webkit_web_view_set_zoom_level(c->view, zoom_level);
 	} else if(arg->i > 0) {
 		/* zoom in */
-		webkit_web_view_zoom_in(c->view);
+		zoom_level = webkit_web_view_get_zoom_level(c->view);
+		zoom_level += 0.1;
+		webkit_web_view_set_zoom_level(c->view, zoom_level);
 	} else {
 		/* reset */
 		c->zoomed = FALSE;
@@ -1244,6 +1334,9 @@
 	case 's':
 		enablescripts = 0;
 		break;
+	case 'S':
+		enablescripts = 1;
+		break;
 	case 't':
 		stylefile = EARGF(usage());
 		break;
--- /dev/null	2015-05-15 14:45:16.249058455 -0700
+++ surfext.c	2015-05-15 20:10:07.513539591 -0700
@@ -0,0 +1,93 @@
+#include <signal.h>
+#include <X11/X.h>
+#include <X11/Xatom.h>
+#include <gtk/gtk.h>
+#include <gdk/gdkx.h>
+#include <gdk/gdk.h>
+#include <gdk/gdkkeysyms.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <unistd.h>
+#include <limits.h>
+#include <stdlib.h>
+#include <stdio.h>
+//#include <webkit2/webkit2.h>
+//#include <webkit2/WebKitWebExtension.h>
+#include <glib/gstdio.h>
+#include <JavaScriptCore/JavaScript.h>
+#include <sys/file.h>
+#include <libgen.h>
+#include <stdarg.h>
+#include <webkit2/webkit-web-extension.h>
+#include <gmodule.h>
+
+static char *scriptfile     = "~/.surf/script.js";
+
+static
+void windowobjectcleared (WebKitScriptWorld *world,
+               WebKitWebPage     *page,
+               WebKitFrame       *frame,
+               gpointer           user_data);
+
+static void
+evalscript(JSGlobalContextRef js, char *script, char* scriptname) {
+	JSStringRef jsscript, jsscriptname;
+	JSValueRef exception = NULL;
+
+	jsscript = JSStringCreateWithUTF8CString(script);
+	jsscriptname = JSStringCreateWithUTF8CString(scriptname);
+	JSEvaluateScript(js, jsscript, JSContextGetGlobalObject(js), jsscriptname, 0, &exception);
+	JSStringRelease(jsscript);
+	JSStringRelease(jsscriptname);
+}
+
+static void
+runscript(const char * filename, JSGlobalContextRef ref) {
+	char *script;
+	GError *error;
+
+	if (filename == NULL || filename[0] == '\0')
+		return;
+	if(g_file_get_contents(filename, &script, NULL, &error)) {
+		evalscript(ref, script, scriptfile);
+	}
+}
+
+static void
+web_page_created_callback (WebKitWebExtension *extension,
+                           WebKitWebPage      *web_page,
+                           gpointer            user_data)
+{
+    g_print ("Page %ld created for %s\n", 
+             webkit_web_page_get_id (web_page),
+             webkit_web_page_get_uri (web_page));
+}
+
+G_MODULE_EXPORT void
+webkit_web_extension_initialize (WebKitWebExtension *wk_extension)
+{
+  g_warning ("Error initializing web extension: user data not set");
+}
+
+G_MODULE_EXPORT void
+webkit_web_extension_initialize_with_user_data(WebKitWebExtension *extension,
+                                GVariant *user_data)
+{
+    g_signal_connect (extension, "page-created", 
+                      G_CALLBACK (web_page_created_callback), 
+                      NULL);
+    g_signal_connect (webkit_script_world_get_default (), "window-object-cleared", 
+                      G_CALLBACK (windowobjectcleared), 
+                      NULL);
+}
+
+static
+void windowobjectcleared (WebKitScriptWorld *world,
+               WebKitWebPage     *page,
+               WebKitFrame       *frame,
+               gpointer           user_data)
+{
+	JSGlobalContextRef ref = webkit_frame_get_javascript_context_for_script_world(frame, world);
+	runscript(scriptfile, ref);
+}
