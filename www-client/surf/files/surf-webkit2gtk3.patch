--- surfext.c.orig	2015-05-16 00:29:44.475397171 -0700
+++ surfext.c	2015-05-16 21:03:18.992155795 -0700
@@ -22,74 +22,13 @@
 #include <webkit2/webkit-web-extension.h>
 #include <gmodule.h>
 
-static char *scriptfile     = NULL;
-
-static
-void windowobjectcleared (WebKitScriptWorld *world,
-               WebKitWebPage     *page,
-               WebKitFrame       *frame,
-               gpointer           user_data);
-
-static void
-evalscript(JSGlobalContextRef js, char *script, char* scriptname) {
-	JSStringRef jsscript, jsscriptname;
-	JSValueRef exception = NULL;
-
-	jsscript = JSStringCreateWithUTF8CString(script);
-	jsscriptname = JSStringCreateWithUTF8CString(scriptname);
-	JSEvaluateScript(js, jsscript, JSContextGetGlobalObject(js), jsscriptname, 0, &exception);
-	JSStringRelease(jsscript);
-	JSStringRelease(jsscriptname);
-}
-
-static void
-runscript(const char * filename, JSGlobalContextRef ref) {
-	char *script;
-	GError *error;
-
-	if (filename == NULL || filename[0] == '\0')
-		return;
-	if(g_file_get_contents(filename, &script, NULL, &error)) {
-		evalscript(ref, script, scriptfile);
-	}
-}
-
-static void
-web_page_created_callback (WebKitWebExtension *extension,
-                           WebKitWebPage      *web_page,
-                           gpointer            user_data)
-{
-    g_print ("Page %ld created for %s\n", 
-             webkit_web_page_get_id (web_page),
-             webkit_web_page_get_uri (web_page));
-}
-
 G_MODULE_EXPORT void
 webkit_web_extension_initialize (WebKitWebExtension *wk_extension)
 {
-  g_warning ("Error initializing web extension: user data not set");
 }
 
 G_MODULE_EXPORT void
 webkit_web_extension_initialize_with_user_data(WebKitWebExtension *extension,
                                 GVariant *user_data)
 {	
-    scriptfile = g_variant_get_string(user_data, NULL);
-    printf(scriptfile);
-    g_signal_connect (extension, "page-created", 
-                      G_CALLBACK (web_page_created_callback), 
-                      NULL);
-    g_signal_connect (webkit_script_world_get_default (), "window-object-cleared", 
-                      G_CALLBACK (windowobjectcleared), 
-                      NULL);
-}
-
-static
-void windowobjectcleared (WebKitScriptWorld *world,
-               WebKitWebPage     *page,
-               WebKitFrame       *frame,
-               gpointer           user_data)
-{
-	JSGlobalContextRef ref = webkit_frame_get_javascript_context_for_script_world(frame, world);
-	runscript(scriptfile, ref);
 }
--- surf.c.orig	2015-05-16 00:29:37.612130562 -0700
+++ surf.c	2015-05-18 19:53:09.493258496 -0700
@@ -33,8 +33,6 @@
 
 #define LENGTH(x)               (sizeof x / sizeof x[0])
 #define CLEANMASK(mask)		(mask & (MODKEY|GDK_SHIFT_MASK))
-//#define COOKIEJAR_TYPE          (cookiejar_get_type ())
-//#define COOKIEJAR(obj)          (G_TYPE_CHECK_INSTANCE_CAST ((obj), COOKIEJAR_TYPE, CookieJar))
 
 typedef struct {
 	char *token;
@@ -74,44 +72,25 @@
 	const Arg arg;
 } Key;
 
-/*typedef struct {
-	SoupCookieJarText parent_instance;
-	int lock;
-} CookieJar;
-
-typedef struct {
-	SoupCookieJarTextClass parent_class;
-} CookieJarClass;
-
-G_DEFINE_TYPE(CookieJar, cookiejar, SOUP_TYPE_COOKIE_JAR_TEXT)*/
-
 static Display *dpy;
 static Atom atoms[AtomLast];
+static WebKitWebView *root_view;
 static Client *clients = NULL;
-static Window embed = 0;
 static gboolean showxid = FALSE;
 static char winid[64];
 static gboolean usingproxy = 0;
 static char togglestat[5];
 
-/*static void beforerequest(WebKitWebView     *web_view,
+static void beforerequest(WebKitWebView     *web_view,
                WebKitWebResource *resource,
                WebKitURIRequest  *request,
                Client *c);
-*/
 static char *buildpath(const char *path);
 static void buttonrelease(WebKitWebView *web_view, WebKitHitTestResult *hit_test_result,
                guint modifiers, Client *c);
 static void cleanup(void);
 static void clipboard(Client *c, const Arg *arg);
 
-/*static void cookiejar_changed(SoupCookieJar *self, SoupCookie *old_cookie,
-		SoupCookie *new_cookie);
-static void cookiejar_finalize(GObject *self);
-static SoupCookieJar *cookiejar_new(const char *filename, gboolean read_only);
-static void cookiejar_set_property(GObject *self, guint prop_id,
-		const GValue *value, GParamSpec *pspec);*/
-
 static char *copystr(char **str, const char *src);
 static WebKitWebView *createwindow(WebKitWebView *web_view, WebKitNavigationAction *navigation_action,
 		Client *c);
@@ -123,7 +102,6 @@
 static void destroywin(GtkWidget* w, Client *c);
 static void die(const char *errstr, ...);
 static void drawindicator(Client *c);
-//static void eval(Client *c, const Arg *arg);
 static gboolean exposeindicator(GtkWidget *w, cairo_t *cr, Client *c);
 static void find(Client *c, const Arg *arg);
 static void fullscreen(Client *c, const Arg *arg);
@@ -134,11 +112,8 @@
 static gboolean initdownload(WebKitURIRequest *req, Client *c);
 
 static void inspector(Client *c, const Arg *arg);
-//static WebKitWebView *inspector_new(WebKitWebInspector *i, WebKitWebView *v,
-//		Client *c);
 static gboolean inspector_show(WebKitWebInspector *i, Client *c);
 static void inspector_close(WebKitWebInspector *i, Client *c);
-//static void inspector_finished(WebKitWebInspector *i, Client *c);
 
 static gboolean keypress(GtkWidget *w, GdkEventKey *ev, Client *c);
 static void linkhover(
@@ -152,7 +127,6 @@
 static void loaduri(Client *c, const Arg *arg);
 static void navigate(Client *c, const Arg *arg);
 static Client *newclient(void);
-static void newwindow(Client *c, const Arg *arg, gboolean noembed);
 static gchar *parseuri(const gchar *uri);
 static void pasteuri(GtkClipboard *clipboard, const char *text, gpointer d);
 static gboolean permissionrequest (WebKitWebView           *web_view,
@@ -171,7 +145,6 @@
 static void setatom(Client *c, int a, const char *v);
 static void setup(void);
 static void sigchld(int unused);
-//static void source(Client *c, const Arg *arg);
 static void spawn(Client *c, const Arg *arg);
 static void stop(Client *c, const Arg *arg);
 static void titlechange(WebKitWebView *v, GParamSpec *pspec, Client *c);
@@ -179,16 +152,11 @@
 static void update(Client *c);
 static void updatewinid(Client *c);
 static void usage(void);
-//static void windowobjectcleared(WebKitScriptWorld *world,
-//               	WebKitWebPage     *page,
-//               	WebKitFrame       *frame,
-//		Client *c);
 static void zoom(Client *c, const Arg *arg);
 
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
-/*
 static void
 beforerequest(WebKitWebView     *web_view,
                WebKitWebResource *resource,
@@ -197,7 +165,7 @@
 	const gchar *uri = webkit_uri_request_get_uri(request);
 	if(g_str_has_suffix(uri, "/favicon.ico"))
 		webkit_uri_request_set_uri(request, "about:blank");
-}*/
+}
 
 static char *
 buildpath(const char *path) {
@@ -235,12 +203,11 @@
 
 static void
 buttonrelease(WebKitWebView *web_view, WebKitHitTestResult *hit_test_result, guint modifiers, Client *c) {
-	Arg arg;
-
 	if(webkit_hit_test_result_context_is_link(hit_test_result)) {
 		if(modifiers == GDK_BUTTON2_MASK) {
-			arg.v = webkit_hit_test_result_get_link_uri(hit_test_result);
-			newwindow(NULL, &arg, modifiers & GDK_CONTROL_MASK);
+			Client *n = newclient();
+			const char *uri =  webkit_hit_test_result_get_link_uri(hit_test_result);
+			webkit_web_view_load_uri(n->view, uri);
 		}
 	}
 }
@@ -254,80 +221,6 @@
 	g_free(stylefile);
 }
 
-/*static void
-cookiejar_changed(SoupCookieJar *self, SoupCookie *old_cookie,
-		SoupCookie *new_cookie) {
-	flock(COOKIEJAR(self)->lock, LOCK_EX);
-	if(new_cookie && !new_cookie->expires && sessiontime) {
-		soup_cookie_set_expires(new_cookie,
-				soup_date_new_from_now(sessiontime));
-	}
-	SOUP_COOKIE_JAR_CLASS(cookiejar_parent_class)->changed(self,
-			old_cookie, new_cookie);
-	flock(COOKIEJAR(self)->lock, LOCK_UN);
-}
-
-static void
-cookiejar_class_init(CookieJarClass *klass) {
-	SOUP_COOKIE_JAR_CLASS(klass)->changed = cookiejar_changed;
-	G_OBJECT_CLASS(klass)->get_property =
-		G_OBJECT_CLASS(cookiejar_parent_class)->get_property;
-	G_OBJECT_CLASS(klass)->set_property = cookiejar_set_property;
-	G_OBJECT_CLASS(klass)->finalize = cookiejar_finalize;
-	g_object_class_override_property(G_OBJECT_CLASS(klass), 1, "filename");
-}
-
-static void
-cookiejar_finalize(GObject *self) {
-	close(COOKIEJAR(self)->lock);
-	G_OBJECT_CLASS(cookiejar_parent_class)->finalize(self);
-}
-
-static void
-cookiejar_init(CookieJar *self) {
-	self->lock = open(cookiefile, 0);
-}
-
-static SoupCookieJar *
-cookiejar_new(const char *filename, gboolean read_only) {
-	return g_object_new(COOKIEJAR_TYPE,
-	                    SOUP_COOKIE_JAR_TEXT_FILENAME, filename,
-	                    SOUP_COOKIE_JAR_READ_ONLY, read_only, NULL);
-}
-
-static void
-cookiejar_set_property(GObject *self, guint prop_id, const GValue *value,
-		GParamSpec *pspec) {
-	flock(COOKIEJAR(self)->lock, LOCK_SH);
-	G_OBJECT_CLASS(cookiejar_parent_class)->set_property(self, prop_id,
-			value, pspec);
-	flock(COOKIEJAR(self)->lock, LOCK_UN);
-}*/
-
-static void
-evalscript(JSGlobalContextRef js, char *script, char* scriptname) {
-	JSStringRef jsscript, jsscriptname;
-	JSValueRef exception = NULL;
-
-	jsscript = JSStringCreateWithUTF8CString(script);
-	jsscriptname = JSStringCreateWithUTF8CString(scriptname);
-	JSEvaluateScript(js, jsscript, JSContextGetGlobalObject(js), jsscriptname, 0, &exception);
-	JSStringRelease(jsscript);
-	JSStringRelease(jsscriptname);
-}
-
-static void
-runscript(const char * filename, WebKitWebView *view) {
-	char *script;
-	GError *error;
-
-	if (filename == NULL || filename[0] == '\0')
-		return;
-	if(g_file_get_contents(filename, &script, NULL, &error)) {
-		evalscript(webkit_web_view_get_javascript_global_context(view), script, scriptfile);
-	}
-}
-
 static void
 clipboard(Client *c, const Arg *arg) {
 	gboolean paste = *(gboolean *)arg;
@@ -352,7 +245,14 @@
 
 static WebKitWebView *
 createwindow(WebKitWebView *web_view, WebKitNavigationAction *navigation_action, Client *c) {
+
 	Client *n = newclient();
+
+	const char *uri;
+	WebKitURIRequest *ur = webkit_navigation_action_get_request(navigation_action);
+	uri = webkit_uri_request_get_uri(ur);
+	webkit_web_view_load_uri(n->view, uri);
+
 	return n->view;
 }
 
@@ -377,27 +277,27 @@
 		case WEBKIT_POLICY_DECISION_TYPE_NAVIGATION_ACTION:
 			{
 				WebKitNavigationPolicyDecision *p = WEBKIT_NAVIGATION_POLICY_DECISION(decision);
-				if (webkit_navigation_policy_decision_get_navigation_action(p) ==  WEBKIT_NAVIGATION_TYPE_LINK_CLICKED) {
-					Arg arg;
+				WebKitNavigationAction *na = webkit_navigation_policy_decision_get_navigation_action(p);
+				if (webkit_navigation_action_get_navigation_type(na) ==  WEBKIT_NAVIGATION_TYPE_LINK_CLICKED) {
 					webkit_policy_decision_ignore((WebKitPolicyDecision*)p);
-					WebKitNavigationAction *na = webkit_navigation_policy_decision_get_navigation_action(p);
 					WebKitURIRequest *ur = webkit_navigation_action_get_request(na);
-					arg.v = (void *)webkit_uri_request_get_uri(ur);
-					newwindow(NULL, &arg, 0);
+					Client *n = newclient();
+					const char *uri = webkit_uri_request_get_uri(ur);
+					webkit_web_view_load_uri(n->view, uri);
 					return TRUE;
 				}
 			}
 			break;
-		case WEBKIT_POLICY_DECISION_TYPE_NEW_WINDOW_ACTION:
+		case WEBKIT_POLICY_DECISION_TYPE_NEW_WINDOW_ACTION: //dead code
 			{
 				WebKitNavigationPolicyDecision *p = (WebKitNavigationPolicyDecision*)WEBKIT_NAVIGATION_POLICY_DECISION(decision);
-				if (webkit_navigation_policy_decision_get_navigation_action((WebKitNavigationPolicyDecision*)p) ==  WEBKIT_NAVIGATION_TYPE_LINK_CLICKED) {
-					Arg arg;
+				WebKitNavigationAction *na = webkit_navigation_policy_decision_get_navigation_action(p);
+				if (webkit_navigation_action_get_navigation_type(na) ==  WEBKIT_NAVIGATION_TYPE_LINK_CLICKED) {
 					webkit_policy_decision_ignore((WebKitPolicyDecision*)p);
-					WebKitNavigationAction *na = webkit_navigation_policy_decision_get_navigation_action(p);
 					WebKitURIRequest *ur = webkit_navigation_action_get_request(na);
-					arg.v = (void *)webkit_uri_request_get_uri(ur);
-					newwindow(NULL, &arg, 0);
+					Client *n = newclient();
+					const char *uri = webkit_uri_request_get_uri(ur);
+					webkit_web_view_load_uri(n->view, uri);
 					return TRUE;
 				}
 			}
@@ -421,6 +321,13 @@
 	gtk_widget_destroy(c->vbox);
 	gtk_widget_destroy(c->win);
 
+	if (c->view == root_view) {
+		if (c->next == NULL)
+			root_view = NULL;
+		else
+			root_view = c->next->view;
+	}
+
 	for(p = clients; p && p->next != c; p = p->next);
 	if(p) {
 		p->next = c->next;
@@ -558,7 +465,6 @@
 static
 void initializewebextensions (WebKitWebContext *context,
                gpointer          user_data) {
-	static guint32 unique_id = 0;
 	webkit_web_context_set_web_extensions_directory(context, SURF_WEB_EXTENSIONS_DIR);
         webkit_web_context_set_web_extensions_initialization_user_data(context, g_variant_new_string(scriptfile));
 }
@@ -573,12 +479,6 @@
 }
 
 
-/*
-static WebKitWebView *
-inspector_new(WebKitWebInspector *i, WebKitWebView *v, Client *c) {
-	return WEBKIT_WEB_VIEW(webkit_web_view_new());
-}*/
-
 static gboolean
 inspector_show(WebKitWebInspector *i, Client *c) {
 	c->isinspecting = true;
@@ -590,11 +490,6 @@
 	c->isinspecting = false;
 }
 
-/*static void
-inspector_finished(WebKitWebInspector *i, Client *c) {
-	g_free(c->inspector);
-}*/
-
 static gboolean
 keypress(GtkWidget* w, GdkEventKey *ev, Client *c) {
 	guint i;
@@ -688,43 +583,38 @@
 navigate(Client *c, const Arg *arg) {
 	int steps = *(int *)arg;
 	if (steps > 0)
-		webkit_web_view_go_back(c->view);
-	else
 		webkit_web_view_go_forward(c->view);
+	else
+		webkit_web_view_go_back(c->view);
 }
 
 static Client *
 newclient(void) {
 	Client *c;
-	WebKitWebContext *context;
 	WebKitSettings *settings;
 	GdkGeometry hints = { 1, 1 };
 	WebKitUserContentManager *usercontent;
-	char *uri, *ua;
+	char *ua;
 
 	if(!(c = calloc(1, sizeof(Client))))
 		die("Cannot malloc!\n");
 
 	/* Window */
-	if(embed) {
-		c->win = gtk_plug_new(embed);
-	} else {
-		c->win = gtk_window_new(GTK_WINDOW_TOPLEVEL);
+	c->win = gtk_window_new(GTK_WINDOW_TOPLEVEL);
 
-		/* TA:  20091214:  Despite what the GNOME docs say, the ICCCM
-		 * is always correct, so we should still call this function.
-		 * But when doing so, we *must* differentiate between a
-		 * WM_CLASS and a resource on the window.  By convention, the
-		 * window class (WM_CLASS) is capped, while the resource is in
-		 * lowercase.   Both these values come as a pair.
-		 */
-		gtk_window_set_wmclass(GTK_WINDOW(c->win), "surf", "Surf");
-
-		/* TA:  20091214:  And set the role here as well -- so that
-		 * sessions can pick this up.
-		 */
-		gtk_window_set_role(GTK_WINDOW(c->win), "Surf");
-	}
+	/* TA:  20091214:  Despite what the GNOME docs say, the ICCCM
+	 * is always correct, so we should still call this function.
+	 * But when doing so, we *must* differentiate between a
+	 * WM_CLASS and a resource on the window.  By convention, the
+	 * window class (WM_CLASS) is capped, while the resource is in
+	 * lowercase.   Both these values come as a pair.
+	 */
+	gtk_window_set_wmclass(GTK_WINDOW(c->win), "surf", "Surf");
+
+	/* TA:  20091214:  And set the role here as well -- so that
+	 * sessions can pick this up.
+	 */
+	gtk_window_set_role(GTK_WINDOW(c->win), "Surf");
 	gtk_window_set_default_size(GTK_WINDOW(c->win), 800, 600);
 	g_signal_connect(G_OBJECT(c->win),
 			"destroy",
@@ -744,56 +634,44 @@
 	gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(c->scroll),
 			GTK_POLICY_NEVER, GTK_POLICY_NEVER);
 
-	WebKitWebContext *defcontext = webkit_web_context_get_default();
-	webkit_web_context_set_process_model(defcontext, WEBKIT_PROCESS_MODEL_MULTIPLE_SECONDARY_PROCESSES);
-	webkit_web_context_set_cache_model(defcontext, WEBKIT_CACHE_MODEL_WEB_BROWSER);
-	g_signal_connect(G_OBJECT(defcontext),
-			"initialize-web-extensions",
-			G_CALLBACK(initializewebextensions), NULL);
-
 	/* Webview */
 	usercontent = webkit_user_content_manager_new();
-	c->view = WEBKIT_WEB_VIEW(webkit_web_view_new_with_user_content_manager(usercontent));
-	context = webkit_web_view_get_context(c->view);
-	g_signal_connect(G_OBJECT(c->view), //
+	if (clients == NULL) {
+		c->view = WEBKIT_WEB_VIEW(webkit_web_view_new_with_user_content_manager(usercontent));
+	} else {
+		c->view = WEBKIT_WEB_VIEW(webkit_web_view_new_with_related_view(root_view));
+	}
+	g_signal_connect(G_OBJECT(c->view),
 			"notify::title",
 			G_CALLBACK(titlechange), c);
-	g_signal_connect(G_OBJECT(c->view), //
+	g_signal_connect(G_OBJECT(c->view),
 			"mouse-target-changed",
 			G_CALLBACK(linkhover), c);
 	g_signal_connect(G_OBJECT(c->view),
 			"create",
 			G_CALLBACK(createwindow), c);
-	g_signal_connect(G_OBJECT(c->view), //
+	g_signal_connect(G_OBJECT(c->view),
 			"decide-policy",
 			G_CALLBACK(decidedownloadwindow), c);
-	//g_signal_connect(G_OBJECT(c->view),
-	//		"window-object-cleared",
-	//		G_CALLBACK(windowobjectcleared), c);
 	g_signal_connect(G_OBJECT(c->view),
 			"load-changed",
 			G_CALLBACK(loadstatuschange), c);
-	g_signal_connect(G_OBJECT(c->view), //
+	g_signal_connect(G_OBJECT(c->view),
 			"notify::progress",
 			G_CALLBACK(progresschange), c);
-	//g_signal_connect(G_OBJECT(c->view),
-	//		"decide-destination",
-	//		G_CALLBACK(initdownload), c);
-	g_signal_connect(G_OBJECT(c->view), //
+	g_signal_connect(G_OBJECT(c->view),
 			"mouse-target-changed",
 			G_CALLBACK(buttonrelease), c);
-	g_signal_connect(G_OBJECT(c->view), //
+	g_signal_connect(G_OBJECT(c->view),
 			"context-menu",
 			G_CALLBACK(populatepopup), c);
-	//g_signal_connect(G_OBJECT(c->view),
-	//		"resource-load-started",
-	//		G_CALLBACK(beforerequest), c);
-	g_signal_connect(G_OBJECT(c->view), //
+	g_signal_connect(G_OBJECT(c->view),
+			"resource-load-started",
+			G_CALLBACK(beforerequest), c);
+	g_signal_connect(G_OBJECT(c->view),
 			"permission-request",
 			G_CALLBACK(permissionrequest), c);
 
-	
-
 	/* Indicator */
 	c->indicator = gtk_drawing_area_new();
 	gtk_widget_set_size_request(c->indicator, 0, indicator_thickness);
@@ -823,71 +701,69 @@
 	gdk_window_add_filter(gtk_widget_get_window(GTK_WIDGET(c->win)), processx, c);
 	//webkit_web_view_set_full_content_zoom(c->view, TRUE);
 
-	WebKitCookieManager *cookiemanager = webkit_web_context_get_cookie_manager(context);
-	webkit_cookie_manager_set_persistent_storage(cookiemanager, cookiefile, WEBKIT_COOKIE_PERSISTENT_STORAGE_TEXT);
-	webkit_cookie_manager_set_accept_policy(cookiemanager, WEBKIT_COOKIE_POLICY_ACCEPT_ALWAYS);
-	runscript(scriptfile, c->view);
-	settings = webkit_web_view_get_settings(c->view);
-	if(!(ua = getenv("SURF_USERAGENT")))
-		ua = useragent;
-	g_object_set(G_OBJECT(settings), "user-agent", ua, NULL);
-	uri = g_strconcat("file://", stylefile, NULL);
-	//g_object_set(G_OBJECT(settings), "user-stylesheet-uri", uri, NULL);
-	g_object_set(G_OBJECT(settings), "auto-load-images", loadimages,
-			NULL);
-	g_object_set(G_OBJECT(settings), "enable-plugins", enableplugins,
-			NULL);
-	g_object_set(G_OBJECT(settings), "enable-javascript", enablescripts,
-			NULL);
-	g_object_set(G_OBJECT(settings), "enable-webgl", TRUE,
-			NULL);
-	g_object_set(G_OBJECT(settings), "enable-spatial-navigation",
-			enablespatialbrowsing, NULL);
-	g_object_set(G_OBJECT(settings), "enable-developer-extras",
-			enableinspector, NULL);
-	g_object_set(G_OBJECT(settings), "enable-smooth-scrolling",
-			TRUE, NULL);
-        g_object_set(G_OBJECT(settings), "enable-accelerated-2d-canvas",
-                        TRUE, NULL);
-	webkit_web_context_set_tls_errors_policy(context, strictssl ? WEBKIT_TLS_ERRORS_POLICY_FAIL : WEBKIT_TLS_ERRORS_POLICY_IGNORE);
-
-	
-	WebKitUserContentManager *contentmanager = webkit_web_view_get_user_content_manager(c->view);
-	char* source;
-	/*
-	WebKitUserScript *script;
-	if(g_file_get_contents(scriptfile, &source, NULL, NULL)) {
-		script = webkit_user_script_new(source, WEBKIT_USER_CONTENT_INJECT_ALL_FRAMES, WEBKIT_USER_SCRIPT_INJECT_AT_DOCUMENT_END, NULL, NULL);
-		webkit_user_content_manager_add_script(usercontent, script);
-		g_free(source);
-		webkit_user_script_unref(script);
-	}
-	*/
-	
-	WebKitUserStyleSheet *style;
-	if(g_file_get_contents(stylefile, &source, NULL, NULL)) {
-		style = webkit_user_style_sheet_new(source, WEBKIT_USER_CONTENT_INJECT_ALL_FRAMES, WEBKIT_USER_STYLE_LEVEL_USER, NULL, NULL);
-		webkit_user_content_manager_add_style_sheet(usercontent, style);
-		g_free(source);
-		webkit_user_style_sheet_unref(style);
+	if (clients == NULL)
+	{
+		WebKitWebContext *context;
+		context = webkit_web_view_get_context(c->view);
+		WebKitCookieManager *cookiemanager = webkit_web_context_get_cookie_manager(context);
+		webkit_cookie_manager_set_persistent_storage(cookiemanager, cookiefile, WEBKIT_COOKIE_PERSISTENT_STORAGE_TEXT);
+		webkit_cookie_manager_set_accept_policy(cookiemanager, WEBKIT_COOKIE_POLICY_ACCEPT_ALWAYS);
+
+		settings = webkit_web_view_get_settings(c->view);
+		if(!(ua = getenv("SURF_USERAGENT")))
+			ua = useragent;
+		g_object_set(G_OBJECT(settings), "user-agent", ua, NULL);
+		g_object_set(G_OBJECT(settings), "auto-load-images", loadimages,
+				NULL);
+		g_object_set(G_OBJECT(settings), "enable-plugins", enableplugins,
+				NULL);
+		g_object_set(G_OBJECT(settings), "enable-javascript", enablescripts,
+				NULL);
+		g_object_set(G_OBJECT(settings), "enable-webgl", TRUE,
+				NULL);
+		g_object_set(G_OBJECT(settings), "enable-spatial-navigation",
+				enablespatialbrowsing, NULL);
+		g_object_set(G_OBJECT(settings), "enable-developer-extras",
+				enableinspector, NULL);
+		g_object_set(G_OBJECT(settings), "enable-smooth-scrolling",
+				TRUE, NULL);
+	        g_object_set(G_OBJECT(settings), "enable-accelerated-2d-canvas",
+	                        TRUE, NULL);
+	        g_object_set(G_OBJECT(settings), "enable-mediasource",
+	                        TRUE, NULL);
+	        g_object_set(G_OBJECT(settings), "enable-media-stream",
+	                        TRUE, NULL);
+
+		webkit_web_context_set_tls_errors_policy(context, strictssl ? WEBKIT_TLS_ERRORS_POLICY_FAIL : WEBKIT_TLS_ERRORS_POLICY_IGNORE);
+
+		char* source;
+		WebKitUserScript *script;
+		if(g_file_get_contents(scriptfile, &source, NULL, NULL)) {
+			script = webkit_user_script_new(source, WEBKIT_USER_CONTENT_INJECT_ALL_FRAMES, WEBKIT_USER_SCRIPT_INJECT_AT_DOCUMENT_END, NULL, NULL);
+			webkit_user_content_manager_add_script(usercontent, script);
+			g_free(source);
+			webkit_user_script_unref(script);
+		}
+
+		WebKitUserStyleSheet *style;
+		if(g_file_get_contents(stylefile, &source, NULL, NULL)) {
+			style = webkit_user_style_sheet_new(source, WEBKIT_USER_CONTENT_INJECT_ALL_FRAMES, WEBKIT_USER_STYLE_LEVEL_USER, NULL, NULL);
+			webkit_user_content_manager_add_style_sheet(usercontent, style);
+			g_free(source);
+			webkit_user_style_sheet_unref(style);
+		}
 	}
 
 	if(enableinspector) {
 		c->inspector = WEBKIT_WEB_INSPECTOR(
 				webkit_web_view_get_inspector(c->view));
-		//g_signal_connect(G_OBJECT(c->inspector), "inspect-web-view",
-		//		G_CALLBACK(inspector_new), c);
 		g_signal_connect(G_OBJECT(c->inspector), "attach",
 				G_CALLBACK(inspector_show), c);
 		g_signal_connect(G_OBJECT(c->inspector), "closed",
 				G_CALLBACK(inspector_close), c);
-		//g_signal_connect(G_OBJECT(c->inspector), "finished",
-		//		G_CALLBACK(inspector_finished), c);
 		c->isinspecting = false;
 	}
 
-	g_free(uri);
-
 	setatom(c, AtomFind, "");
 	setatom(c, AtomUri, "about:blank");
 	setatom(c, AtomScriptFile, "");
@@ -896,6 +772,7 @@
 		webkit_web_view_set_background_color(c->view, &transparent);
 	}
 
+	root_view = c->view;
 	c->title = NULL;
 	c->next = clients;
 	clients = c;
@@ -912,35 +789,6 @@
 	return c;
 }
 
-static void
-newwindow(Client *c, const Arg *arg, gboolean noembed) {
-	guint i = 0;
-	const char *cmd[10], *uri;
-	const Arg a = { .v = (void *)cmd };
-	char tmp[64];
-
-	cmd[i++] = argv0;
-	if(embed && !noembed) {
-		cmd[i++] = "-e";
-		snprintf(tmp, LENGTH(tmp), "%u\n", (int)embed);
-		cmd[i++] = tmp;
-	}
-	if(!enablescripts)
-		cmd[i++] = "-s";
-	if(!enableplugins)
-		cmd[i++] = "-p";
-	if(!loadimages)
-		cmd[i++] = "-i";
-	if(showxid)
-		cmd[i++] = "-x";
-	cmd[i++] = "--";
-	uri = arg->v ? (char *)arg->v : c->linkhover;
-	if(uri)
-		cmd[i++] = uri;
-	cmd[i++] = NULL;
-	spawn(NULL, &a);
-}
-
 static gboolean permissionrequest (WebKitWebView           *web_view,
                WebKitPermissionRequest *request,
                Client *c)
@@ -987,7 +835,7 @@
 	const char *name;
 	GtkClipboard *prisel;
 
-	name = g_action_get_name((GAction *)action);
+	name = gtk_action_get_name(action);
 	if(!g_strcmp0(name, "context-menu-action-3")) {
 		prisel = gtk_clipboard_get(GDK_SELECTION_PRIMARY);
 		if (c->linkhover)
@@ -1042,7 +890,12 @@
 			}
 			else if(ev->atom == atoms[AtomScriptFile]) {
 				arg.v = getatom(c, AtomScriptFile);
-				runscript(arg.v, c->view);
+				char* source;
+				if(g_file_get_contents(arg.v, &source, NULL, NULL)) {
+					webkit_web_view_run_javascript(c->view, source, NULL, NULL, NULL);
+					g_free(source);
+				}
+				//runscript(arg.v, c->view);
 				return GDK_FILTER_REMOVE;
 			}
 		}
@@ -1111,9 +964,6 @@
 static void
 setup(void) {
 	char *proxy;
-	//char *new_proxy;
-	//SoupURI *puri;
-	//SoupSession *s;
 
 	/* clean up any zombies immediately */
 	sigchld(0);
@@ -1132,28 +982,17 @@
 	scriptfile = buildpath(scriptfile);
 	stylefile = buildpath(stylefile);
 
-	/* request handler */
-	//s = webkit_get_default_session();
-
-	/* cookie jar */
-	//soup_session_add_feature(s,
-	//		SOUP_SESSION_FEATURE(cookiejar_new(cookiefile,
-	//				FALSE)));
-
-	/* ssl */
-	//g_object_set(G_OBJECT(s), "ssl-ca-file", cafile, NULL);
-	//g_object_set(G_OBJECT(s), "ssl-strict", strictssl, NULL);
-	
 	/* proxy */
 	if((proxy = getenv("http_proxy")) && strcmp(proxy, "")) {
-		//new_proxy = g_strrstr(proxy, "http://") ? g_strdup(proxy) :
-		//	g_strdup_printf("http://%s", proxy);
-		//puri = soup_uri_new(new_proxy);
-		//g_object_set(G_OBJECT(s), "proxy-uri", puri, NULL);
-		//soup_uri_free(puri);
-		//g_free(new_proxy);
 		usingproxy = 1;
 	}
+
+	WebKitWebContext *defcontext = webkit_web_context_get_default();
+	webkit_web_context_set_process_model(defcontext, WEBKIT_PROCESS_MODEL_MULTIPLE_SECONDARY_PROCESSES);
+	webkit_web_context_set_cache_model(defcontext, WEBKIT_CACHE_MODEL_WEB_BROWSER);
+	g_signal_connect(G_OBJECT(defcontext),
+			"initialize-web-extensions",
+			G_CALLBACK(initializewebextensions), NULL);
 }
 
 static void
@@ -1163,17 +1002,6 @@
 	while(0 < waitpid(-1, NULL, WNOHANG));
 }
 
-/*
-static void
-source(Client *c, const Arg *arg) {
-	Arg a = { .b = FALSE };
-	gboolean s;
-
-	s = webkit_web_view_get_view_mode(c->view);
-	webkit_web_view_set_view_mode(c->view, !s);
-	reload(c, &a);
-}*/
-
 static void
 spawn(Client *c, const Arg *arg) {
 	if(fork() == 0) {
@@ -1182,19 +1010,11 @@
 		setsid();
 		execvp(((char **)arg->v)[0], (char **)arg->v);
 		fprintf(stderr, "surf: execvp %s", ((char **)arg->v)[0]);
-		perror(" failed");
 		exit(0);
 	}
 }
 
 
-/*
-static void
-eval(Client *c, const Arg *arg) {
-	evalscript(webkit_web_view_get_javascript_global_context(c->view),
-			((char **)arg->v)[0], "");
-}*/
-
 static void
 stop(Client *c, const Arg *arg) {
 	webkit_web_view_stop_loading(c->view);
@@ -1272,19 +1092,10 @@
 
 static void
 usage(void) {
-	die("usage: %s [-inpsvx] [-c cookiefile] [-e xid] [-r scriptfile]"
+	die("usage: %s [-inpsvx] [-c cookiefile] [-r scriptfile]"
 		" [-t stylefile] [-u useragent] [uri]\n", basename(argv0));
 }
 
-/*
-static void
-windowobjectcleared(WebKitScriptWorld *world,
-               WebKitWebPage     *page,
-               WebKitFrame       *frame,
-	       Client *c) {
-	runscript(scriptfile, frame);
-}*/
-
 static void
 zoom(Client *c, const Arg *arg) {
 	gdouble zoom_level;
@@ -1318,9 +1129,6 @@
 	case 'c':
 		cookiefile = EARGF(usage());
 		break;
-	case 'e':
-		embed = strtol(EARGF(usage()), NULL, 0);
-		break;
 	case 'i':
 		loadimages = 0;
 		break;
@@ -1336,9 +1144,6 @@
 	case 's':
 		enablescripts = 0;
 		break;
-	case 'S':
-		enablescripts = 1;
-		break;
 	case 't':
 		stylefile = EARGF(usage());
 		break;
