diff -urp boinc-client_release-7.2-7.2.44.orig/client/hostinfo_unix.cpp boinc-client_release-7.2-7.2.44/client/hostinfo_unix.cpp
--- boinc-client_release-7.2-7.2.44.orig/client/hostinfo_unix.cpp	2014-03-20 11:03:19.000000000 -0700
+++ boinc-client_release-7.2-7.2.44/client/hostinfo_unix.cpp	2017-01-19 02:55:44.839152943 -0800
@@ -43,6 +43,7 @@
 #undef _LARGEFILE64_SOURCE
 #include <iostream>
 #include <vector>
+#include <queue>
 #include <string>
 #include <cstring>
 #endif
@@ -118,6 +119,12 @@
 #include "hostinfo.h"
 
 using std::string;
+using std::queue;
+
+#if __linux__
+#include <linux/input.h>
+#include <fcntl.h>
+#endif
 
 #ifdef __APPLE__
 #include <IOKit/IOKitLib.h>
@@ -1658,6 +1665,84 @@ inline bool all_tty_idle(time_t t) {
     return true;
 }
 
+static const struct dir_input_dev {
+    const char *dir;
+    const char *dev;
+} input_patterns[] = {
+#ifdef unix
+    { "/dev/input","event" },
+    { "/dev/input","event0" },
+    { "/dev/input","event1" },
+    { "/dev/input","mouse0" },
+    { "/dev/input","event" },
+    { "/dev/input","mouse" },
+    { "/dev/input/mice","" },
+#endif
+    // add other ifdefs here as necessary.
+    { NULL, NULL },
+};
+
+vector<string> get_input_list() {
+    // Create a list of all terminal devices on the system.
+    char devname[1024];
+    char fullname[1024];
+    int done,i=0;
+    vector<string> input_list;
+    
+    do {
+        DIRREF dev=dir_open(input_patterns[i].dir);
+        if (dev) {
+            do {
+                // get next file
+                done=dir_scan(devname,dev,1024);
+                // does it match our tty pattern? If so, add it to the tty list.
+                if (!done && (strstr(devname,input_patterns[i].dev) == devname)) {
+                    // don't add anything starting with .
+                    if (devname[0] != '.') {
+                        sprintf(fullname,"%s/%s",input_patterns[i].dir,devname);
+                        input_list.push_back(fullname);
+                    }
+                }
+            } while (!done);
+            dir_close(dev);
+        }
+        i++;
+    } while (input_patterns[i].dir != NULL);
+    return input_list;
+}
+
+inline bool all_input_idle(time_t t) {
+    static vector<string> input_list;
+    static queue<int> qfds;
+    unsigned int i;
+    fd_set fds;
+    int fd_max;
+
+    FD_ZERO(&fds);
+    if (input_list.size()==0) input_list=get_input_list();
+    for (i=0; i<input_list.size(); i++) {
+        int fd;
+        if ((fd = open(input_list[i].c_str(), O_RDONLY | O_NONBLOCK )) != 1) {
+          FD_SET(fd,&fds);
+          fd_max = fd;
+          qfds.push(fd);
+        }
+    }
+
+    struct timeval tv = {1, 0}; //sec, usec
+    bool sleeping=true;
+    if (select(fd_max+1, &fds, NULL, NULL, &tv) > 0) {
+      sleeping=false;
+    }
+
+    while(!qfds.empty()) {
+      close(qfds.front());
+      qfds.pop();
+    }
+
+    return sleeping;
+}
+
 #if HAVE_UTMP_H
 inline bool user_idle(time_t t, struct utmp* u) {
     char tty[5 + sizeof u->ut_line + 1] = "/dev/";
@@ -1988,6 +2073,16 @@ bool HOST_INFO::users_idle(bool check_al
     }
 #endif
 
+    // Lets at least check the dev entries which should be correct for
+    // USB keyboards and mice.  If the linux kernel doc is correct it should
+    // also work for bluetooth input devices as well.
+    //
+    // See: https://www.kernel.org/doc/Documentation/input/input.txt
+    //
+    if (!all_input_idle(idle_time)) {
+        return false;
+    }
+
 #else
     // We should find out which of the following are actually relevant
     // on which systems (if any)
