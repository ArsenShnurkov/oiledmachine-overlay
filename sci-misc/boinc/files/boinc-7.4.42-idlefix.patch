--- boinc-client_release-7.4-7.4.42.orig/client/hostinfo_unix.cpp	2015-12-21 21:13:15.339617286 -0800
+++ boinc-client_release-7.4-7.4.42/client/hostinfo_unix.cpp	2015-12-22 09:31:30.294269501 -0800
@@ -37,6 +37,7 @@
 #undef _LARGEFILE64_SOURCE
 #include <iostream>
 #include <vector>
+#include <queue>
 #include <string>
 #include <cstring>
 #endif
@@ -112,6 +113,12 @@
 #include "hostinfo.h"
 
 using std::string;
+using std::queue;
+
+#if __linux__
+#include <linux/input.h>
+#include <fcntl.h>
+#endif
 
 #ifdef __APPLE__
 #include <IOKit/IOKitLib.h>
@@ -1666,11 +1673,14 @@
 } input_patterns[] = {
 #ifdef unix
     { "/dev/input","event" },
+    { "/dev/input","event0" },
+    { "/dev/input","event1" },
     { "/dev/input","mouse" },
+    { "/dev/input","mouse0" },
     { "/dev/input/mice","" },
 #endif
     // add other ifdefs here as necessary.
-    { NULL, NULL },
+    { NULL, NULL, },
 };
 
 vector<string> get_input_list() {
@@ -1704,20 +1714,34 @@
 
 inline bool all_input_idle(time_t t) {
     static vector<string> input_list;
-    struct stat sbuf;
+    static queue<int> qfds;
     unsigned int i;
+    fd_set fds;
+    int fd_max;
 
+    FD_ZERO(&fds);
     if (input_list.size()==0) input_list=get_input_list();
     for (i=0; i<input_list.size(); i++) {
-        // ignore errors
-        if (!stat(input_list[i].c_str(), &sbuf)) {
-            // printf("input: %s %d %d\n",input_list[i].c_str(),sbuf.st_atime,t);
-            if (sbuf.st_atime >= t) {
-                return false;
-            }
+        int fd;
+        if ((fd = open(input_list[i].c_str(), O_RDONLY | O_NONBLOCK )) != 1) {
+          FD_SET(fd,&fds);
+          fd_max = fd;
+          qfds.push(fd);
         }
     }
-    return true;
+
+    struct timeval tv = {1, 0}; //sec, usec
+    bool sleeping=true;
+    if (select(fd_max+1, &fds, NULL, NULL, &tv) > 0) {
+      sleeping=false;
+    }
+
+    while(!qfds.empty()) {
+      close(qfds.front());
+      qfds.pop();
+    }
+
+    return sleeping;
 }
 
 #if HAVE_UTMP_H
