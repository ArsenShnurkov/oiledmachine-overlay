diff -urp setiathome-gpu-8.22.orig/AKv8/configure.ac setiathome-gpu-8.22/AKv8/configure.ac
--- setiathome-gpu-8.22.orig/AKv8/configure.ac	2017-01-19 09:08:23.500553707 -0800
+++ setiathome-gpu-8.22/AKv8/configure.ac	2017-01-19 09:12:26.668785421 -0800
@@ -106,11 +106,11 @@ else
 fi
 
 
-#AC_ARG_ENABLE(tests,
-#    AC_HELP_STRING([--disable-tests],
-#                   [disable tests (fakedata and hires_timer_test)]),
-#    [],
-#    [enable_tests=yes])
+AC_ARG_ENABLE(tests,
+    AC_HELP_STRING([--disable-tests],
+                   [disable tests (fakedata and hires_timer_test)]),
+    [],
+    [enable_tests=yes])
 
 AC_ARG_ENABLE(server,
     AC_HELP_STRING([--disable-server],
@@ -394,45 +394,45 @@ AC_SUBST([APP_LIBS])
 AC_SUBST([APP_LDFLAGS])
 AC_SUBST([APP_CFLAGS])
 
-# if test "$enable_graphics" = yes ; then
-#  SAH_GRX_LIBS
-#  AX_CHECK_GL
-#  AX_CHECK_GLU
-#  AX_CHECK_GLUT
-#  if test "$no_gl" = yes -o "$no_glu" = yes -o "$no_glut" = yes ; then
-#     have_glut=no
-#     enable_graphics=no
-#     AC_MSG_WARN([
-# ================================================================================
-# WARNING: GL/GLU/GLUT not found.
-#
-# The GL, GLU, and GLUT libraries are required in order to build the graphical
-# parts of the BOINC application API library.
-#
-# ==> only building non-graphical parts of the BOINC API Library for now.
-#
-# ================================================================================
-#       ])
-# else
-#     AC_DEFINE([BOINC_APP_GRAPHICS],1,[Define to 1 to build a graphical application])
-#     SAH_GRX_INCLUDES
-#     GRAPHICS_CFLAGS="${GRX_CFLAGS} ${GL_CFLAGS} ${GLU_CFLAGS} ${GLUT_CFLAGS}"
-#     GRAPHICS_LIBS="${GL_LIBS} ${GLU_LIBS} ${GLUT_LIBS} ${GRX_LIBS} -ljpeg"
-#
-# case ${target} in
-#        powerpc-apple*)       GRAPHICS_LIBS="${GRAPHICS_LIBS} -framework AppKit -framework CoreServices"
-#        ;;
-# esac
-#      GRAPHICS_LIBS_RAW="${PTHREAD_CFLAGS} -L${BOINCDIR}/api -L${BOINCDIR}/lib -lboinc_graphics2 -lboinc ${GRAPHICS_LIBS}"
-# dnl     SAH_RAW_LDFLAGS(["${PTHREAD_CFLAGS} -L${BOINCDIR}/api -L${BOINCDIR}/lib -lboinc_graphics2 -lboinc ${GRAPHICS_LIBS}"],[GRAPHICS_LIBS_RAW])
-#     have_glut=yes
-#     enable_graphics=yes
-#  fi
-# fi
+if test "$enable_graphics" = yes ; then
+  SAH_GRX_LIBS
+  AX_CHECK_GL
+  AX_CHECK_GLU
+  AX_CHECK_GLUT
+  if test "$no_gl" = yes -o "$no_glu" = yes -o "$no_glut" = yes ; then
+     have_glut=no
+     enable_graphics=no
+     AC_MSG_WARN([
+================================================================================
+WARNING: GL/GLU/GLUT not found.
+
+The GL, GLU, and GLUT libraries are required in order to build the graphical
+parts of the BOINC application API library.
+
+==> only building non-graphical parts of the BOINC API Library for now.
+
+================================================================================
+       ])
+else
+     AC_DEFINE([BOINC_APP_GRAPHICS],1,[Define to 1 to build a graphical application])
+     SAH_GRX_INCLUDES
+     GRAPHICS_CFLAGS="${GRX_CFLAGS} ${GL_CFLAGS} ${GLU_CFLAGS} ${GLUT_CFLAGS}"
+     GRAPHICS_LIBS="${GL_LIBS} ${GLU_LIBS} ${GLUT_LIBS} ${GRX_LIBS} -ljpeg"
+
+case ${target} in
+        powerpc-apple*)       GRAPHICS_LIBS="${GRAPHICS_LIBS} -framework AppKit -framework CoreServices"
+        ;;
+esac
+      GRAPHICS_LIBS_RAW="${PTHREAD_CFLAGS} -L${BOINCDIR}/api -L${BOINCDIR}/lib -lboinc_graphics2 -lboinc ${GRAPHICS_LIBS}"
+dnl     SAH_RAW_LDFLAGS(["${PTHREAD_CFLAGS} -L${BOINCDIR}/api -L${BOINCDIR}/lib -lboinc_graphics2 -lboinc ${GRAPHICS_LIBS}"],[GRAPHICS_LIBS_RAW])
+     have_glut=yes
+     enable_graphics=yes
+  fi
+fi
 AC_SUBST([LDSTATIC])
-# AC_SUBST([GRAPHICS_CFLAGS])
-# AC_SUBST([GRAPHICS_LIBS])
-# AC_SUBST([GRAPHICS_LIBS_RAW])
+AC_SUBST([GRAPHICS_CFLAGS])
+AC_SUBST([GRAPHICS_LIBS])
+AC_SUBST([GRAPHICS_LIBS_RAW])
 
 AC_CACHE_SAVE
 
@@ -604,11 +604,12 @@ AH_TEMPLATE([HAVE_STD_MAX],[Define to 1
 AH_TEMPLATE([HAVE_STD_TRANSFORM],[Define to 1 if transform is in namespace std::])
 SAH_FUNCS_IN_NAMESPACE([['min(0,0)'] ['max(0,0)'] ['transform((char *)0,(char *)0,(char *)0,(int(*)(int))malloc)']],std)
 
-# AM_CONDITIONAL(USE_MY_IMAGELIBS, [false])
-# AM_CONDITIONAL(USE_MY_GLUT, [false])
-#AM_CONDITIONAL(ENABLE_TESTS, [test "${enable_tests}" = yes])
+AM_CONDITIONAL(USE_MY_IMAGELIBS, [false])
+AM_CONDITIONAL(USE_MY_GLUT, [false])
+AM_CONDITIONAL(ENABLE_TESTS, [test "${enable_tests}" = yes])
 AM_CONDITIONAL(ENABLE_SERVER, [test "${enable_server}" = yes])
 AM_CONDITIONAL(ENABLE_CLIENT, [test "${enable_client}" = yes])
+AM_CONDITIONAL(ENABLE_GUI, [test "${enable_graphics}" = yes])
 AM_CONDITIONAL(OPENCL, [test "`echo ${CPPFLAGS} | grep -Fe USE_OPENCL`"])
 AM_CONDITIONAL(I386, [test -n "`echo ${target} | grep i.86`"])
 AM_CONDITIONAL(X86_64, [test -n "`echo ${target} | $EGREP 'x86_64|amd64'`"])
@@ -618,7 +619,7 @@ AC_MSG_NOTICE( ARMV7 = $ARMV7  ARMV8 = $
 AM_CONDITIONAL(LINUX, [test -n "`echo ${target} | grep linux`"])
 AM_CONDITIONAL(DARWIN, [test -n "`echo ${target} | grep darwin`"])
 AM_CONDITIONAL(BSD, [test -n "`echo ${target} | grep bsd`"])
-# AM_CONDITIONAL(PPC, [test -n "`echo ${target} | grep 'powerpc'`" -o -n "`echo ${target} | grep 'ppc'`" ])
+AM_CONDITIONAL(PPC, [test -n "`echo ${target} | grep 'powerpc'`" -o -n "`echo ${target} | grep 'ppc'`" ])
 AM_CONDITIONAL(ARM_NEON, [test "x${enable_arm_neon}"="xyes"])
 AM_CONDITIONAL(SSE, [test "x${enable_sse}" = "xyes"])
 AM_CONDITIONAL(SSE2, [test "x${enable_sse2}" = "xyes"])
Only in setiathome-gpu-8.22/AKv8: configure.ac.orig
Only in setiathome-gpu-8.22/AKv8: configure.ac.rej
