diff -urp setiathome-gpu-8.22.orig/AKv8/client/analyzeFuncs.cpp setiathome-gpu-8.22/AKv8/client/analyzeFuncs.cpp
--- setiathome-gpu-8.22.orig/AKv8/client/analyzeFuncs.cpp	2017-01-19 09:27:08.081622555 -0800
+++ setiathome-gpu-8.22/AKv8/client/analyzeFuncs.cpp	2017-01-19 09:37:29.278275590 -0800
@@ -3093,10 +3093,22 @@ if(num_gaussian_searches!=0){
               break;
             }
           }
+#ifdef BOINC_APP_GRAPHICS
+        if (sah_graphics) {
+            sah_graphics->fft_info.chirp_rate = chirprate;
+            sah_graphics->fft_info.fft_len = fftlen;
+            strcpy(sah_graphics->status, "Computing Fast Fourier Transform");
+        }
 
+#endif
 // JWS
 //          NumFfts = (NumDataPoints / 8) / fftlen;
           NumFfts = maxFFTlen / fftlen;
+#ifdef BOINC_APP_GRAPHICS
+          if (sah_graphics) {
+              rarray.init_data(fftlen, NumFfts);
+          }
+#endif
 //          NumBlockFfts = fftlen < 32768 ? 1 << (15 - swi.analysis_fft_orders[FftNum]) : 1;
           // If we're going to chirp, the length must be <= maxFFTlen, and should be
           // at least some minimum for efficiency.
@@ -3427,8 +3439,10 @@ else 	fprintf(stderr,"loop (strip) FindS
 		size_t localThreads[3];
 		size_t globalThreads[3];
 #if !defined(SIGNALS_ON_GPU)
-		cl_float best=best_spike->s.peak_power;
-		cl_float thresh=swi.analysis_cfg.spike_thresh;
+		cl_float best;
+    best=best_spike->s.peak_power;
+		cl_float thresh;
+    thresh=swi.analysis_cfg.spike_thresh;
 #endif
 #if OCL_REAL_LOCAL //USE_OPENCL_NV || USE_OPENCL_HD5xxx
 		if(fftlen>=spike_fft_thresh){
@@ -4072,6 +4086,32 @@ NegativeSpikeProcessingStrip:
 
 //              progress = std::min(,1.0);
 
+#ifdef BOINC_APP_GRAPHICS
+              if (!nographics()) {
+#if GPU_TWINCHIRP
+                  err=clEnqueueReadBuffer(cq,gpu_PowerSpectrum_pos,CL_TRUE,0,sizeof(float)*NumDataPoints,PowerSpectrum,0, NULL,NULL);
+                  if(err)fprintf(stderr,"ERROR: ReadBuffer(gpu_PowerSpectrum_pos):%d\n",err);
+                  rarray.add_source_row(PowerSpectrum+fftlen*ifft);
+                  sah_graphics->local_progress = (((float)ifft+1)/(iblockfft + NumBlockFfts));
+
+                  if(chirprate>0){
+                      err=clEnqueueReadBuffer(cq,gpu_PowerSpectrum_neg,CL_TRUE,0,sizeof(float)*NumDataPoints,PowerSpectrum,0, NULL,NULL);
+                      if(err)fprintf(stderr,"ERROR: ReadBuffer(gpu_PowerSpectrum_neg):%d\n",err);
+                      rarray.add_source_row(PowerSpectrum+fftlen*ifft);
+                      sah_graphics->local_progress = (((float)ifft+1)/(iblockfft + NumBlockFfts));
+                  }
+#else
+//doesn't execute with signals on gpu
+#if USE_OPENCL
+                  err=clEnqueueReadBuffer(cq,gpu_PowerSpectrum,CL_TRUE,0,sizeof(float)*NumDataPoints,PowerSpectrum,0, NULL,NULL);
+                  if(err)fprintf(stderr,"ERROR: ReadBuffer(gpu_PowerSpectrum):%d\n",err);
+#endif
+                  rarray.add_source_row(PowerSpectrum+fftlen*ifft);
+                  sah_graphics->local_progress = (((float)ifft+1)/(iblockfft + NumBlockFfts));
+#endif
+              }
+#endif              
+
 //              remaining = 1.0 - ((double) icfft + (stripLength * istrip + (icsfft - icfft)) / (double)istripCount) / num_cfft;
 //              fraction_done(progress,remaining);
             }
@@ -4117,6 +4157,12 @@ NegativeSpikeProcessingStrip:
 	}
 	#endif
 #endif
+#ifdef BOINC_APP_GRAPHICS
+      if (!nographics()) {
+          if (rarray.nvalid_rows != 0)
+	          memcpy(&sah_shmem->rarray_data, &rarray, sizeof(REDUCED_ARRAY_DATA));
+      }
+#endif      
 	  if (icsfft == (num_cfft - 1)) {
         progress = 1.;
         remaining = 0;
@@ -4181,7 +4227,18 @@ NegativeSpikeProcessingStrip:
           break;
         }
 	  }
-
+#ifdef BOINC_APP_GRAPHICS
+        if (sah_graphics) {
+            sah_graphics->fft_info.chirp_rate = chirprate;
+            sah_graphics->fft_info.fft_len = fftlen;
+            strcpy(sah_graphics->status, "Computing Fast Fourier Transform");
+        }
+#endif
+#ifdef BOINC_APP_GRAPHICS
+        if (sah_graphics) {
+            rarray.init_data(fftlen, NumFfts);
+        }
+#endif
 #if USE_OPENCL || USE_CUDA
 	  NumBlockFfts=NumFfts;//R: will do all needed FFTs for this size at once
 #else
@@ -4411,8 +4468,10 @@ CUDA_CALL(cudaStreamSynchronize(0));//R:
 
 		size_t localThreads[3];
 #if !defined(SIGNALS_ON_GPU)
-		float best=best_spike->s.peak_power;//score;
-		float thresh=swi.analysis_cfg.spike_thresh;
+		float best;
+    best=best_spike->s.peak_power;//score;
+		float thresh;
+    thresh=swi.analysis_cfg.spike_thresh;
 #endif
 #if OCL_REAL_LOCAL //USE_OPENCL_NV || USE_OPENCL_HD5xxx || USE_OPENCL_INTEL
 		if(fftlen>=spike_fft_thresh){
@@ -5143,6 +5202,32 @@ else{
           }
 #endif // HALF_STRIDE
 
+#ifdef BOINC_APP_GRAPHICS
+          if (!nographics()) {
+#if GPU_TWINCHIRP
+              err=clEnqueueReadBuffer(cq,gpu_PowerSpectrum_pos,CL_TRUE,0,sizeof(float)*NumDataPoints,PowerSpectrum,0, NULL,NULL);
+              if(err)fprintf(stderr,"ERROR: ReadBuffer(gpu_PowerSpectrum_pos):%d\n",err);
+              rarray.add_source_row(PowerSpectrum+fftlen*ifft);
+              sah_graphics->local_progress = (((float)ifft+1)/(iblockfft + NumBlockFfts));
+
+              if(chirprate>0){
+                  err=clEnqueueReadBuffer(cq,gpu_PowerSpectrum_neg,CL_TRUE,0,sizeof(float)*NumDataPoints,PowerSpectrum,0, NULL,NULL);
+                  if(err)fprintf(stderr,"ERROR: ReadBuffer(gpu_PowerSpectrum_neg):%d\n",err);
+                  rarray.add_source_row(PowerSpectrum+fftlen*ifft);
+                  sah_graphics->local_progress = (((float)ifft+1)/(iblockfft + NumBlockFfts));
+              }
+#else
+//does not execute with singals on gpu
+#if USE_OPENCL
+              err=clEnqueueReadBuffer(cq,gpu_PowerSpectrum,CL_TRUE,0,sizeof(float)*NumDataPoints,PowerSpectrum,0, NULL,NULL);
+              if(err)fprintf(stderr,"ERROR: ReadBuffer(gpu_PowerSpectrum):%d\n",err);
+#endif
+              rarray.add_source_row(PowerSpectrum+fftlen*ifft);
+              sah_graphics->local_progress = (((float)ifft+1)/(iblockfft + NumBlockFfts));
+#endif
+          }
+#endif
+
 //#if !USE_OPENCL && !USE_CUDA
 //          progress = std::min(progress, 1.0);
 //          remaining = 1.0 - (double) (icfft+1) / num_cfft;
@@ -5175,6 +5260,31 @@ else{
 	boinc_fraction_done(progress=std::min((double)icfft/num_cfft, 1.0));
 //	progress += SpikeProgressUnits(fftlen) * ProgressUnitSize;
 //    progress = std::min(progress, 1.0);
+#ifdef BOINC_APP_GRAPHICS
+    if (!nographics()) {
+#if GPU_TWINCHIRP
+              err=clEnqueueReadBuffer(cq,gpu_PowerSpectrum_pos,CL_TRUE,0,sizeof(float)*NumDataPoints,PowerSpectrum,0, NULL,NULL);
+              if(err)fprintf(stderr,"ERROR: ReadBuffer(gpu_PowerSpectrum_pos):%d\n",err);
+              rarray.add_source_row(PowerSpectrum+fftlen*ifft);
+              sah_graphics->local_progress = (((float)ifft+1)/(iblockfft + NumBlockFfts));
+
+              if(chirprate>0){
+                  err=clEnqueueReadBuffer(cq,gpu_PowerSpectrum_neg,CL_TRUE,0,sizeof(float)*NumDataPoints,PowerSpectrum,0, NULL,NULL);
+                  if(err)fprintf(stderr,"ERROR: ReadBuffer(gpu_PowerSpectrum_neg):%d\n",err);
+                  rarray.add_source_row(PowerSpectrum+fftlen*ifft);
+                  sah_graphics->local_progress = (((float)ifft+1)/(iblockfft + NumBlockFfts));
+              }
+#else
+//executes with signals on gpu
+#if USE_OPENCL
+              err=clEnqueueReadBuffer(cq,gpu_PowerSpectrum,CL_TRUE,0,sizeof(float)*NumDataPoints,PowerSpectrum,0, NULL,NULL);
+              if(err)fprintf(stderr,"ERROR: ReadBuffer(gpu_PowerSpectrum):%d\n",err);
+#endif
+              rarray.add_source_row(PowerSpectrum+fftlen*ifft);
+              sah_graphics->local_progress = (((float)ifft+1)/(iblockfft + NumBlockFfts));
+#endif
+    }
+#endif
 //    remaining = 1.0 - (double) (icfft+1) / num_cfft;
 //    fraction_done(progress, remaining);
 //#endif
@@ -5206,6 +5316,22 @@ retval = analyze_pot(PowerSpectrum,
       if (retval) SETIERROR(retval, "from analyze_pot");
 #endif
 FinishLoop:
+
+#ifdef BOINC_APP_GRAPHICS
+      // switch the display back to "best of" signals
+      //
+      if (!nographics()) {
+          sah_graphics->gi.copy(best_gauss, true);
+          sah_graphics->pi.copy(best_pulse, true);
+          sah_graphics->ti.copy(best_triplet, true);
+      }
+#endif
+#ifdef BOINC_APP_GRAPHICS
+      if (!nographics()) {
+          if (rarray.nvalid_rows != 0)
+          	memcpy(&sah_shmem->rarray_data, &rarray, sizeof(REDUCED_ARRAY_DATA));
+      }
+#endif
       if (icfft == (num_cfft - 1)) {
         progress = 1;
         remaining = 0;
@@ -5317,6 +5443,11 @@ FinishLoop:
 
     // Number of FFTs for this length
     NumFfts   = NumDataPoints / fftlen;
+#ifdef BOINC_APP_GRAPHICS
+    if (sah_graphics) {
+        rarray.init_data(fftlen, NumFfts);
+    }
+#endif    
 #if USE_OPENCL
 	NumBlockFfts=NumFfts;//R: will do all needed FFTs for this size at once
 #else
@@ -5756,6 +5887,11 @@ FinishLoop:
       sah_graphics->ti.copy(best_triplet, true);
     }
 #endif
+#ifdef BOINC_APP_GRAPHICS
+    if (!nographics()) {
+        memcpy(&sah_shmem->rarray_data, &rarray, sizeof(REDUCED_ARRAY_DATA));
+    }
+#endif
     // Force progress to 100% before calling result_group_end() to store
     //  100% in state file so it will survive exit & relaunch
     if (icfft == (num_cfft-1)) {
Only in setiathome-gpu-8.22/AKv8/client: analyzeFuncs.cpp.orig
Only in setiathome-gpu-8.22/AKv8/client: analyzeFuncs.cpp.rej
