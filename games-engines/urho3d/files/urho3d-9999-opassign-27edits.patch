diff -ur urho3d-9999.orig/Source/Urho3D/AngelScript/DatabaseAPI.cpp urho3d-9999/Source/Urho3D/AngelScript/DatabaseAPI.cpp
--- urho3d-9999.orig/Source/Urho3D/AngelScript/DatabaseAPI.cpp	2016-02-24 10:33:49.650461541 -0800
+++ urho3d-9999/Source/Urho3D/AngelScript/DatabaseAPI.cpp	2016-02-24 11:44:27.418042123 -0800
@@ -82,6 +82,7 @@
     engine->RegisterObjectMethod("DbConnection", "DbResult Execute(const String&in, bool useCursorEvent = false)", asMETHOD(DbConnection, Execute), asCALL_THISCALL);
     engine->RegisterObjectMethod("DbConnection", "const String& get_connectionString() const", asMETHOD(DbConnection, GetConnectionString), asCALL_THISCALL);
     engine->RegisterObjectMethod("DbConnection", "bool get_connected() const", asMETHOD(DbConnection, IsConnected), asCALL_THISCALL);
+    engine->RegisterObjectMethod("DbConnection", "DbConnection& opAssign(const DbConnection&in)", asMETHODPR(DbConnection, operator =, (const DbConnection&), DbConnection&), asCALL_THISCALL);
 }
 
 static Database* GetDatabase()
diff -ur urho3d-9999.orig/Source/Urho3D/AngelScript/GraphicsAPI.cpp urho3d-9999/Source/Urho3D/AngelScript/GraphicsAPI.cpp
--- urho3d-9999.orig/Source/Urho3D/AngelScript/GraphicsAPI.cpp	2016-02-24 10:33:49.649461503 -0800
+++ urho3d-9999/Source/Urho3D/AngelScript/GraphicsAPI.cpp	2016-02-24 10:58:54.952159016 -0800
@@ -123,6 +123,7 @@
     engine->RegisterObjectMethod("Camera", "Frustum get_viewSpaceFrustum() const", asMETHOD(Camera, GetViewSpaceFrustum), asCALL_THISCALL);
     engine->RegisterObjectMethod("Camera", "float get_halfViewSize() const", asMETHOD(Camera, GetHalfViewSize), asCALL_THISCALL);
     engine->RegisterObjectMethod("Camera", "Matrix3x4 get_effectiveWorldTransform() const", asMETHOD(Camera, GetEffectiveWorldTransform), asCALL_THISCALL);
+    engine->RegisterObjectMethod("Camera", "Camera& opAssign(const Camera&in)", asMETHODPR(Camera, operator =, (const Camera&), Camera&), asCALL_THISCALL);
 }
 
 static Node* BoneGetNode(Bone* ptr)
@@ -425,6 +426,7 @@
     engine->RegisterObjectMethod("RenderPath", "const RenderPathCommand& get_commands(uint) const", asFUNCTION(RenderPathGetCommand), asCALL_CDECL_OBJLAST);
     engine->RegisterObjectMethod("RenderPath", "void set_shaderParameters(const String&in, const Variant&in)", asMETHOD(RenderPath, SetShaderParameter), asCALL_THISCALL);
     engine->RegisterObjectMethod("RenderPath", "const Variant& get_shaderParameters(const String&in) const", asMETHOD(RenderPath, GetShaderParameter), asCALL_THISCALL);
+    engine->RegisterObjectMethod("RenderPath", "RenderPath& opAssign(const RenderPath&in)", asMETHODPR(RenderPath, operator =, (const RenderPath&), RenderPath&), asCALL_THISCALL);
 }
 
 static void RegisterTextures(asIScriptEngine* engine)
@@ -459,7 +461,9 @@
     engine->RegisterEnumValue("RenderSurfaceUpdateMode", "SURFACE_MANUALUPDATE", SURFACE_MANUALUPDATE);
     engine->RegisterEnumValue("RenderSurfaceUpdateMode", "SURFACE_UPDATEVISIBLE", SURFACE_UPDATEVISIBLE);
     engine->RegisterEnumValue("RenderSurfaceUpdateMode", "SURFACE_UPDATEALWAYS", SURFACE_UPDATEALWAYS);
+
     RegisterTexture<Texture>(engine, "Texture");
+    engine->RegisterObjectMethod("Texture", "Texture& opAssign(const Texture&in)", asMETHODPR(Texture, operator =, (const Texture&), Texture&), asCALL_THISCALL);
 
     RegisterObject<Viewport>(engine, "Viewport");
     engine->RegisterObjectBehaviour("Viewport", asBEHAVE_FACTORY, "Viewport@+ f()", asFUNCTION(ConstructViewport), asCALL_CDECL);
@@ -481,6 +485,7 @@
     engine->RegisterObjectMethod("Viewport", "Ray GetScreenRay(int, int) const", asMETHOD(Viewport, GetScreenRay), asCALL_THISCALL);
     engine->RegisterObjectMethod("Viewport", "Vector2 WorldToScreenPoint(const Vector3&in) const", asMETHOD(Viewport, WorldToScreenPoint), asCALL_THISCALL);
     engine->RegisterObjectMethod("Viewport", "Vector3 ScreenToWorldPoint(int, int, float) const", asMETHOD(Viewport, ScreenToWorldPoint), asCALL_THISCALL);
+    engine->RegisterObjectMethod("Viewport", "Viewport& opAssign(const Viewport&in)", asMETHODPR(Viewport, operator =, (const Viewport&), Viewport&), asCALL_THISCALL);
 
     engine->RegisterObjectType("RenderSurface", 0, asOBJ_REF);
     engine->RegisterObjectBehaviour("RenderSurface", asBEHAVE_ADDREF, "void f()", asMETHOD(RenderSurface, AddRef), asCALL_THISCALL);
@@ -884,6 +889,7 @@
     engine->RegisterObjectMethod("Material", "uint8 get_renderOrder() const", asMETHOD(Material, GetRenderOrder), asCALL_THISCALL);
     engine->RegisterObjectMethod("Material", "void set_scene(Scene@+)", asMETHOD(Material, SetScene), asCALL_THISCALL);
     engine->RegisterObjectMethod("Material", "Scene@+ get_scene() const", asMETHOD(Material, GetScene), asCALL_THISCALL);
+    engine->RegisterObjectMethod("Material", "Material& opAssign(const Material&in)", asMETHODPR(Material, operator =, (const Material&), Material&), asCALL_THISCALL);
 
     engine->RegisterGlobalFunction("String GetTextureUnitName(TextureUnit)", asFUNCTION(Material::GetTextureUnitName), asCALL_CDECL);
 }
@@ -913,6 +919,7 @@
     engine->RegisterObjectMethod("Model", "bool set_geometryCenters(uint, const Vector3&in)", asMETHOD(Model, SetGeometryCenter), asCALL_THISCALL);
     engine->RegisterObjectMethod("Model", "const Vector3& get_geometryCenters(uint) const", asMETHOD(Model, GetGeometryCenter), asCALL_THISCALL);
     engine->RegisterObjectMethod("Model", "uint get_numMorphs() const", asMETHOD(Model, GetNumMorphs), asCALL_THISCALL);
+    engine->RegisterObjectMethod("Model", "Model& opAssign(const Model&in)", asMETHODPR(Model, operator =, (const Model&), Model&), asCALL_THISCALL);
 }
 
 static void ConstructAnimationKeyFrame(AnimationKeyFrame* ptr)
@@ -1038,6 +1045,7 @@
     engine->RegisterGlobalProperty("uint DEFAULT_LIGHTMASK", (void*)&DEFAULT_LIGHTMASK);
 
     RegisterDrawable<Drawable>(engine, "Drawable");
+    engine->RegisterObjectMethod("Drawable", "Drawable& opAssign(const Drawable&in)", asMETHODPR(Drawable, operator =, (const Drawable&), Drawable&), asCALL_THISCALL);
 }
 
 static void ConstructCascadeParameters(CascadeParameters* ptr)
@@ -1199,6 +1207,7 @@
     engine->RegisterObjectMethod("StaticModelGroup", "void RemoveAllInstanceNodes()", asMETHOD(StaticModelGroup, RemoveAllInstanceNodes), asCALL_THISCALL);
     engine->RegisterObjectMethod("StaticModelGroup", "uint get_numInstanceNodes() const", asMETHOD(StaticModelGroup, GetNumInstanceNodes), asCALL_THISCALL);
     engine->RegisterObjectMethod("StaticModelGroup", "Node@+ get_instanceNodes(uint) const", asMETHOD(StaticModelGroup, GetInstanceNode), asCALL_THISCALL);
+    engine->RegisterObjectMethod("StaticModelGroup", "StaticModelGroup& opAssign(const StaticModelGroup&in)", asMETHODPR(StaticModelGroup, operator =, (const StaticModelGroup&), StaticModelGroup&), asCALL_THISCALL);
 }
 
 static void RegisterSkybox(asIScriptEngine* engine)
@@ -1463,6 +1472,7 @@
     engine->RegisterObjectMethod("ParticleEffect", "uint get_numTextureFrames() const", asMETHOD(ParticleEffect, GetNumTextureFrames), asCALL_THISCALL);
     engine->RegisterObjectMethod("ParticleEffect", "void set_numTextureFrames(uint)", asMETHOD(ParticleEffect, SetNumTextureFrames), asCALL_THISCALL);
     engine->RegisterObjectMethod("ParticleEffect", "TextureFrame@+ GetTextureFrame(uint) const", asMETHOD(ParticleEffect, GetTextureFrame), asCALL_THISCALL);
+    engine->RegisterObjectMethod("ParticleEffect", "ParticleEffect& opAssign(const ParticleEffect&in)", asMETHODPR(ParticleEffect, operator =, (const ParticleEffect&), ParticleEffect&), asCALL_THISCALL);
 }
 
 static void RegisterParticleEmitter(asIScriptEngine* engine)
@@ -1550,6 +1560,7 @@
     engine->RegisterObjectMethod("DecalSet", "void set_maxIndices(uint)", asMETHOD(DecalSet, SetMaxIndices), asCALL_THISCALL);
     engine->RegisterObjectMethod("DecalSet", "uint get_maxIndices() const", asMETHOD(DecalSet, GetMaxIndices), asCALL_THISCALL);
     engine->RegisterObjectMethod("DecalSet", "Zone@+ get_zone() const", asMETHOD(DecalSet, GetZone), asCALL_THISCALL);
+    engine->RegisterObjectMethod("DecalSet", "DecalSet& opAssign(const DecalSet&in)", asMETHODPR(DecalSet, operator =, (const DecalSet&), DecalSet&), asCALL_THISCALL);
 }
 
 static void RegisterTerrain(asIScriptEngine* engine)
diff -ur urho3d-9999.orig/Source/Urho3D/AngelScript/NetworkAPI.cpp urho3d-9999/Source/Urho3D/AngelScript/NetworkAPI.cpp
--- urho3d-9999.orig/Source/Urho3D/AngelScript/NetworkAPI.cpp	2016-02-24 10:33:49.650461541 -0800
+++ urho3d-9999/Source/Urho3D/AngelScript/NetworkAPI.cpp	2016-02-24 11:42:59.692714032 -0800
@@ -90,10 +90,12 @@
     engine->RegisterObjectProperty("Connection", "Controls controls", offsetof(Connection, controls_));
     engine->RegisterObjectProperty("Connection", "uint8 timeStamp", offsetof(Connection, timeStamp_));
     engine->RegisterObjectProperty("Connection", "VariantMap identity", offsetof(Connection, identity_));
+    engine->RegisterObjectMethod("Connection", "Connection& opAssign(const Connection&in)", asMETHODPR(Connection, operator =, (const Connection&), Connection&), asCALL_THISCALL);
 
     // Register SetOwner/GetOwner now
     engine->RegisterObjectMethod("Node", "void set_owner(Connection@+)", asMETHOD(Node, SetOwner), asCALL_THISCALL);
     engine->RegisterObjectMethod("Node", "Connection@+ get_owner() const", asMETHOD(Node, GetOwner), asCALL_THISCALL);
+    engine->RegisterObjectMethod("Node", "Node& opAssign(const Node&in)", asMETHODPR(Node, operator =, (const Node&), Node&), asCALL_THISCALL);
 }
 
 static void RegisterHttpRequest(asIScriptEngine* engine)
diff -ur urho3d-9999.orig/Source/Urho3D/AngelScript/PhysicsAPI.cpp urho3d-9999/Source/Urho3D/AngelScript/PhysicsAPI.cpp
--- urho3d-9999.orig/Source/Urho3D/AngelScript/PhysicsAPI.cpp	2016-02-24 10:33:49.649461503 -0800
+++ urho3d-9999/Source/Urho3D/AngelScript/PhysicsAPI.cpp	2016-02-24 11:55:18.415756722 -0800
@@ -188,6 +188,7 @@
     engine->RegisterObjectMethod("RigidBody", "void set_collisionEventMode(CollisionEventMode)", asMETHOD(RigidBody, SetCollisionEventMode), asCALL_THISCALL);
     engine->RegisterObjectMethod("RigidBody", "CollisionEventMode get_collisionEventMode() const", asMETHOD(RigidBody, GetCollisionEventMode), asCALL_THISCALL);
     engine->RegisterObjectMethod("RigidBody", "Array<RigidBody@>@ get_collidingBodies() const", asFUNCTION(RigidBodyGetCollidingBodies), asCALL_CDECL_OBJLAST);
+    engine->RegisterObjectMethod("RigidBody", "RigidBody& opAssign(const RigidBody&in)", asMETHODPR(RigidBody, operator =, (const RigidBody&), RigidBody&), asCALL_THISCALL);
 }
 
 static void RegisterConstraint(asIScriptEngine* engine)
@@ -226,6 +227,7 @@
     engine->RegisterObjectMethod("Constraint", "RigidBody@+ get_ownBody() const", asMETHOD(Constraint, GetOwnBody), asCALL_THISCALL);
     engine->RegisterObjectMethod("Constraint", "void set_otherBody(RigidBody@+)", asMETHOD(Constraint, SetOtherBody), asCALL_THISCALL);
     engine->RegisterObjectMethod("Constraint", "RigidBody@+ get_otherBody() const", asMETHOD(Constraint, GetOtherBody), asCALL_THISCALL);
+    engine->RegisterObjectMethod("Constraint", "Constraint& opAssign(const Constraint&in)", asMETHODPR(Constraint, operator =, (const Constraint&), Constraint&), asCALL_THISCALL);
 }
 
 static CScriptArray* PhysicsWorldRaycast(const Ray& ray, float maxDistance, unsigned collisionMask, PhysicsWorld* ptr)
diff -ur urho3d-9999.orig/Source/Urho3D/AngelScript/SceneAPI.cpp urho3d-9999/Source/Urho3D/AngelScript/SceneAPI.cpp
--- urho3d-9999.orig/Source/Urho3D/AngelScript/SceneAPI.cpp	2016-02-24 10:33:49.650461541 -0800
+++ urho3d-9999/Source/Urho3D/AngelScript/SceneAPI.cpp	2016-02-24 11:56:31.354481303 -0800
@@ -385,6 +385,7 @@
     engine->RegisterObjectMethod("Scene", "uint get_checksum() const", asMETHOD(Scene, GetChecksum), asCALL_THISCALL);
     engine->RegisterObjectMethod("Scene", "const String& get_fileName() const", asMETHOD(Scene, GetFileName), asCALL_THISCALL);
     engine->RegisterObjectMethod("Scene", "Array<PackageFile@>@ get_requiredPackageFiles() const", asFUNCTION(SceneGetRequiredPackageFiles), asCALL_CDECL_OBJLAST);
+    engine->RegisterObjectMethod("Scene", "Scene& opAssign(const Scene&in)", asMETHODPR(Scene, operator =, (const Scene&), Scene&), asCALL_THISCALL);
     engine->RegisterObjectMethod("Node", "Scene@+ get_scene() const", asMETHOD(Node, GetScene), asCALL_THISCALL);
     engine->RegisterGlobalFunction("Scene@+ get_scene()", asFUNCTION(GetScriptContextScene), asCALL_CDECL);
 
diff -ur urho3d-9999.orig/Source/Urho3D/AngelScript/UIAPI.cpp urho3d-9999/Source/Urho3D/AngelScript/UIAPI.cpp
--- urho3d-9999.orig/Source/Urho3D/AngelScript/UIAPI.cpp	2016-02-24 10:33:49.649461503 -0800
+++ urho3d-9999/Source/Urho3D/AngelScript/UIAPI.cpp	2016-02-24 11:41:12.078632218 -0800
@@ -115,6 +115,7 @@
     engine->RegisterGlobalProperty("const uint DD_SOURCE_AND_TARGET", (void*)&DD_SOURCE_AND_TARGET);
 
     RegisterUIElement<UIElement>(engine, "UIElement");
+    engine->RegisterObjectMethod("UIElement", "UIElement& opAssign(const UIElement&in)", asMETHODPR(UIElement, operator =, (const UIElement&), UIElement&), asCALL_THISCALL);
 
     // Register TouchState touchedElement property now
     engine->RegisterObjectMethod("TouchState", "UIElement@+ get_touchedElement()", asMETHOD(TouchState, GetTouchedElement), asCALL_THISCALL);
@@ -175,11 +176,13 @@
     engine->RegisterObjectMethod("Cursor", "const String& get_shape() const", asMETHOD(Cursor, GetShape), asCALL_THISCALL);
     engine->RegisterObjectMethod("Cursor", "void set_useSystemShapes(bool)", asMETHOD(Cursor, SetUseSystemShapes), asCALL_THISCALL);
     engine->RegisterObjectMethod("Cursor", "bool get_useSystemShapes() const", asMETHOD(Cursor, GetUseSystemShapes), asCALL_THISCALL);
+    engine->RegisterObjectMethod("Cursor", "Cursor& opAssign(const Cursor&in)", asMETHODPR(Cursor, operator =, (const Cursor&), Cursor&), asCALL_THISCALL);
 }
 
 static void RegisterButton(asIScriptEngine* engine)
 {
     RegisterButton<Button>(engine, "Button");
+    engine->RegisterObjectMethod("Button", "Button& opAssign(const Button&in)", asMETHODPR(Button, operator =, (const Button&), Button&), asCALL_THISCALL);
 }
 
 static void RegisterCheckBox(asIScriptEngine* engine)
@@ -205,6 +208,7 @@
     engine->RegisterObjectMethod("Slider", "BorderImage@+ get_knob() const", asMETHOD(Slider, GetKnob), asCALL_THISCALL);
     engine->RegisterObjectMethod("Slider", "void set_repeatRate(float)", asMETHOD(Slider, SetRepeatRate), asCALL_THISCALL);
     engine->RegisterObjectMethod("Slider", "float get_repeatRate() const", asMETHOD(Slider, GetRepeatRate), asCALL_THISCALL);
+    engine->RegisterObjectMethod("Slider", "Slider& opAssign(const Slider&in)", asMETHODPR(Slider, operator =, (const Slider&), Slider&), asCALL_THISCALL);
 }
 
 static void RegisterScrollBar(asIScriptEngine* engine)
@@ -395,6 +399,7 @@
     engine->RegisterObjectMethod("Text", "IntVector2 get_charPositions(uint)", asMETHOD(Text, GetCharPosition), asCALL_THISCALL);
     engine->RegisterObjectMethod("Text", "IntVector2 get_charSizes(uint)", asMETHOD(Text, GetCharSize), asCALL_THISCALL);
     engine->RegisterObjectMethod("Text", "int get_rowHeight() const", asMETHOD(Text, GetRowHeight), asCALL_THISCALL);
+    engine->RegisterObjectMethod("Text", "Text& opAssign(const Text&in)", asMETHODPR(Text, operator =, (const Text&), Text&), asCALL_THISCALL);
 }
 
 static void RegisterText3D(asIScriptEngine* engine)
@@ -463,6 +468,7 @@
     engine->RegisterObjectMethod("LineEdit", "bool get_textCopyable() const", asMETHOD(LineEdit, IsTextCopyable), asCALL_THISCALL);
     engine->RegisterObjectMethod("LineEdit", "Text@+ get_textElement() const", asMETHOD(LineEdit, GetTextElement), asCALL_THISCALL);
     engine->RegisterObjectMethod("LineEdit", "BorderImage@+ get_cursor() const", asMETHOD(LineEdit, GetCursor), asCALL_THISCALL);
+    engine->RegisterObjectMethod("LineEdit", "LineEdit& opAssign(const LineEdit&in)", asMETHODPR(LineEdit, operator =, (const LineEdit&), LineEdit&), asCALL_THISCALL);
 }
 
 static void RegisterMenu(asIScriptEngine* engine)
@@ -536,6 +542,7 @@
 static void RegisterWindow(asIScriptEngine* engine)
 {
     RegisterWindow<Window>(engine, "Window");
+    engine->RegisterObjectMethod("Window", "Window& opAssign(const Window&in)", asMETHODPR(Window, operator =, (const Window&), Window&), asCALL_THISCALL);
 }
 
 static void RegisterView3D(asIScriptEngine* engine)
diff -ur urho3d-9999.orig/Source/Urho3D/AngelScript/Urho2DAPI.cpp urho3d-9999/Source/Urho3D/AngelScript/Urho2DAPI.cpp
--- urho3d-9999.orig/Source/Urho3D/AngelScript/Urho2DAPI.cpp	2016-02-24 10:33:49.650461541 -0800
+++ urho3d-9999/Source/Urho3D/AngelScript/Urho2DAPI.cpp	2016-02-24 11:04:09.922168913 -0800
@@ -73,6 +73,7 @@
     engine->RegisterObjectMethod("Sprite2D", "const Vector2& get_hotSpot() const", asMETHOD(Sprite2D, GetHotSpot), asCALL_THISCALL);
     engine->RegisterObjectMethod("Sprite2D", "void set_offset(const IntVector2&in)", asMETHOD(Sprite2D, SetOffset), asCALL_THISCALL);
     engine->RegisterObjectMethod("Sprite2D", "const IntVector2& get_offset() const", asMETHOD(Sprite2D, GetOffset), asCALL_THISCALL);
+    engine->RegisterObjectMethod("Sprite2D", "Sprite2D& opAssign(const Sprite2D&in)", asMETHODPR(Sprite2D, operator =, (const Sprite2D&), Sprite2D&), asCALL_THISCALL);
 }
 
 static void RegisterSpriteSheet2D(asIScriptEngine* engine)
@@ -325,6 +326,7 @@
     engine->RegisterObjectMethod("RigidBody2D", "void ApplyTorque(float torque, bool)", asMETHOD(RigidBody2D, ApplyTorque), asCALL_THISCALL);
     engine->RegisterObjectMethod("RigidBody2D", "void ApplyLinearImpulse(const Vector2&in, const Vector2&in, bool)", asMETHOD(RigidBody2D, ApplyLinearImpulse), asCALL_THISCALL);
     engine->RegisterObjectMethod("RigidBody2D", "void ApplyAngularImpulse(float, bool)", asMETHOD(RigidBody2D, ApplyAngularImpulse), asCALL_THISCALL);
+    engine->RegisterObjectMethod("RigidBody2D", "RigidBody2D& opAssign(const RigidBody2D&in)", asMETHODPR(RigidBody2D, operator =, (const RigidBody2D&), RigidBody2D&), asCALL_THISCALL);
 }
 
 static void ConstructPhysicsRaycastResult2D(PhysicsRaycastResult2D* ptr)
