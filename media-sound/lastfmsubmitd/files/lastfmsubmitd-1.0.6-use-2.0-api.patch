diff -urp lastfmsubmitd-1.0.6.orig/lastfmsubmitd lastfmsubmitd-1.0.6/lastfmsubmitd
--- lastfmsubmitd-1.0.6.orig/lastfmsubmitd	2010-04-18 18:41:31.000000000 -0700
+++ lastfmsubmitd-1.0.6/lastfmsubmitd	2016-10-02 03:39:18.556058681 -0700
@@ -2,11 +2,16 @@
 
 import sys
 import os
+import calendar
+import collections
 import time
 import getopt
+import libxml2
+import operator
 import socket
 import urllib
 import signal
+from threading import Timer
 
 try:
     from hashlib import md5
@@ -25,7 +30,10 @@ USAGE = 'usage: %s [--debug] [--no-daemo
 CLIENT_ID = 'lsd'
 CLIENT_VERSION = '1.0.6'
 
-SERVER_URL = 'http://post.audioscrobbler.com/'
+SERVER_URL = 'https://ws.audioscrobbler.com/2.0/'
+API_KEY=""; #use your own
+SHARED_SECRET=""; #use your own
+
 PROTOCOL_VERSION = '1.1'
 SUB_CHUNK_SIZE = 10
 DEF_INTERVAL = 1
@@ -134,59 +142,83 @@ class LastFmSession:
         self.uncommitted_subs = []
         self.handshake_url = self.make_handshake_url()
         self.submit_url = None
+        self.lastChunk = None
 
     def make_handshake_url(self):
-        args = {
-            'hs': 'true',
-            'p': PROTOCOL_VERSION,
-            'c': CLIENT_ID,
-            'v': CLIENT_VERSION,
-            'u': self.cli.conf.user,
-            }
-        return '?'.join([self.cli.conf.url, urllib.urlencode(args)])
+         return self.cli.conf.url
 
     def handshake(self):
         self.cli.log.debug('Handshake URL: %s' % self.handshake_url)
 
         try:
             signal.alarm(HTTP_TIMEOUT)
-            response = urllib.urlopen(self.handshake_url)
-            status_line = response.readline().strip()
+
+            api_sig = ''
+            api_sig = api_sig + 'api_key' + API_KEY
+            api_sig = api_sig + 'method' + 'auth.getMobileSession'
+            api_sig = api_sig + 'password' + self.cli.conf.password
+            api_sig = api_sig + 'username' + self.cli.conf.user
+            api_sig = api_sig + SHARED_SECRET
+            api_sig2 = md5(api_sig).hexdigest()
+
+            args = {}
+            args['method'] = 'auth.getMobileSession'
+            args['api_key'] = API_KEY
+            args['password'] = self.cli.conf.password
+            args['username'] = self.cli.conf.user
+            args['api_sig'] = api_sig2
+
+            post_data = urllib.urlencode(args)
+
+            self.cli.log.info('Submitting: %s' % post_data)
+
+            response = urllib.urlopen(self.handshake_url, post_data)
+            l = ''.join(response.readlines())
+            d = libxml2.parseDoc("%s" % l)
+
+            try:
+                status = d.xpathEval('//lfm/@status')
+                status_line_light = str(status[0].children)
+                if status_line_light == 'failed':
+                    reason = d.xpathEval('//lfm/error')
+                    reason = str(reason[0].children)
+                    try:
+                        status = d.xpathEval('//lfm/error/@code')
+                        status_line_num = str(status[0].children)
+                    except IndexError:
+                        status_line_num = ''
+                else:
+                    t = d.xpathEval('//lfm/session/key')
+                    self.session_key = str(t[0].children)
+            except IndexError:
+                status_line_light = ''
+                reason = ''
+
+            d.freeDoc()
+
             signal.alarm(0)
         # XXX: handshaketimeouterror?
         except IOError, e:
             signal.alarm(0)
             raise HandshakeError(e)
 
-        if status_line == 'UPTODATE':
-            self.read_submit_url(response)
-        elif status_line.startswith('UPDATE'):
-            try:
-                msg, url = status_line.split(' ', 1)
-                self.cli.log.warning('Plugin is out of date: %s' % msg)
-                self.cli.log.info('Please go to %s to upgrade' % url)
-            except ValueError:
-                self.cli.log.warning('Plugin is out of date')
+        if status_line_light == 'ok':
             self.read_submit_url(response)
-        elif status_line == 'BADUSER':
-            raise HandshakeError('bad username')
-        elif status_line.startswith('FAILED'):
-            try:
-                failed, reason = status_line.split(' ', 1)
-            except ValueError:
-                reason = 'unknown: "%s"' % status_line
+            pass
+        elif status_line_num == '4': #BADUSER
+            raise HandshakeError('bad username or password')
+        elif status_line_light.startswith('failed'):
+            reason = 'unknown: "%s"' % reason
             raise HandshakeError(reason)
         else:
-            raise HandshakeError("can't parse response: %s" % status_line)
+            raise HandshakeError("can't parse response: %s" % status_line_num)
 
         self.connected = True
         self.read_interval(response)
         time.sleep(self.interval)
 
     def read_submit_url(self, response):
-        challenge = response.readline().strip()
-        self.session_key = self.digest(challenge)
-        self.submit_url = response.readline().strip()
+        self.submit_url = self.cli.conf.url
         self.cli.log.info('Handshake sucessful')
         self.cli.log.debug('Submit URL: %s' % self.submit_url)
 
@@ -204,33 +236,93 @@ class LastFmSession:
         sess_hash = md5(pass_hash.hexdigest() + challenge)
         return sess_hash.hexdigest()
 
-    def submit(self, spool):
+    def submitScrobble(self, spool):
+        self.cli.log.debug('Entering submitScrobble()')
+        post_data = []
+        args = {'method': 'track.scrobble', 'api_key': API_KEY, 'sk': self.session_key}
         while spool.subs:
             chunk = spool.subs[:SUB_CHUNK_SIZE]
-            args = {'u': self.cli.conf.user, 's': self.session_key}
-            post_data = [urllib.urlencode(args)]
+            self.lastChunk = chunk
+            #post_data = [urllib.urlencode(args)]
             for i, sub in enumerate(chunk):
-                args = {}
-                args['a[%d]'%i] = utf8(sub['artist'])
-                args['t[%d]'%i] = utf8(sub['title'])
-                args['l[%d]'%i] = utf8(sub['length'])
-                args['i[%d]'%i] = time.strftime(lastfm.TIME_FMT, sub['time'])
                 try:
-                    args['b[%d]' % i] = utf8(sub['album'])
+                    args['album[%d]' % i] = sub['album']
                 except KeyError:
-                    args['b[%d]' % i] = ''
+                    pass
                 try:
-                    args['m[%d]' % i] = utf8(sub['mbid'])
+                    args['albumArtist[%d]' % i] = sub['albumArtist']
                 except KeyError:
-                    args['m[%d]' % i] = ''
+                    pass
+                args['artist[%d]'%i] = sub['artist'] #required
+                try:
+                    args['chosenByUser[%d]' % i] = sub['chosenByUser']
+                except KeyError:
+                    pass
+                try:
+                    args['context[%d]' % i] = sub['context']
+                except KeyError:
+                    pass
+                try:
+                    args['duration[%d]' % i] = sub['length']
+                except KeyError:
+                    pass
+                try:
+                    args['mbid[%d]' % i] = sub['mbid']
+                except KeyError:
+                    pass
+                try:
+                    args['streamId[%d]' % i] = sub['streamId']
+                except KeyError:
+                    pass
+                try:
+                    args['timestamp[%d]' % i] = str(int(calendar.timegm(sub['time'])))
+                except KeyError:
+                    pass
+                args['track[%d]' % i] = sub['title'] #required
+                try:
+                    args['trackNumber[%d]' % i] = sub['trackNumber']
+                except KeyError:
+                    pass
                 self.cli.log.info('Submitting: %s' % lastfm.repr(sub))
-                post_data.append(urllib.urlencode(args))
 
-            post_str = '&'.join(post_data)
-            self.cli.log.debug('POST data: %s' % post_str)
+            api_sig = ''
+            od = collections.OrderedDict(sorted(args.items()))
+            for k, v in od.items():
+                api_sig = api_sig + str(k) + str(v)
+
+	    api_sig = api_sig + SHARED_SECRET;
+            api_sig2 = md5(api_sig).hexdigest()
+
+            args['api_sig']=api_sig2
+
+            post_data = urllib.urlencode(args)
+
+            status_line_light = ''
+            status_line_num = ''
             try:
                 signal.alarm(HTTP_TIMEOUT)
-                response = urllib.urlopen(self.submit_url, post_str)
+                response = urllib.urlopen(self.submit_url, post_data)
+
+                l = ''.join(response.readlines())
+                d = libxml2.parseDoc("%s" % l)
+
+                try:
+                    status = d.xpathEval('//lfm/@status')
+                    status_line_light = str(status[0].children)
+                    if status_line_light == 'failed':
+                        reason = d.xpathEval('//lfm/error')
+                        reason = str(reason[0].children)
+                        try:
+                            status = d.xpathEval('//lfm/error/@code')
+                            status_line_num = str(status[0].children)
+                        except IndexError:
+                            status_line_num = ''
+                except IndexError:
+                    status_line_light = ''
+                    reason = ''
+
+                d.freeDoc()
+
                 signal.alarm(0)
             except (IOError, AttributeError), e:
                 # The AttributeError is some bizarre urllib bug where
@@ -240,28 +332,126 @@ class LastFmSession:
                 raise SubTimeoutError(e)
 
             failed = False
-            status_line = response.readline().strip()
 
-            if status_line == 'OK':
+            if status_line_light == 'ok':
                 self.cli.log.info('Submission(s) accepted')
                 # Now, and only now, we do our side effect.
                 spool.subs = spool.subs[SUB_CHUNK_SIZE:]
                 spool.sync()
-            elif status_line == 'BADAUTH':
-                self.connected = False
-                raise SessionError('incorrect password')
-            elif status_line == 'BADSESSION':
-                self.cli.log.info('session failed, reconnecting')
-                self.handshake()
-            elif status_line.startswith('FAILED'):
-                try:
-                    failed, reason = status_line.split(' ', 1)
-                except ValueError:
-                    reason = 'unknown: "%s"' % status_line
+            elif status_line_light.startswith('failed'):
+                reason = 'unknown: "%s"' % reason
                 raise InvalidSubError(reason)
             else:
                 raise InvalidSubError("can't parse response: %s" %
-                    status_line)
+                    status_line_num)
+
+            self.read_interval(response)
+            time.sleep(self.interval)
+
+    def submitNowPlaying(self):
+        self.cli.log.debug('Entering submitNowPlaying()')
+        if self.lastChunk == None:
+            return
+        post_data = []
+        args = {'method': 'track.updateNowPlaying', 'api_key': API_KEY, 'sk': self.session_key}
+        if True:
+            chunk = self.lastChunk
+            #post_data = [urllib.urlencode(args)]
+            timestamp = None
+            for i, sub in enumerate(chunk):
+                try:
+                    args['album'] = sub['album']
+                except KeyError:
+                    pass
+                try:
+                    args['albumArtist'] = sub['albumArtist']
+                except KeyError:
+                    pass
+                args['artist'] = sub['artist'] #required
+                try:
+                    args['context'] = sub['context']
+                except KeyError:
+                    pass
+                try:
+                    args['duration'] = '31' #we poll and check every 31 seconds
+                except KeyError:
+                    pass
+                try:
+                    args['mbid'] = sub['mbid']
+                except KeyError:
+                    pass
+                args['track'] = sub['title'] #required
+                try:
+                    args['trackNumber'] = sub['trackNumber']
+                except KeyError:
+                    pass
+                timestamp = sub['time']
+                self.cli.log.info('Submitting: %s' % lastfm.repr(sub))
+                break
+
+            api_sig = ''
+            od = collections.OrderedDict(sorted(args.items()))
+            for k, v in od.items():
+                api_sig = api_sig + str(k) + str(v)
+
+	    api_sig = api_sig + SHARED_SECRET;
+            api_sig2 = md5(api_sig).hexdigest()
+
+            args['api_sig']=api_sig2
+
+            post_data = urllib.urlencode(args)
+
+            try:
+                signal.alarm(HTTP_TIMEOUT)
+
+                if int(time.time()) < int(calendar.timegm(timestamp))+int(args['duration']):
+                    self.cli.log.info('Track is still playing.  Submitting...')
+	            response = urllib.urlopen(self.submit_url, post_data)
+		else:
+                    self.cli.log.info('Track already done playing')
+                    return
+
+                l = ''.join(response.readlines())
+                d = libxml2.parseDoc("%s" % l)
+
+                try:
+                    status = d.xpathEval('//lfm/@status')
+                    status_line_light = str(status[0].children)
+                    if status_line_light == 'failed':
+                        reason = d.xpathEval('//lfm/error')
+                        reason = str(reason[0].children)
+                        try:
+                            status = d.xpathEval('//lfm/error/@code')
+                            status_line_num = str(status[0].children)
+                        except IndexError:
+                            status_line_num = ''
+                except IndexError:
+                    status_line_light = ''
+                    reason = ''
+
+                d.freeDoc()
+
+                signal.alarm(0)
+            except (IOError, AttributeError), e:
+                # The AttributeError is some bizarre urllib bug where
+                # http_error_default tries to make an addinfourl with an fp
+                # that's actually None. I have no idea. It should be IOError.
+                signal.alarm(0)
+                raise SubTimeoutError(e)
+
+            failed = False
+
+            if status_line_light == 'ok':
+                self.cli.log.info('Submission(s) accepted')
+                # Now, and only now, we do our side effect.
+                #spool.subs = spool.subs[SUB_CHUNK_SIZE:]
+                #spool.sync()
+            elif status_line_light.startswith('failed'):
+                reason = 'unknown: "%s"' % reason
+                raise InvalidSubError(reason)
+            else:
+                raise InvalidSubError("can't parse response: %s" %
+                    status_line_num)
 
             self.read_interval(response)
             time.sleep(self.interval)
@@ -270,11 +460,18 @@ class LsdConfig(lastfm.config.Config):
     def __init__(self):
         lastfm.config.Config.__init__(self, name=DAEMON_NAME)
         self.url = self.cp.get('server', 'url', SERVER_URL)
+        if self.url != SERVER_URL:
+            self.cli.log.info('SECURITY ERROR:  PLEASE CHANGE the url in /etc/lastfmsubmitd.conf to '+SERVER_URL)
+            sys.exit(-1)
         self.user = self.cp.get('account', 'user', None)
         self.password = self.cp.get('account', 'password', None)
         if not (self.user and self.password):
             raise NoAccountError
 
+def updateCurrentTrack(session):
+    session.submitNowPlaying()
+    Timer(31, updateCurrentTrack, [session]).start()
+
 def daemon(cli, online):
     session = LastFmSession(cli)
     spool = LsdSpool(cli)
@@ -297,6 +494,8 @@ def daemon(cli, online):
     signal.signal(signal.SIGHUP, reinit)
     signal.signal(signal.SIGALRM, alarm)
 
+    Timer(31, updateCurrentTrack, [session]).start()
+
     while True:
         if throttle.ready():
             spool.poll()
@@ -312,7 +511,7 @@ def daemon(cli, online):
             if session.connected and spool.subs:
                 try:
                     cli.log.debug('Doing submit, %d sub(s)' % len(spool.subs))
-                    session.submit(spool)
+                    session.submitScrobble(spool)
                     cli.log.debug('Done, %d in spool' % len(spool.subs))
                     throttle.reset()
                 except SessionError, e:
