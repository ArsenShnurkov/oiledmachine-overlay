diff -urp gycm-1963a9f6b51a3aff7c44780dcb13d056a8659b21.orig/ycmd.cpp gycm-1963a9f6b51a3aff7c44780dcb13d056a8659b21/ycmd.cpp
--- gycm-1963a9f6b51a3aff7c44780dcb13d056a8659b21.orig/ycmd.cpp	2017-01-18 12:52:15.198411374 -0800
+++ gycm-1963a9f6b51a3aff7c44780dcb13d056a8659b21/ycmd.cpp	2017-01-18 12:53:09.366510131 -0800
@@ -282,15 +282,28 @@ gchar * Ycmd::b64HexHMAC(std::string& da
 
 void Ycmd::send(Json::Value& _json, std::string _handler){
 	if(!assertServer()) return; // A good idea?
-	ne_request* req = ne_request_create(http,"POST",_handler.c_str());
+	std::string method("POST");
+	ne_request* req = ne_request_create(http,method.c_str(),_handler.c_str());
 	ne_add_request_header(req,"content-type","application/json");
 	
 	currentMessage = _json;
 	
 	std::string json = Json::FastWriter().write(_json);
+
+	unsigned char join[HMAC_LENGTH*3];
+	HMAC(EVP_sha256(), hmac, HMAC_SECRET_LENGTH,(unsigned char *) method.c_str(),method.length(), join, NULL);
+	HMAC(EVP_sha256(), hmac, HMAC_SECRET_LENGTH,(unsigned char *) _handler.c_str(),_handler.length(), join+HMAC_LENGTH, NULL);
+	HMAC(EVP_sha256(), hmac, HMAC_SECRET_LENGTH,(unsigned char *) json.c_str(),json.length(), join+2*HMAC_LENGTH, NULL);
+
+	unsigned char * digest_join = HMAC(EVP_sha256(), hmac, HMAC_SECRET_LENGTH,(unsigned char *) join,HMAC_LENGTH*3, NULL, NULL);
+
+	gchar * digest_enc = g_base64_encode(digest_join, HMAC_LENGTH);
 	
-	gchar * digest_enc = b64HexHMAC(json);
+	printf("METHOD: %s\n", method.c_str());
+	printf("BODY: %s\n", json.c_str());
+	printf("PATH: %s\n", _handler.c_str());
 	printf("HMAC: %s\n", digest_enc);
+	
 	ne_add_request_header(req,"X-Ycm-Hmac",digest_enc);
 	g_free(digest_enc);
 	std::ofstream s("temp.file"); s << json; s.close();
