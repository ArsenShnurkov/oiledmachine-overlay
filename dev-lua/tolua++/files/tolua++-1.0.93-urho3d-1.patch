diff -urp tolua++-1.0.93.orig/src/bin/lua/doit.lua tolua++-1.0.93/src/bin/lua/doit.lua
--- tolua++-1.0.93.orig/src/bin/lua/doit.lua	2016-11-24 09:48:57.434551445 -0800
+++ tolua++-1.0.93/src/bin/lua/doit.lua	2016-11-24 10:14:49.842927355 -0800
@@ -11,6 +11,8 @@
 -- the author has no obligation to provide maintenance, support, updates,
 -- enhancements, or modifications.
 
+-- Modified by Aster Jian for Urho3D
+
 function parse_extra()
 
 	for k,v in ipairs(_extra_parameters or {}) do
@@ -48,6 +50,11 @@ function doit ()
 		_basic['string'] = 'cppstring'
 		_basic['std::string'] = 'cppstring'
 		_basic_ctype.cppstring = 'const char*'
+		
+		-- Urho3D: Add Urho3D::String Support in tolua++
+		_basic['String'] = 'urho3dstring'
+		_basic['Urho3D::String'] = 'urho3dstring'
+		_basic_ctype.urho3dstring = 'const char*'
 	end
 
 	-- proccess package
diff -urp tolua++-1.0.93.orig/src/bin/lua/variable.lua tolua++-1.0.93/src/bin/lua/variable.lua
--- tolua++-1.0.93.orig/src/bin/lua/variable.lua	2016-11-24 09:48:57.435551482 -0800
+++ tolua++-1.0.93/src/bin/lua/variable.lua	2016-11-24 10:03:09.085599197 -0800
@@ -9,6 +9,7 @@
 -- the author has no obligation to provide maintenance, support, updates,
 -- enhancements, or modifications.
 
+-- Modified by Aster Jian and Yao Wei Tjong for Urho3D
 
 -- Variable class
 -- Represents a extern variable or a public member of a class.
@@ -105,11 +106,13 @@ function classVariable:supcode ()
 
  local class = self:inclass()
 
-	local prop_get,prop_set
+	-- Urho3D: Fixed tolua++ bug, let it generate reference property's set code
+	local prop_type,prop_get,prop_set
 	if string.find(self.mod, 'tolua_property') then
 
 		local _,_,type = string.find(self.mod, "tolua_property__([^%s]*)")
 		type = type or "default"
+		prop_type = type
 		prop_get,prop_set = get_property_methods(type, self.name)
 		self.mod = string.gsub(self.mod, "tolua_property[^%s]*", "")
 	end
@@ -159,8 +162,24 @@ function classVariable:supcode ()
 	else
 		local push_func = get_push_function(self.type)
 		t = self.type
-		if self.ptr == '&' or self.ptr == '' then
+		-- Urho3D: Fixed tolua++ bug, let it generate reference property's set code
+		if self.ptr == '&' then
 			output('  ',push_func,'(tolua_S,(void*)&'..self:getvalue(class,static,prop_get)..',"',t,'");')
+			elseif self.ptr == '' then
+			if prop_type == nil then
+			output('  ',push_func,'(tolua_S,(void*)&'..self:getvalue(class,static,prop_get)..',"',t,'");')
+			else
+			output('  '..self.type..' tolua_ret = ('..self.type..')'..self:getvalue(class,static,prop_get)..';\n')
+			output('  #ifdef __cplusplus\n')
+			output('    void* tolua_obj = (void*)Mtolua_new(('..self.type..')(tolua_ret));\n')
+			output('    tolua_pushusertype(tolua_S,tolua_obj,"'..self.type..'");\n')
+			output('    tolua_register_gc(tolua_S,lua_gettop(tolua_S));\n')
+			output('  #else\n')
+			output('    void* tolua_obj = tolua_copy(tolua_S,(void*)&tolua_ret,sizeof('..self.type..'));\n')
+			output('    tolua_pushusertype(tolua_S,tolua_obj,"'..self.type..'");\n')
+			output('    tolua_register_gc(tolua_S,lua_gettop(tolua_S));\n')
+			output('  #endif\n')
+			end
 		else
 			output('  ',push_func,'(tolua_S,(void*)'..self:getvalue(class,static,prop_get)..',"',t,'");')
 		end
@@ -237,7 +256,12 @@ function classVariable:supcode ()
 				output(' = ')
 			end
 			if not t and ptr=='' then output('*') end
-			output('((',self.mod,self.type)
+			-- Urho3D: Fixed tolua++ bug, let it generate reference property's set code
+			if self.ptr ~= '&' then
+				output('((',self.mod,self.type)
+			else
+				output('(*(',self.mod,self.type)
+			end
 			if not t then
 				output('*')
 			end
diff -urp tolua++-1.0.93.orig/src/lib/tolua_is.c tolua++-1.0.93/src/lib/tolua_is.c
--- tolua++-1.0.93.orig/src/lib/tolua_is.c	2016-11-24 09:48:57.440551671 -0800
+++ tolua++-1.0.93/src/lib/tolua_is.c	2016-11-24 10:04:00.317525207 -0800
@@ -12,6 +12,8 @@
 ** enhancements, or modifications.
 */
 
+// Modified by Yao Wei Tjong for Urho3D
+
 #include "tolua++.h"
 #include "lauxlib.h"
 
@@ -338,6 +340,8 @@ TOLUA_API int tolua_isbooleanarray
 	else
 	{
 		int i;
+		if (dim == -1)          // Urho3D - auto detect the array size if -1 is given
+			dim = (int)lua_rawlen(L, lo);
 		for (i=1; i<=dim; ++i)
 		{
 			lua_pushnumber(L,i);
@@ -365,6 +369,8 @@ TOLUA_API int tolua_isnumberarray
 	else
 	{
 		int i;
+		if (dim == -1)          // Urho3D - auto detect the array size if -1 is given
+			dim = (int)lua_rawlen(L, lo);
 		for (i=1; i<=dim; ++i)
 		{
 			lua_pushnumber(L,i);
@@ -392,6 +398,8 @@ TOLUA_API int tolua_isstringarray
 	else
 	{
 		int i;
+		if (dim == -1)          // Urho3D - auto detect the array size if -1 is given
+			dim = (int)lua_rawlen(L, lo);
 		for (i=1; i<=dim; ++i)
 		{
 			lua_pushnumber(L,i);
@@ -419,6 +427,8 @@ TOLUA_API int tolua_istablearray
 	else
 	{
 		int i;
+		if (dim == -1)          // Urho3D - auto detect the array size if -1 is given
+			dim = (int)lua_rawlen(L, lo);
 		for (i=1; i<=dim; ++i)
 		{
 			lua_pushnumber(L,i);
@@ -446,6 +456,8 @@ TOLUA_API int tolua_isuserdataarray
 	else
 	{
 		int i;
+		if (dim == -1)          // Urho3D - auto detect the array size if -1 is given
+			dim = (int)lua_rawlen(L, lo);
 		for (i=1; i<=dim; ++i)
 		{
 			lua_pushnumber(L,i);
@@ -473,11 +485,13 @@ TOLUA_API int tolua_isusertypearray
 	else
 	{
 		int i;
+		if (dim == -1)          // Urho3D - auto detect the array size if -1 is given
+			dim = (int)lua_rawlen(L, lo);
 		for (i=1; i<=dim; ++i)
 		{
 			lua_pushnumber(L,i);
 			lua_gettable(L,lo);
-	  if (!(lua_isnil(L,-1) || lua_isuserdata(L,-1)) &&
+	  if (!(lua_isnil(L,-1) || lua_isusertype(L,-1, type)) && // Urho3D - bug fix to check user type instead of user data
 			    !(def && lua_isnil(L,-1))
 						)
 			{
