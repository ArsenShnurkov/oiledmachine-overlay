--- wireshark-1.12.6.orig/epan/dissectors/packet-usb-ptp.c	2015-07-07 18:41:00.871291356 -0700
+++ wireshark-1.12.6/epan/dissectors/packet-usb-ptp.c	2015-07-07 18:40:27.848029841 -0700
@@ -86,18 +86,20 @@
 static gint hf_cmd_objpropcode                 = -1;
 static gint hf_objhandle                       = -1;
 
+static expert_field ei_unknown_ptp_device = EI_INIT;
+static expert_field ei_unknown_ptp_type = EI_INIT;
+
 /* Determine which classes this device lives in */
 static guint32
-usb_ptp_flavor(packet_info *pinfo)
+usb_ptp_flavor(packet_info *pinfo, usb_conv_info_t *usb_conv_info)
 {
     guint32              flavor;
-    usb_conv_info_t     *usb_conv_info = NULL;
 
     /* Put camera into different classes depending on vendor id, etc 
      * Based on libgphoto/camlibs/ptp2/library.c:fixup_cached_deviceinfo()
      */
     flavor = USB_PTP_FLAVOR_ALL;
-    usb_conv_info = (usb_conv_info_t *) pinfo->usb_conv_info;
+    //usb_conv_info = (usb_conv_info_t *) pinfo->usb_conv_info;
 
     /* Not modeled as a switch because I expect more complicated decode here for flavors, as modeled in libgphoto
      * For example not all canon's support the PTP extensions */
@@ -174,11 +176,10 @@
 
 /* Add a value from a 16-bit masked value table */
 static void
-proto_tree_add_item_mask(packet_info *pinfo,proto_tree *tree, gint hf, 
+proto_tree_add_item_mask(packet_info *pinfo,usb_conv_info_t *usb_conv_info,proto_tree *tree, gint hf, 
         tvbuff_t *tvb, const gint length, const gint offset, const gint add_info)
 {
     const value_string_masked_t *vsm               = NULL;
-    usb_conv_info_t             *usb_conv_info     = NULL;
     usb_ptp_conv_info_t         *usb_ptp_conv_info = NULL;
     guint16                      val;
     header_field_info           *hfinfo;
@@ -193,7 +194,6 @@
     hfinfo = proto_registrar_get_nth(hf);
     vals = (value_string_masked_t *) hfinfo->strings;
 
-    usb_conv_info     = (usb_conv_info_t *)     pinfo->usb_conv_info;
     usb_ptp_conv_info = (usb_ptp_conv_info_t *) usb_conv_info->class_data;
 
     /* May not have the packet annotated, and may not have any value table for this header field */
@@ -233,7 +233,7 @@
 
 /* Add Indexed array of 32-bit objects (not masked) */
 static gint
-usb_ptp_add_array_il(packet_info *pinfo _U_,proto_tree *parent_tree, gint hf,  tvbuff_t *tvb, gint offset, const char *str)
+usb_ptp_add_array_il(packet_info *pinfo _U_,proto_tree *parent_tree, gint hf, tvbuff_t *tvb, gint offset, const char *str)
 {
     guint32                      length;
     guint32                      i;
@@ -268,7 +268,7 @@
 
 /* Add Indexed array of 16-bit objects (masked)*/
 static gint
-usb_ptp_add_array_is(packet_info *pinfo,proto_tree *parent_tree, gint hf,  tvbuff_t *tvb, gint offset, const char *str)
+usb_ptp_add_array_is(packet_info *pinfo,usb_conv_info_t *usb_conv_info,proto_tree *parent_tree, gint hf,  tvbuff_t *tvb, gint offset, const char *str)
 {
     guint32                      length;
     guint32                      i;
@@ -294,7 +294,7 @@
 
     for (i=0; i<length; i++)
     {
-        proto_tree_add_item_mask(pinfo,tree,hf,tvb,2,offset,0);
+        proto_tree_add_item_mask(pinfo,usb_conv_info,tree,hf,tvb,2,offset,0);
         offset+=2;
     }
 
@@ -302,16 +302,14 @@
 }
 
 static void
-dissect_usb_ptp_get_device_info(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, gint offset)
+dissect_usb_ptp_get_device_info(tvbuff_t *tvb, packet_info *pinfo, usb_conv_info_t *usb_conv_info, proto_tree *parent_tree, gint offset)
 {
     proto_tree *tree = NULL;
-    usb_conv_info_t       *usb_conv_info;
     usb_ptp_conv_info_t   *usb_ptp_conv_info;
     usb_ptp_device_info_t *usb_ptp_device_info;
     guint16 vendor_extension_id;
 
     /* Create device info struct if not there already and attach it */
-    usb_conv_info       = (usb_conv_info_t *)     pinfo->usb_conv_info;
     usb_ptp_conv_info   = (usb_ptp_conv_info_t *) usb_conv_info->class_data;
     usb_ptp_device_info = usb_ptp_conv_info->device_info;
     if (!usb_ptp_device_info)
@@ -342,11 +340,11 @@
     proto_tree_add_item(tree,hf_devinfo_functionalmode               ,tvb,offset,2,  ENC_LITTLE_ENDIAN);
     offset+=2;
     /* TODO: Store array values in dev_info struct */
-    offset = usb_ptp_add_array_is(pinfo,tree,hf_devinfo_operationsupported     ,tvb,offset,"OPERATIONS SUPPORTED");
-    offset = usb_ptp_add_array_is(pinfo,tree,hf_devinfo_eventsupported         ,tvb,offset,"EVENTS SUPPORTED");
-    offset = usb_ptp_add_array_is(pinfo,tree,hf_devinfo_devicepropertysupported,tvb,offset,"DEVICE PROPERTIES SUPPORTED");
-    offset = usb_ptp_add_array_is(pinfo,tree,hf_devinfo_captureformat          ,tvb,offset,"CAPTURE FORMATS SUPPORTED");
-    offset = usb_ptp_add_array_is(pinfo,tree,hf_devinfo_imageformat            ,tvb,offset,"IMAGE FORMATS SUPPORTED");
+    offset = usb_ptp_add_array_is(pinfo,usb_conv_info,tree,hf_devinfo_operationsupported     ,tvb,offset,"OPERATIONS SUPPORTED");
+    offset = usb_ptp_add_array_is(pinfo,usb_conv_info,tree,hf_devinfo_eventsupported         ,tvb,offset,"EVENTS SUPPORTED");
+    offset = usb_ptp_add_array_is(pinfo,usb_conv_info,tree,hf_devinfo_devicepropertysupported,tvb,offset,"DEVICE PROPERTIES SUPPORTED");
+    offset = usb_ptp_add_array_is(pinfo,usb_conv_info,tree,hf_devinfo_captureformat          ,tvb,offset,"CAPTURE FORMATS SUPPORTED");
+    offset = usb_ptp_add_array_is(pinfo,usb_conv_info,tree,hf_devinfo_imageformat            ,tvb,offset,"IMAGE FORMATS SUPPORTED");
     offset = usb_ptp_add_uint_string(tree,hf_devinfo_manufacturer      ,tvb,offset,usb_ptp_device_info->Manufacturer);
     offset = usb_ptp_add_uint_string(tree,hf_devinfo_model             ,tvb,offset,usb_ptp_device_info->Model);
     offset = usb_ptp_add_uint_string(tree,hf_devinfo_deviceversion     ,tvb,offset,usb_ptp_device_info->DeviceVersion);
@@ -393,7 +391,7 @@
 }
 
 static void
-dissect_usb_ptp_payload(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint16 ptp_type,
+dissect_usb_ptp_payload(tvbuff_t *tvb, packet_info *pinfo, usb_conv_info_t *usb_conv_info, proto_tree *tree, guint16 ptp_type,
         guint16 ptp_code, const value_string_masked_t *vsm _U_, gint offset)
 {
     guint length_payload;
@@ -404,7 +402,7 @@
             switch (ptp_code)
             {
                 case USB_PTP_OC_GETDEVICEINFO:
-                    dissect_usb_ptp_get_device_info(tvb,pinfo,tree,offset);
+                    dissect_usb_ptp_get_device_info(tvb,pinfo,usb_conv_info,tree,offset);
                     return;
                 case USB_PTP_OC_GETSTORAGEIDS:
                     offset = usb_ptp_add_array_il(pinfo,tree,hf_storageid,tvb,offset,"STORAGE IDS");
@@ -415,7 +413,7 @@
                 /*case USB_PTP_OC_SETDEVICEPROPVALUE: TODO
                  *    return dissect_usb_ptp_set_device_prop_value(tvb,pinfo,tree,offset); */
                 case USB_PTP_OC_GETOBJECTPROPSSUPPORTED:
-                    offset = usb_ptp_add_array_is(pinfo,tree,hf_cmd_objpropcode,tvb,offset,"OBJECT PROPERTY CODES");
+                    offset = usb_ptp_add_array_is(pinfo,usb_conv_info,tree,hf_cmd_objpropcode,tvb,offset,"OBJECT PROPERTY CODES");
                     return; 
                 default:
                     break;
@@ -425,21 +423,21 @@
             switch (ptp_code)
             {
                 case USB_PTP_OC_SETDEVICEPROPVALUE:
-                    proto_tree_add_item_mask(pinfo,tree,hf_cmd_devicepropvalue,tvb,4,offset,1);
+                    proto_tree_add_item_mask(pinfo,usb_conv_info,tree,hf_cmd_devicepropvalue,tvb,4,offset,1);
                     offset+=4;
                     break;
                 case USB_PTP_OC_GETDEVICEPROPDESC:
-                    proto_tree_add_item_mask(pinfo,tree,hf_cmd_devicepropdesc,tvb,4,offset,1);
+                    proto_tree_add_item_mask(pinfo,usb_conv_info,tree,hf_cmd_devicepropdesc,tvb,4,offset,1);
                     offset+=4;
                     break;
                 case USB_PTP_OC_GETOBJECTPROPSSUPPORTED:
-                    proto_tree_add_item_mask(pinfo,tree,hf_cmd_objformatcode,tvb,4,offset,1);
+                    proto_tree_add_item_mask(pinfo,usb_conv_info,tree,hf_cmd_objformatcode,tvb,4,offset,1);
                     offset+=4;
                     break;
                 case USB_PTP_OC_GETOBJECTPROPDESC:
-                    proto_tree_add_item_mask(pinfo,tree,hf_cmd_objpropcode  ,tvb,4,offset,1);
+                    proto_tree_add_item_mask(pinfo,usb_conv_info,tree,hf_cmd_objpropcode  ,tvb,4,offset,1);
                     offset+=4;
-                    proto_tree_add_item_mask(pinfo,tree,hf_cmd_objformatcode,tvb,4,offset,1);
+                    proto_tree_add_item_mask(pinfo,usb_conv_info,tree,hf_cmd_objformatcode,tvb,4,offset,1);
                     offset+=4;
                     break;
                 default:
@@ -467,7 +465,7 @@
 }
 
 static void
-dissect_usb_ptp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree)
+dissect_usb_ptp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, void *data) //source
 {
     usb_conv_info_t *usb_conv_info;
     proto_tree *tree = NULL;
@@ -490,13 +488,13 @@
     col_set_str(pinfo->cinfo, COL_PROTOCOL, "USB-PTP");
 
     /* Add our own class information to usb_conv_info */
-    usb_conv_info = (usb_conv_info_t *) pinfo->usb_conv_info;
+    usb_conv_info = (usb_conv_info_t *)data;
     usb_ptp_conv_info = (usb_ptp_conv_info_t *) usb_conv_info->class_data;
     if(!usb_ptp_conv_info)
     {
         usb_ptp_conv_info = (usb_ptp_conv_info_t *) se_alloc0(sizeof(usb_ptp_conv_info_t));
         usb_conv_info->class_data = usb_ptp_conv_info;
-        usb_ptp_conv_info->flavor = usb_ptp_flavor(pinfo);
+        usb_ptp_conv_info->flavor = usb_ptp_flavor(pinfo, usb_conv_info);
     }
 
     if (parent_tree)
@@ -510,7 +508,7 @@
     if (!(   (usb_conv_info->interfaceSubclass == IF_CLASS_IMAGE_SUBCLASS_PTP)
           && (usb_conv_info->interfaceProtocol == IF_CLASS_IMAGE_PROTOCOL_PTP) ))
     {
-        expert_add_undecoded_item(tvb, pinfo, tree, 0, length_tvb, PI_WARN);
+        proto_tree_add_expert(tree, pinfo, &ei_unknown_ptp_device, tvb, 0, length_tvb);
         return;
     }
 
@@ -555,7 +553,7 @@
             break;
         default:
             g_snprintf(col_class, col_class_length, "?");
-            expert_add_undecoded_item(tvb, pinfo, tree, offset, 2, PI_WARN);
+            proto_tree_add_expert(tree, pinfo, &ei_unknown_ptp_type, tvb, offset, 2);
             break;
     }
     offset +=2;
@@ -570,13 +568,14 @@
     /* Pass along if we have a payload */
     if ( (length_tvb-offset) > 0 )
     {
-        dissect_usb_ptp_payload(tvb,pinfo,tree,ptp_type,ptp_code,vsm,offset);
+        dissect_usb_ptp_payload(tvb,pinfo,usb_conv_info,tree,ptp_type,ptp_code,vsm,offset);
     }
 }
 
 void
 proto_register_usb_ptp(void)
 {
+    expert_module_t* expert_usb_ptp;
     /* header field array
     * struct header_field_info {
     *     const char      *name;
@@ -693,10 +692,18 @@
         &ett_usb_ptp_parameters
     };
 
+    static ei_register_info ei[] = {
+        { &ei_unknown_ptp_type, { "usb-ptp.expert.unknown_ptp_type",   PI_PROTOCOL, PI_NOTE, "Unknown ptp type", EXPFILL }},
+        { &ei_unknown_ptp_type, { "usb-ptp.expert.unknown_ptp_device", PI_PROTOCOL, PI_WARN, "Unknown ptp device", EXPFILL }},
+    };
+
     proto_usb_ptp = proto_register_protocol("USB Picture Transfer Protocol", "USB-PTP", "usb-ptp");
     proto_register_field_array(proto_usb_ptp, hf, array_length(hf));
     proto_register_subtree_array(usb_ptp_subtrees, array_length(usb_ptp_subtrees));
     register_dissector("usb-ptp", dissect_usb_ptp, proto_usb_ptp);
+
+    expert_usb_ptp = expert_register_protocol(proto_usb_ptp);
+    expert_register_field_array(expert_usb_ptp, ei, array_length(ei));
 }
 
 void
